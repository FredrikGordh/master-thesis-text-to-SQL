[
    {
        "question_id": 89,
        "db_id": "financial",
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "SQL": "SELECT COUNT(T1.district_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'East Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 90,
        "db_id": "financial",
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "evidence": "A3 contains the data of region",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
        "difficulty": "simple"
    },
    {
        "question_id": 91,
        "db_id": "financial",
        "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
        "SQL": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
        "difficulty": "simple"
    },
    {
        "question_id": 92,
        "db_id": "financial",
        "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
        "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
        "SQL": "SELECT DISTINCT T2.district_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
        "difficulty": "simple"
    },
    {
        "question_id": 93,
        "db_id": "financial",
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000",
        "difficulty": "moderate"
    },
    {
        "question_id": 94,
        "db_id": "financial",
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "SQL": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 95,
        "db_id": "financial",
        "question": "List out the account numbers of clients who are youngest and have highest average salary?",
        "evidence": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
        "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM client ORDER BY birth_date DESC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 96,
        "db_id": "financial",
        "question": "How many customers who choose statement of weekly issuance are Owner?",
        "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'Owner' AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple"
    },
    {
        "question_id": 97,
        "db_id": "financial",
        "question": "List out the clients who choose statement of issuance after transaction are Disponent?",
        "evidence": "'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
        "difficulty": "simple"
    },
    {
        "question_id": 98,
        "db_id": "financial",
        "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "SQL": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 99,
        "db_id": "financial",
        "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "evidence": "Loan validity more than 12 months refers to duration > 12",
        "SQL": "SELECT T1.account_id FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1993' AND T1.duration = 12 ORDER BY T1.amount DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 100,
        "db_id": "financial",
        "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Slokolov?",
        "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
        "SQL": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Slokolov'",
        "difficulty": "moderate"
    },
    {
        "question_id": 101,
        "db_id": "financial",
        "question": "List out the accounts who have the earliest trading date in 1995 ?",
        "evidence": "",
        "SQL": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 102,
        "db_id": "financial",
        "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
        "difficulty": "simple"
    },
    {
        "question_id": 103,
        "db_id": "financial",
        "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
        "evidence": "",
        "SQL": "SELECT T2.account_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "difficulty": "simple"
    },
    {
        "question_id": 104,
        "db_id": "financial",
        "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
        "evidence": "",
        "SQL": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "difficulty": "simple"
    },
    {
        "question_id": 105,
        "db_id": "financial",
        "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
        "evidence": "",
        "SQL": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
        "difficulty": "simple"
    },
    {
        "question_id": 106,
        "db_id": "financial",
        "question": "What is the biggest amount of transaction that the client whose card was opened in 1995/10/8 made?",
        "evidence": "",
        "SQL": "SELECT T2.amount FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1995-10-08' ORDER BY T2.amount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 107,
        "db_id": "financial",
        "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
        "evidence": "Earlier birthdate refers to older age; A11 refers to average salary",
        "SQL": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 108,
        "db_id": "financial",
        "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
        "evidence": "",
        "SQL": "SELECT T2.amount FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id ORDER BY T1.amount DESC, T2.date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 109,
        "db_id": "financial",
        "question": "How many clients opened their accounts in Jesenik branch were women?",
        "evidence": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
        "difficulty": "simple"
    },
    {
        "question_id": 110,
        "db_id": "financial",
        "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
        "evidence": "",
        "SQL": "SELECT T1.type FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1998-09-02' AND T2.amount = 5100",
        "difficulty": "simple"
    },
    {
        "question_id": 111,
        "db_id": "financial",
        "question": "How many accounts were opened in Litomerice in 1996?",
        "evidence": "A2 refers to district name; Litomerice is one of district names.",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
        "difficulty": "simple"
    },
    {
        "question_id": 112,
        "db_id": "financial",
        "question": "For the female client who was born in 1976/1/29, which brand did she opened her account?",
        "evidence": "Female refers to gender = 'F'; A2 refers to district names",
        "SQL": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 113,
        "db_id": "financial",
        "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
        "evidence": "",
        "SQL": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "difficulty": "simple"
    },
    {
        "question_id": 114,
        "db_id": "financial",
        "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "evidence": "A3 stands for region names",
        "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 115,
        "db_id": "financial",
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100%; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 116,
        "db_id": "financial",
        "question": "For the client who first applied the loan in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
        "SQL": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "difficulty": "challenging"
    },
    {
        "question_id": 117,
        "db_id": "financial",
        "question": "What is the percentage of loan amount that has been fully paid with no issue.",
        "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
        "SQL": "SELECT CAST(SUM(status = 'A') AS REAL) * 100 / COUNT(amount) FROM loan",
        "difficulty": "moderate"
    },
    {
        "question_id": 118,
        "db_id": "financial",
        "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
        "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%.",
        "SQL": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(amount) FROM loan WHERE amount < 100000",
        "difficulty": "moderate"
    },
    {
        "question_id": 119,
        "db_id": "financial",
        "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
        "evidence": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
        "difficulty": "moderate"
    },
    {
        "question_id": 120,
        "db_id": "financial",
        "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
        "evidence": "Accounts holder refers to the person who own this account.",
        "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "difficulty": "moderate"
    },
    {
        "question_id": 121,
        "db_id": "financial",
        "question": "List account ID and account opening date for accounts from 'Prachatice'.",
        "evidence": "A2 refers to the names of districts.",
        "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
        "difficulty": "simple"
    },
    {
        "question_id": 122,
        "db_id": "financial",
        "question": "State the district and region for loan ID '4990'.",
        "evidence": "A2, A3 contains the information about district and region respectively.",
        "SQL": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "difficulty": "simple"
    },
    {
        "question_id": 123,
        "db_id": "financial",
        "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
        "evidence": "A2 contains district names and A3 contains region names.",
        "SQL": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "difficulty": "simple"
    },
    {
        "question_id": 124,
        "db_id": "financial",
        "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "evidence": "A3 refers to regions; A11 refers to average salary",
        "SQL": "SELECT T3.loan_id, T2.A3, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "difficulty": "simple"
    },
    {
        "question_id": 125,
        "db_id": "financial",
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100%; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "SQL": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "difficulty": "challenging"
    },
    {
        "question_id": 126,
        "db_id": "financial",
        "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
        "evidence": "A2 contains the information about district.",
        "SQL": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
        "difficulty": "simple"
    },
    {
        "question_id": 127,
        "db_id": "financial",
        "question": "List the account IDs with monthly issuance of statements.",
        "evidence": "'POPLATEK MESICNE' stands for monthly issuance",
        "SQL": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'",
        "difficulty": "simple"
    },
    {
        "question_id": 128,
        "db_id": "financial",
        "question": "List the top ten districts, by descending order, from the highest to the lowest, the number of female account holders.",
        "evidence": "A2 refers to districts; Female refers to gender = 'F'",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T2.A2) DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question_id": 129,
        "db_id": "financial",
        "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
        "evidence": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
        "SQL": "SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T2.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question_id": 130,
        "db_id": "financial",
        "question": "How many of the account holders in South Bohemia still do not own credit cards?",
        "evidence": "A3 contains the region names; South Bohemia is one of region names.",
        "SQL": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "difficulty": "moderate"
    },
    {
        "question_id": 131,
        "db_id": "financial",
        "question": "Which district has highest active loan?",
        "evidence": "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "SQL": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 132,
        "db_id": "financial",
        "question": "What is the average loan amount by male borrowers?",
        "evidence": "Male refers to gender = 'M'",
        "SQL": "SELECT AVG(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 133,
        "db_id": "financial",
        "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
        "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
        "SQL": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 134,
        "db_id": "financial",
        "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
        "evidence": "A16 stands for no. of committed crimes 1996",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 135,
        "db_id": "financial",
        "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
        "evidence": "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "SQL": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 136,
        "db_id": "financial",
        "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
        "evidence": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount > 250000",
        "difficulty": "moderate"
    },
    {
        "question_id": 137,
        "db_id": "financial",
        "question": "How many accounts have running contracts in Branch location 1?",
        "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND T3.status = 'C' OR T3.status = 'D'",
        "difficulty": "moderate"
    },
    {
        "question_id": 138,
        "db_id": "financial",
        "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
        "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' GROUP BY T2.A15 ORDER BY T2.A15 DESC LIMIT 1, 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 139,
        "db_id": "financial",
        "question": "How many high-level credit cards have \"disponent\" type of disposition?",
        "evidence": "High-level credit cards refers to the cards with the gold type.",
        "SQL": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'DISPONENT'",
        "difficulty": "simple"
    },
    {
        "question_id": 140,
        "db_id": "financial",
        "question": "How many accounts are there in the district of \"Pisek\"?",
        "evidence": "A2 refers to district name",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
        "difficulty": "simple"
    },
    {
        "question_id": 141,
        "db_id": "financial",
        "question": "Which districts have transactions greater than USS$10,000 in 1997?",
        "evidence": "",
        "SQL": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
        "difficulty": "simple"
    },
    {
        "question_id": 142,
        "db_id": "financial",
        "question": "Which accounts placed orders for household payment in Pisek?",
        "evidence": "k_symbol = 'SIPO' refers to household payment",
        "SQL": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
        "difficulty": "simple"
    },
    {
        "question_id": 143,
        "db_id": "financial",
        "question": "What are the accounts that have both gold and junior credit cards?",
        "evidence": "",
        "SQL": "SELECT T2.account_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type IN ('gold', 'junior')",
        "difficulty": "simple"
    },
    {
        "question_id": 144,
        "db_id": "financial",
        "question": "How much is the average amount in credit card made by account holders in a month, in year 2021?",
        "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawn",
        "SQL": "SELECT AVG(T3.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '2021' AND T3.operation = 'VYBER KARTOU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 145,
        "db_id": "financial",
        "question": "Who are the account holder identification numbers whose spent per month on the credit card is less than the average, in 1998?",
        "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
        "SQL": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount > (SELECT AVG(amount) FROM trans)",
        "difficulty": "moderate"
    },
    {
        "question_id": 146,
        "db_id": "financial",
        "question": "Who are the female account holders who own credit cards and also have loans?",
        "evidence": "Female refers to gender = 'F'",
        "SQL": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 147,
        "db_id": "financial",
        "question": "How many female clients' accounts are in the region of South Bohemia?",
        "evidence": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
        "difficulty": "simple"
    },
    {
        "question_id": 148,
        "db_id": "financial",
        "question": "Please list the accounts whose district is Tabor that are eligible for loans.",
        "evidence": "District refers to column A2; when the account type = 'OWNER', it's eligible for loans",
        "SQL": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
        "difficulty": "moderate"
    },
    {
        "question_id": 149,
        "db_id": "financial",
        "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
        "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans",
        "SQL": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'Owner' AND T1.A11 BETWEEN 8000 AND 9000",
        "difficulty": "challenging"
    },
    {
        "question_id": 150,
        "db_id": "financial",
        "question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
        "evidence": "A3 contains the region names; North Bohemia is a region.",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'",
        "difficulty": "moderate"
    },
    {
        "question_id": 151,
        "db_id": "financial",
        "question": "Please list the name of the districts with accounts that made withdrawal transactions.",
        "evidence": "A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions",
        "SQL": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'",
        "difficulty": "moderate"
    },
    {
        "question_id": 152,
        "db_id": "financial",
        "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
        "evidence": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995.",
        "SQL": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000 GROUP BY T1.A15",
        "difficulty": "moderate"
    },
    {
        "question_id": 153,
        "db_id": "financial",
        "question": "How many 'classic' cards are eligible for loan?",
        "evidence": "when the account type = 'OWNER', it's eligible for loan",
        "SQL": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'Owner'",
        "difficulty": "simple"
    },
    {
        "question_id": 154,
        "db_id": "financial",
        "question": "How many male clients in 'Hl.m. Praha' district?",
        "evidence": "District data appears in the A2; Male means that gender = 'M'",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "difficulty": "simple"
    },
    {
        "question_id": 155,
        "db_id": "financial",
        "question": "How many percent of 'Gold' cards were issued prior to 1998?",
        "evidence": "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%",
        "SQL": "SELECT CAST(SUM(type = 'gold') AS REAL) * 100 / COUNT(card_id) FROM card WHERE STRFTIME('%Y', issued) < '1998'",
        "difficulty": "simple"
    },
    {
        "question_id": 156,
        "db_id": "financial",
        "question": "Who is the owner of the account with the largest loan amount?",
        "evidence": "",
        "SQL": "SELECT T1.client_id FROM disp AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id ORDER BY T2.amount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 157,
        "db_id": "financial",
        "question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?",
        "evidence": "A15 contains information about number of committed crimes in 1995",
        "SQL": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
        "difficulty": "simple"
    },
    {
        "question_id": 158,
        "db_id": "financial",
        "question": "What is the district Id of the account that placed the order with the id 33333?",
        "evidence": "",
        "SQL": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
        "difficulty": "simple"
    },
    {
        "question_id": 159,
        "db_id": "financial",
        "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
        "evidence": "operation = 'VYBER' refers to withdrawal in cash",
        "SQL": "SELECT T3.trans_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 3356 AND T3.operation = 'VYBER'",
        "difficulty": "simple"
    },
    {
        "question_id": 160,
        "db_id": "financial",
        "question": "Among the weekly issuance accounts, how many have a loan of under 200000?",
        "evidence": "frequency = 'POPLATEK TYDNE' stands for weekly issuance",
        "SQL": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000",
        "difficulty": "simple"
    },
    {
        "question_id": 161,
        "db_id": "financial",
        "question": "What type of credit card does the client with the id 13539 own?",
        "evidence": "",
        "SQL": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539",
        "difficulty": "simple"
    },
    {
        "question_id": 162,
        "db_id": "financial",
        "question": "What is the region of the client with the id 3541 from?",
        "evidence": "A3 refers to region",
        "SQL": "SELECT T2.district_id, T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
        "difficulty": "simple"
    },
    {
        "question_id": 163,
        "db_id": "financial",
        "question": "Which district has the most accounts with loan contracts finished with no problems?",
        "evidence": "status = 'A' refers to loan contracts finished with no problems",
        "SQL": "SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T1.district_id ORDER BY COUNT(T2.account_id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 164,
        "db_id": "financial",
        "question": "Who placed the order with the id 32423?",
        "evidence": "",
        "SQL": "SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 32423",
        "difficulty": "simple"
    },
    {
        "question_id": 165,
        "db_id": "financial",
        "question": "Please list all the transactions made by accounts from district 5.",
        "evidence": "",
        "SQL": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5",
        "difficulty": "simple"
    },
    {
        "question_id": 166,
        "db_id": "financial",
        "question": "How many of the accounts are from Jesenik district?",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
        "difficulty": "simple"
    },
    {
        "question_id": 167,
        "db_id": "financial",
        "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
        "evidence": "After 1996 means date > = '1997-01-01",
        "SQL": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
        "difficulty": "simple"
    },
    {
        "question_id": 168,
        "db_id": "financial",
        "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
        "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
        "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "difficulty": "moderate"
    },
    {
        "question_id": 169,
        "db_id": "financial",
        "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
        "SQL": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "difficulty": "challenging"
    },
    {
        "question_id": 170,
        "db_id": "financial",
        "question": "How many credit card withdrawals were recorded after 1995?",
        "evidence": "Operation = 'VYBER KARTOU' means credit card withdrawals",
        "SQL": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'",
        "difficulty": "simple"
    },
    {
        "question_id": 171,
        "db_id": "financial",
        "question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
        "evidence": "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in North Bohemia - Total no. of committed crimes in 1996 in East Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16",
        "SQL": "SELECT SUM(IIF(A3 = 'East Bohemia', A16, 0)) - SUM(IIF(A3 = 'North Bohemia', A16, 0)) FROM district",
        "difficulty": "moderate"
    },
    {
        "question_id": 172,
        "db_id": "financial",
        "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
        "evidence": "",
        "SQL": "SELECT SUM(type = 'Owner') , SUM(type = 'Disponent') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "difficulty": "simple"
    },
    {
        "question_id": 173,
        "db_id": "financial",
        "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
        "evidence": "k_symbol refers to the purpose of payments",
        "SQL": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.amount = 3539",
        "difficulty": "simple"
    },
    {
        "question_id": 174,
        "db_id": "financial",
        "question": "What year was account owner number 130 born?",
        "evidence": "",
        "SQL": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 130",
        "difficulty": "simple"
    },
    {
        "question_id": 175,
        "db_id": "financial",
        "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?",
        "evidence": "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 176,
        "db_id": "financial",
        "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
        "evidence": "",
        "SQL": "SELECT T3.amount, T3.status FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 992",
        "difficulty": "simple"
    },
    {
        "question_id": 177,
        "db_id": "financial",
        "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
        "evidence": "",
        "SQL": "SELECT T3.balance, T1.gender FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 4 AND T3.trans_id = 851",
        "difficulty": "simple"
    },
    {
        "question_id": 178,
        "db_id": "financial",
        "question": "Which kind of credit card does client number 9 possess?",
        "evidence": "",
        "SQL": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9",
        "difficulty": "simple"
    },
    {
        "question_id": 179,
        "db_id": "financial",
        "question": "How much, in total, did client number 617 pay for all of the transactions in 1998?",
        "evidence": "",
        "SQL": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617",
        "difficulty": "simple"
    },
    {
        "question_id": 180,
        "db_id": "financial",
        "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
        "evidence": "",
        "SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "difficulty": "moderate"
    },
    {
        "question_id": 181,
        "db_id": "financial",
        "question": "Please provide the IDs of the 3 female clients with the largest loans.",
        "evidence": "Female refers to gender = 'F'",
        "SQL": "SELECT T1.client_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 182,
        "db_id": "financial",
        "question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
        "evidence": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment",
        "SQL": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
        "difficulty": "moderate"
    },
    {
        "question_id": 183,
        "db_id": "financial",
        "question": "How many accounts in Beroun were opened after 1996?",
        "evidence": "",
        "SQL": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
        "difficulty": "simple"
    },
    {
        "question_id": 184,
        "db_id": "financial",
        "question": "How many female customers have a junior credit card?",
        "evidence": "Female refers to gender = 'F'",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
        "difficulty": "simple"
    },
    {
        "question_id": 185,
        "db_id": "financial",
        "question": "What proportion of customers who have accounts at the Prague branch are female?",
        "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague",
        "SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
        "difficulty": "moderate"
    },
    {
        "question_id": 186,
        "db_id": "financial",
        "question": "What percentage of male clients request for weekly statements to be issued?",
        "evidence": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 187,
        "db_id": "financial",
        "question": "How many clients who choose statement of weekly issuance are User?",
        "evidence": "Frequency = 'POPLATEK TYDNE' refers to weekly issuance",
        "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'USER'",
        "difficulty": "simple"
    },
    {
        "question_id": 188,
        "db_id": "financial",
        "question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
        "evidence": "",
        "SQL": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 189,
        "db_id": "financial",
        "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
        "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary",
        "SQL": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 190,
        "db_id": "financial",
        "question": "How many clients who were born in 1920 stay in east Bohemia?",
        "evidence": "East Bohemia appears in the column A3, which refers to the region.",
        "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
        "difficulty": "simple"
    },
    {
        "question_id": 191,
        "db_id": "financial",
        "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
        "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "difficulty": "simple"
    },
    {
        "question_id": 192,
        "db_id": "financial",
        "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
        "evidence": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "SQL": "SELECT AVG(T2.payments) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
        "difficulty": "moderate"
    },
    {
        "question_id": 193,
        "db_id": "financial",
        "question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
        "evidence": "Only the owner accounts have the right to issue permanent orders or apply for loans",
        "SQL": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'",
        "difficulty": "moderate"
    },
    {
        "question_id": 194,
        "db_id": "financial",
        "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
        "evidence": "When type is gold, the credit card is high-level",
        "SQL": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "difficulty": "moderate"
    },
    {
        "db_id": "retail_world",
        "question": "To whom does Nancy Davolio report? Please give that employee's full name.",
        "evidence": "to whom refers to ReportsTo; full name = FirstName, LastName;",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE EmployeeID = ( SELECT ReportsTo FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy' )"
    },
    {
        "db_id": "retail_world",
        "question": "Which phone number should I call if I want to reach Nancy Davolio's home?",
        "evidence": "phone number of Nancy Davolio's home refers to HomePhone WHERE FirstName = 'Nancy' AND LastName = 'Davolio';",
        "SQL": "SELECT HomePhone FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy'"
    },
    {
        "db_id": "retail_world",
        "question": "How many employees have Andrew Fuller as their direct supervisor?",
        "evidence": "direct supervisor refers to ReportsTo where the person being reported to is usually the direct supervisor of the reporter;",
        "SQL": "SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )"
    },
    {
        "db_id": "retail_world",
        "question": "Which employee has the highest salary? Please give his or her full name.",
        "evidence": "highest salary refers to MAX(Salary); full name = FirstName, LastName;",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question": "How much higher is the salary of Andrew Fuller than that of Nancy Davolio?",
        "evidence": "how much higher = SUBTRACT(SUM(Salary WHERE LastName = 'Fuller' and FirstName = 'Andrew'), SUM(Salary WHERE LastName = 'Davolio' and FirstName = 'Nancy'));",
        "SQL": "SELECT ( SELECT Salary FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' ) - ( SELECT Salary FROM Employees WHERE LastName = 'Davolio' AND FirstName = 'Nancy' ) AS RESULT"
    },
    {
        "db_id": "retail_world",
        "question": "Among the employees working as Sales Representatives, how many of them are located in the UK?",
        "evidence": "Sales Representatives refers to Title = 'Sales Representative'; UK refers to Country = 'UK';",
        "SQL": "SELECT COUNT(Country) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question": "Which employee is in charge of the sales in Hollis? Please give the employee's full name.",
        "evidence": "Hollis refers to TerritoryDescription = 'Hollis'; full name = FirstName, LastName;",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Hollis'"
    },
    {
        "db_id": "retail_world",
        "question": "The sales of how many territories is Nancy Davolio in charge of?",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the names of all the territories whose sales are taken in charge by Nancy Davolio.",
        "evidence": "names of all territories refers to TerritoryDescription;",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio'"
    },
    {
        "db_id": "retail_world",
        "question": "The sales of how many territories in total do the employees in London take charge of?",
        "evidence": "London refers to city = 'London';",
        "SQL": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the territories whose sales are taken in charge by the employees who report to Andrew Fuller.",
        "evidence": "territories refers to TerritoryDescription;",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )"
    },
    {
        "db_id": "retail_world",
        "question": "How many employees in the UK takes charge of the sales in over 4 territories?",
        "evidence": "UK refers to Country = 'UK'; employees with over 4 territories refers to EmployeeID WHERE TerritoryID > 4;",
        "SQL": "SELECT COUNT(COUNTEID) FROM ( SELECT T1.EmployeeID AS COUNTEID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Country = 'UK' GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4 ) T1"
    },
    {
        "db_id": "retail_world",
        "question": "How many territories are there in the Eastern Region?",
        "evidence": "Eastern Region refers to RegionDescription = 'Eastern';",
        "SQL": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'"
    },
    {
        "db_id": "retail_world",
        "question": "Please list all the territories in the Eastern Region.",
        "evidence": "territories refers to TerritoryDescription; Eastern Region refers to RegionDescription = 'Eastern';",
        "SQL": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'"
    },
    {
        "db_id": "retail_world",
        "question": "How many employees in total are in charge of the sales in the Eastern Region?",
        "evidence": "Eastern Region refers to RegionDescription = 'Eastern';",
        "SQL": "SELECT COUNT(T.EmployeeID) FROM ( SELECT T3.EmployeeID FROM Region AS T1 INNER JOIN Territories AS T2 ON T1.RegionID = T2.RegionID INNER JOIN EmployeeTerritories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.RegionDescription = 'Eastern' GROUP BY T3.EmployeeID ) T"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the home phone numbers of the employees who are in charge of the sales in the territories in the Eastern Region.",
        "evidence": "home phone numbers refers to HomePhone; Eastern Region refers to RegionDescription = 'Eastern';",
        "SQL": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern ' GROUP BY T1.HomePhone"
    },
    {
        "db_id": "retail_world",
        "question": "How many more territories are there in than Eastern Region than in the Southern Region?",
        "evidence": "how many more = SUBTRACT(SUM(RegionDescription = 'Eastern'), SUM(RegionDescription = 'Southern')); Eastern Region refers to RegionDescription = 'Eastern'; Southern Region refers to RegionDescription = 'Southern';",
        "SQL": "SELECT ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ) - ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern' ) AS Calu"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the names of all the products ordered in order no. 10248.",
        "evidence": "names of the products refers to ProductName; order no. refers to OrderID;",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248"
    },
    {
        "db_id": "retail_world",
        "question": "What is the quantity of Ikura ordered in order no. 10273?",
        "evidence": "Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "SQL": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the total price of Ikura ordered in order no. 10273?",
        "evidence": "total price = MULTIPLY(UnitPrice, Quantity); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "SQL": "SELECT T2.UnitPrice * T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the total production of the product that is ordered in the highest quantity in order no. 10248?",
        "evidence": "total production of the product = SUM(units in stock, units on order); order no. refers to OrderID;",
        "SQL": "SELECT T1.UnitsInStock + T1.UnitsOnOrder FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Of all the products ordered in order no. 10248, which product has the highest user satisfaction?",
        "evidence": "order no. refers to OrderID; highest user satisfaction refers to MAX(ReorderLevel);",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T1.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders have asked for the product Tofu?",
        "evidence": "product refers to ProductName;",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Tofu'"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the IDs of the orders with a product whose production is not continuous.",
        "evidence": "IDs of the orders refers to OrderID; production is not continuous refers to Discontinued = 1;",
        "SQL": "SELECT T2.OrderID FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "Of all the orders that have ordered Ikura, how many of them enjoys a unit price that's lower than its standard unit price?",
        "evidence": "Ikura refers to ProductName = 'Ikura'; ordered unit price that's lower than its standard unit price refers to \"Order Details\".UnitPrice < \"Product\".UnitPrice;",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura' AND T2.UnitPrice < T1.UnitPrice"
    },
    {
        "db_id": "retail_world",
        "question": "What is the name of the supplier company for Aniseed Syrup?",
        "evidence": "name of the supplier refers to CompanyName; Aniseed Syrup refers to ProductName = 'Aniseed Syrup';",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Aniseed Syrup'"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the names of all the products whose supplier is in Japan.",
        "evidence": "names of the products refers to ProductName; Japan refers to Country = 'Japan';",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the phone numbers of the suppliers of the products that have a higher units on order than units in stock.",
        "evidence": "UnitsInStock < UnitsOnOrder;",
        "SQL": "SELECT DISTINCT T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitsInStock < T1.UnitsOnOrder"
    },
    {
        "db_id": "retail_world",
        "question": "Among the products that are no longer in continuous production, how many of them have their supplier in the USA?",
        "evidence": "no longer continuous refers to Discontinued = 1; USA refers to Country = 'USA';",
        "SQL": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'USA' AND T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "Who is the supplier of the product with the highest unit price?",
        "evidence": "supplier of the product refers to CompanyName; highest unit price refers to MAX(UnitPrice);",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average salary of the employees who takes charge of the sales of over 4 territories?",
        "evidence": "average salary = DIVIDE(SUM(Salary), COUNT(EmployeeID)); employees who takes charge of over 4 territories refers to EmployeeID WHERE COUNT(TerritoryID) > 4;",
        "SQL": "SELECT AVG(T1.Salary) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.EmployeeID HAVING COUNT(T2.TerritoryID) > 4"
    },
    {
        "db_id": "retail_world",
        "question": "How much lower in percentage is the unit price of Ikura in order no. 10273 than its standard unit price?",
        "evidence": "how much lower in percentage = MULTIPLY(DIVIDE(SUBTRACT(Products.UnitPrice, Order Details.UnitPrice), Products.UnitPrice), 100); Ikura refers to ProductName = 'Ikura'; order no. refers to OrderID;",
        "SQL": "SELECT CAST((T1.UnitPrice - T2.UnitPrice) AS REAL) * 100 / T1.UnitPrice FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10273 AND T1.ProductName = 'Ikura'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average quantity of Ikura ordered in one order?",
        "evidence": "average = AVG(Quantity); Ikura refers to ProductName = 'Ikura';",
        "SQL": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Ikura'"
    },
    {
        "db_id": "retail_world",
        "question": "Among the products ordered in order no. 10248, which product has the biggest ratio of units on order to units in stock?",
        "evidence": "order no. refers to OrderID; biggest ratio = MAX(DIVIDE(UnitsOnOrder, UnitsInStock));",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10248 ORDER BY T1.UnitsOnOrder / T1.UnitsInStock DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Give the full name of the youngest employee.",
        "evidence": "full name = FirstName, LastName; youngest refers to latest BirthDate;",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = ( SELECT MAX(BirthDate) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question": "Who is the newest hired employee? Give the full name.",
        "evidence": "newest hired refers to latest HireDate; full name = FirstName, LastName;",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE HireDate = ( SELECT MAX(HireDate) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the number of orders that were handled by Michael Suyama.",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'"
    },
    {
        "db_id": "retail_world",
        "question": "Who is in charge of the \"Santa Monica\" territory? Give the full name.",
        "evidence": "Santa Monica refers to TerritoryDescription = 'Santa Monica'; full name = FirstName, MiddleName, LastName;",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Santa Monica'"
    },
    {
        "db_id": "retail_world",
        "question": "Give the home phone number of the employee who is in charge of \"Savannah\" territory.",
        "evidence": "home phone number refers to HomePhone; Savannah refers to TerritoryDescription = 'Savannah';",
        "SQL": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Savannah'"
    },
    {
        "db_id": "retail_world",
        "question": "For the order from \"HILAA\" on 1997/12/25, what was the total quantity of the products in that order?",
        "evidence": "HILLA refers to CustomerID = 'HILAA'; on 1997/12/25 refers to OrderDate = '1997/12/25';",
        "SQL": "SELECT SUM(T2.Quantity) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.CustomerID = 'HILAA' AND T1.OrderDate LIKE '1997-12-25%'"
    },
    {
        "db_id": "retail_world",
        "question": "For the order paying the highest freight, how many kinds of products does it contain?",
        "evidence": "highest freight refers to MAX(Freight); kinds of products refers to ProductID;",
        "SQL": "SELECT COUNT(T2.ProductID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.Freight = ( SELECT MAX(Freight) FROM Orders ) GROUP BY T1.OrderID"
    },
    {
        "db_id": "retail_world",
        "question": "Tell the name of the shipper company for the order No.10585.",
        "evidence": "name of the shipper company refers to ShipName; order No. refers to OrderID;",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10585"
    },
    {
        "db_id": "retail_world",
        "question": "Give the number of orders that were shipped by \"Federal Shipping\".",
        "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping';",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping'"
    },
    {
        "db_id": "retail_world",
        "question": "How many kinds of products are there in the the category of \"dairy products\"?",
        "evidence": "kinds of products refers to ProductID; category refers to CategoryName;",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Dairy Products'"
    },
    {
        "db_id": "retail_world",
        "question": "Which category does \"tofu\" belong to?",
        "evidence": "category refers to CategoryName; tofu refers to ProductName = 'Tofu';",
        "SQL": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Tofu'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the total production of the products from the supplier \u201cEscargots Nouveaux\u201d?",
        "evidence": "total production of the products = add(units in stock , units on order); supplier \u201cEscargots Nouveaux\u201d refers to CompanyName = 'Escargots Nouveaux'",
        "SQL": "SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'"
    },
    {
        "db_id": "retail_world",
        "question": "Give the reorder level for the products from the supplier \"Nord-Ost-Fisch Handelsgesellschaft mbH\".",
        "evidence": "supplier \"Nord-Ost-Fisch Handelsgesellschaft mbH\" refers to CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'",
        "SQL": "SELECT T1.ReorderLevel FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Nord-Ost-Fisch Handelsgesellschaft mbH'"
    },
    {
        "db_id": "retail_world",
        "question": "How many kinds of products are supplied by \"Karkki Oy\" company?",
        "evidence": "supplied by refers to CompanyName",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Karkki Oy'"
    },
    {
        "db_id": "retail_world",
        "question": "Give the contact name of the supplier for the product \"Gudbrandsdalsost\".",
        "evidence": "product refers to ProductName",
        "SQL": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gudbrandsdalsost'"
    },
    {
        "db_id": "retail_world",
        "question": "Tell the country name of the supplier for \"Scottish Longbreads\".",
        "evidence": "\"Scottish Longbreads\" refers to ProductName = 'Scottish Longbreads'",
        "SQL": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Scottish Longbreads'"
    },
    {
        "db_id": "retail_world",
        "question": "Give the number of territories in the \"Northern\" region.",
        "evidence": "\"Northern\" region refers to RegionDescription = 'Northern'",
        "SQL": "SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern'"
    },
    {
        "db_id": "retail_world",
        "question": "Which region is \"Columbia\" in?",
        "evidence": "region refers to RegionID; \"Columbia\" refers to TerritoryDescription = 'Columbia'",
        "SQL": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryDescription = 'Columbia'"
    },
    {
        "db_id": "retail_world",
        "question": "For the orders of Customer \"WHITC\", what is the percentage of the orders were fulfilled with shipper company \"United Package\"?",
        "evidence": "Customer \"WHITC\" refers to CustomerID = 'WHITC'; shipper company \"United Package\" refers to CompanyName = 'United Package'; percentage = divide(count(ShipperID where CompanyName = 'United Package') , count(ShipperID)) * 100%",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'United Package' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'WHITC'"
    },
    {
        "db_id": "retail_world",
        "question": "How many percent more orders were fulfilled with shipper company \"United Package\" than with \"Speedy Express\"?",
        "evidence": "percent = divide(subtract(count(OrderID where CompanyName = 'United Package') , count(OrderID where CompanyName = 'Speedy Express')) , count(OrderID where CompanyName = 'Speedy Express')) * 100%",
        "SQL": "SELECT CAST((COUNT(CASE WHEN T2.CompanyName = 'United Package' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END)) AS REAL) * 100 / COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID"
    },
    {
        "db_id": "retail_world",
        "question": "How many times is the number of territories in \"Eastern Region\" than \"Southern Region\"?",
        "evidence": "\"Eastern Region\" refers to RegionDescription = 'Eastern'; \"Southern Region\" refers to RegionDescription = 'Southern'; times = divide(count(TerritoryDescription where RegionDescription = 'Eastern') , count(TerritoryDescription where RegionDescription = 'Southern'))",
        "SQL": "SELECT CAST(( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ) AS REAL) / ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern' ) AS Calu"
    },
    {
        "db_id": "retail_world",
        "question": "How many customers are there in the country with the highest number of customers?",
        "evidence": "highest number refers to max(count(CustomerID))",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers GROUP BY Country ORDER BY COUNT(CustomerID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What are the order ids of the orders with freight of over 800?",
        "evidence": "freight of over 800 refers to Freight > 800",
        "SQL": "SELECT OrderID FROM Orders WHERE Freight > 800"
    },
    {
        "db_id": "retail_world",
        "question": "What is the Island Trading customer's complete address?",
        "evidence": "Island Trading refers to CompanyName = 'Island Trading'; complete address = Address, City, Region, Country, PostalCode",
        "SQL": "SELECT Address, City, Region, Country, PostalCode FROM Customers WHERE CompanyName = 'Island Trading'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the most expensive product?",
        "evidence": "product refers to ProductName; most expensive refers to max(UnitPrice)",
        "SQL": "SELECT ProductName FROM Products WHERE UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "How many suppliers are there in the United States of America?",
        "evidence": "United States of America refers to Country = 'USA'",
        "SQL": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'"
    },
    {
        "db_id": "retail_world",
        "question": "Which product have the highest user satisfaction?",
        "evidence": "product refers to ProductName; highest user satisfaction refers to max(ReorderLevel)",
        "SQL": "SELECT ProductName FROM Products WHERE ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "What is the full name of the employee with the highest salary?",
        "evidence": "full name refers to FirstName LastName; highest salary refers to max(Salary)",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question": "What are the names of the products that were discountinued?",
        "evidence": "discontinued refers to Discontinued = 1; name of products refers to ProductName",
        "SQL": "SELECT ProductName FROM Products WHERE Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average salary of sales representatives in the United Kingdom?",
        "evidence": "average salary = avg(Salary); sales representative refers to Title = 'Sales Representative'; in the United Kingdom refers to Country = 'UK'",
        "SQL": "SELECT AVG(Salary) FROM Employees WHERE Title = 'Sales Representative' AND Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the most widely used shipping company in the United States of America?",
        "evidence": "most widely used refers to max(count(ShipVia)); shipping company refers to CompanyName; in the United States of America refers to ShipCountry = 'USA'",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.ShipCountry = 'USA' GROUP BY T2.CompanyName ORDER BY COUNT(T2.CompanyName) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many products were supplied by Pavlova, Ltd.?",
        "evidence": "Pavlova, Ltd. refers to CompanyName = 'Pavlova, Ltd.'",
        "SQL": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Pavlova, Ltd.'"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders were shipped to GREAL via United Package?",
        "evidence": "GREAL refers to CustomerID = 'GREAL'; via United Package refers to CompanyName = 'United Package'",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.CustomerID = 'GREAL' AND T2.CompanyName = 'United Package'"
    },
    {
        "db_id": "retail_world",
        "question": "What are the names of the suppliers whose products have the highest user satisfaction?",
        "evidence": "name of the supplier refers to SupplierID; highest user satisfaction refers to max(ReorderLevel)",
        "SQL": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "In total, how many orders were shipped via United Package?",
        "evidence": "via United Package refers to CompanyName = 'United Package'",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package'"
    },
    {
        "db_id": "retail_world",
        "question": "How many suppliers in Australia whose products were discontinued?",
        "evidence": "in Australia refers to Country = 'Australia'; discontinued refers to Discontinued = 1",
        "SQL": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country = 'Australia'"
    },
    {
        "db_id": "retail_world",
        "question": "How much is the total purchase price, including freight, of the top 2 most expensive products?",
        "evidence": "total purchase price including freight refers to add(multiply(UnitPrice , Quantity) , Freight); most expensive refers to max(UnitPrice)",
        "SQL": "SELECT T2.UnitPrice * T2.Quantity + T1.Freight FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID ORDER BY T2.UnitPrice * T2.Quantity + T1.Freight DESC LIMIT 2"
    },
    {
        "db_id": "retail_world",
        "question": "What is the name of the supplier that supplies the most products to the company?",
        "evidence": "name of the supplier refers to SupplierID; the most product refers to max(count(ProductID))",
        "SQL": "SELECT T1.SupplierID FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T1.SupplierID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What are the names of the products that were ordered that have a unit price of no more than 5?",
        "evidence": "unit price of no more than 5 refers to UnitPrice < 5; name of products refers to ProductName",
        "SQL": "SELECT DISTINCT T1.ProductName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.UnitPrice < 5"
    },
    {
        "db_id": "retail_world",
        "question": "What is the title of the employee with the highest number of territories in charge?",
        "evidence": "highest number of territories refers to max(TerritoryID)",
        "SQL": "SELECT T1.Title FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.Title ORDER BY COUNT(T2.TerritoryID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the most ordered products by customers?",
        "evidence": "most ordered refers to max(count(ProductID)); product refers to ProductID",
        "SQL": "SELECT T1.ProductID FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.ProductID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What are the territory descriptions of territories in the Eastern region?",
        "evidence": "in the Eastern region refers to RegionDescription = 'Eastern'",
        "SQL": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern' ORDER BY T1.TerritoryDescription"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average number of territories do each sales representative is in charge of?",
        "evidence": "sales representative refers to Title = 'Sales Representative'; average number of territories = divide(count(TerritoryID) , count(EmployeeID)) where Title = 'Sales Representative'",
        "SQL": "SELECT CAST(COUNT(T2.TerritoryID) AS REAL) / COUNT(DISTINCT T1.EmployeeID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Title = 'Sales Representative'"
    },
    {
        "db_id": "retail_world",
        "question": "Among the beverages, which product has the highest customer satisfaction?",
        "evidence": "beverage refers to CategoryName = 'Beverages'; highest customer satisfaction refers to max(ReorderLevel)",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Beverages' ORDER BY T1.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the full name of the employee who handled the highest amount of orders?",
        "evidence": "full name refers to FirstName LastName; highest amount of orders refers to max(count(OrderID))",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.FirstName, T1.LastName ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many products were ordered in the order with the highest freight?",
        "evidence": "highest freight refers to max(Freight)",
        "SQL": "SELECT COUNT(T2.ProductID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID GROUP BY T2.ProductID ORDER BY COUNT(T1.Freight) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Among the seafood products, which product have the highest total production of the production?",
        "evidence": "seafood product refers to CategoryName = 'Seafood'; product refers to ProductID; highest total production refers to max(add(units in stock, units on order))",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Seafood' ORDER BY T1.UnitsInStock + T1.UnitsOnOrder DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the difference in salary of the top 2 employees with the highest number of territories in charge?",
        "evidence": "highest number of territories refers to max(TerritoryID); difference in salary = subtract(employeeA.Salary, employeeB.Salary)",
        "SQL": "SELECT MAX(Salary) - MIN(Salary) FROM ( SELECT T1.Salary FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.EmployeeID, T1.Salary ORDER BY COUNT(T2.TerritoryID) DESC LIMIT 2 ) T1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average price of products with more than fifty units in stock?",
        "evidence": "more than fifty units in stock refers to UnitsInStock > 50; average price = avg(UnitPrice where UnitsInStock > 50)",
        "SQL": "SELECT SUM(UnitPrice) / COUNT(UnitPrice) FROM Products WHERE UnitsInStock > 50"
    },
    {
        "db_id": "retail_world",
        "question": "List the company names of customers from the city with the most customers.",
        "evidence": "most customers refers to max(count(Relationship))",
        "SQL": "SELECT CompanyName FROM `Customer and Suppliers by City` WHERE CITY = ( SELECT City FROM `Customer and Suppliers by City` GROUP BY City ORDER BY COUNT(Relationship) DESC LIMIT 1 )"
    },
    {
        "db_id": "retail_world",
        "question": "Find and list the company name, company contact name, and contact title of customers from Madrid.",
        "evidence": "from Madrid refers to City = 'Madrid'",
        "SQL": "SELECT CompanyName, ContactName, ContactTitle FROM Customers WHERE City = 'Madrid'"
    },
    {
        "db_id": "retail_world",
        "question": "Give the full name and contact number of employees in descending order of age.",
        "evidence": "full name refers to FirstName LastName; contact number refers to HomePhone; descending order of age refers to order by BirthDate desc limit 1",
        "SQL": "SELECT FirstName, LastName, HomePhone FROM Employees ORDER BY BirthDate DESC"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the average price of products shipped to the UK.",
        "evidence": "average price = divide(sum(UnitPrice) , count(ProductID)); the UK refers to Country = 'UK'",
        "SQL": "SELECT AVG(UnitPrice) AS avg FROM Invoices WHERE Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question": "Among all the orders, which products sold for the most amount?",
        "evidence": "the most amount refers to max(sum(Quantity))",
        "SQL": "SELECT ProductID FROM `Order Details` GROUP BY ProductID ORDER BY SUM(Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "List the name, address, and phone number of companies that supply products for more than thirty dollars per unit.",
        "evidence": "more than thirty dollars per unit refers to UnitPrice > 30",
        "SQL": "SELECT T2.CompanyName, T2.Address, T2.Phone FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice > 30"
    },
    {
        "db_id": "retail_world",
        "question": "Among the customers, list customers' company names and addresses who paid more than average in freight.",
        "evidence": "paid more than average in freight refers to Freight > divide(sum(Freight) , count(OrderID))",
        "SQL": "SELECT DISTINCT T1.CompanyName, T1.Address FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Freight > ( SELECT AVG(Freight) FROM Orders )"
    },
    {
        "db_id": "retail_world",
        "question": "Find and list the full name of employees who are from the territory, Wilton.",
        "evidence": "full name refers to FirstName LastName; Wilton refers to TerritoryDescription = 'Wilton'",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Wilton'"
    },
    {
        "db_id": "retail_world",
        "question": "List the names of non-US suppliers that have discontinued.",
        "evidence": "non-US refers to Country <> 'USA'; discontinued refers to Discontinued = 1",
        "SQL": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1 AND T2.Country != 'USA'"
    },
    {
        "db_id": "retail_world",
        "question": "List the top five most costly products in 1998.",
        "evidence": "most costly refers to max(add(unit price , Freight)); in 1998 refers to OrderDate > = '1998-01-01 00:00:00' AND OrderDate < '1999-01-01 00:00:00'",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.OrderDate LIKE '1998%' ORDER BY T3.UnitPrice + T1.Freight DESC LIMIT 5"
    },
    {
        "db_id": "retail_world",
        "question": "Of the customers who are from Canada, how many used Federal Shipping?",
        "evidence": "from Canada refers to Country = 'Canada'; Federal Shipping refers to ShipName = 'Federal Shipping'",
        "SQL": "SELECT COUNT(T3.CustomerID) FROM Shippers AS T1 INNER JOIN Orders AS T2 ON T1.ShipperID = T2.ShipVia INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.ShipName = 'Federal Shipping'"
    },
    {
        "db_id": "retail_world",
        "question": "List the name of the top ten most ordered product's names in descending order of the number of orders.",
        "evidence": "most ordered refers to max(COUNT(OrderID))",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID GROUP BY T3.ProductName ORDER BY COUNT(*) DESC LIMIT 10"
    },
    {
        "db_id": "retail_world",
        "question": "Which supplier supplies the most amount of products?",
        "evidence": "supplier refers to SupplierID; most amount refers to max(count(ProductID))",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID GROUP BY T2.SupplierID, T2.CompanyName ORDER BY COUNT(T1.ProductName) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the full name and region of each employee in alphabetical order.",
        "evidence": "full name refers to FirstName LastName; region refers to RegionDescription",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.LastName, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID ORDER BY T1.FirstName"
    },
    {
        "db_id": "retail_world",
        "question": "Which employee handled the most amount of orders in 1996? Give the full name, title, and address of this employee.",
        "evidence": "most amount of orders refers to max(count(OrderID)); in 1996 refers to OrderDate > = '1996-01-01 00:00:00' AND OrderDate < '1997-01-01 00:00:00'; full name refers to FirstName, LastName",
        "SQL": "SELECT FirstName, LastName, Title, address FROM Employees WHERE EmployeeID = ( SELECT T1.EmployeeID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderDate BETWEEN '1996-01-01 00:00:00' AND '1997-01-01 00:00:00' GROUP BY T1.EmployeeID ORDER BY COUNT(T2.OrderID) DESC LIMIT 1 )"
    },
    {
        "db_id": "retail_world",
        "question": "What was the average unit price of products shipped via United Package in 1997?",
        "evidence": "via United Package refers to CompanyName = 'United Package'; in 1997 refers to OrderDate > = '1997-01-01 00:00:00' AND OrderDate < '1998-01-01 00:00:00'; average unit price = divide(sum(UnitPrice), count(ShipperID))",
        "SQL": "SELECT AVG(T2.UnitPrice) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T1.OrderDate LIKE '1997%' AND T3.CompanyName = 'United Package'"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the percentage of shipping done through Speedy Express.",
        "evidence": "through Speedy Express refers to CompanyName = 'Speedy Express'; percentage = divide(count(ShipperID where CompanyName = 'Speedy Express') , count(ShipperID)) * 100%",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'Speedy Express' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.ShipVia) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID"
    },
    {
        "db_id": "retail_world",
        "question": "What is the last name of the employees who must report to the Vice President of Sales?",
        "evidence": "report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Vice President of Sales refers to Title = 'Vice President, Sales';",
        "SQL": "SELECT LastName FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Vice President, Sales' )"
    },
    {
        "db_id": "retail_world",
        "question": "What is the highest total price paid for an order?",
        "evidence": "the highest total price paid for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));",
        "SQL": "SELECT UnitPrice * Quantity * (1 - Discount) AS THETOP FROM `Order Details` ORDER BY UnitPrice * Quantity * (1 - Discount) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Which 3 products are produced in greater quantity?",
        "evidence": "3 products produced in greater quantity refer to MAX(SUM(UnitsInStock, UnitsOnOrder)) Limit 3;",
        "SQL": "SELECT ProductName FROM Products ORDER BY UnitsInStock + UnitsOnOrder DESC LIMIT 3"
    },
    {
        "db_id": "retail_world",
        "question": "Of the 10 products with the highest unit price, identify by their ID the ones that have generated the least satisfaction.",
        "evidence": "High reorder level generally means high user satisfaction of the product and vice versa; the least satisfaction refers to MIN(ReorderLevel); the highest unit price refers to MAX(UnitPrice);",
        "SQL": "SELECT ProductID FROM Products ORDER BY ReorderLevel ASC, UnitPrice DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many non-discontinued products are there in the dairy category?",
        "evidence": "non-discontinued products in the dairy category refer to ProductID where Discontinued = 0 and CategoryName = 'Dairy Products';",
        "SQL": "SELECT COUNT(T1.CategoryID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Dairy Products' AND T2.Discontinued = 0"
    },
    {
        "db_id": "retail_world",
        "question": "What territories is the Inside Sales Coordinator in charge of?",
        "evidence": "territories refer to TerritoryDescription; Title = 'Inside Sales Coordinator';",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.Title = 'Inside Sales Coordinator'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate the name of the companies that have freighted products for a value greater than 2,000,000.",
        "evidence": "freighted products for a value greater than 2,000,000 refer to Freight > 2000000; name of companies refers to CompanyName;",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Freight > 2000000"
    },
    {
        "db_id": "retail_world",
        "question": "Through which companies have products been shipped the most times to the city of Aachen?",
        "evidence": "shipped the most times refer to MAX(COUNT(ShipVia)); city of Aachen refers to ShipCity = 'Aache'; companies refers to CompanyName;",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.ShipCity = 'Aachen' GROUP BY T2.CompanyName ORDER BY COUNT(T1.ShipVia) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "List the full name of all employees who work in the Northern region.",
        "evidence": "full names = FirstName, LastName; Northern region refers to RegionDescription = 'Northern';",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Northern'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the name of the contact person of the Pavlova supplier company?",
        "evidence": "contact person refers to ContactName; Pavlova is the name of the product;",
        "SQL": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Pavlova'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate the name of the products that have been shipped to the city of Paris.",
        "evidence": "shipped to the city of Paris refers to ShipCity = 'Paris';",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.ShipCity = 'Paris'"
    },
    {
        "db_id": "retail_world",
        "question": "What product is the least shipped to the postal code 28023?",
        "evidence": "the least shipped product refers ProductName where MIN(Quantity);",
        "SQL": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.PostalCode = 28023 ORDER BY T3.Quantity LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the full name of the employee in charge of the Southern region who is to report to Andrew Fuller?",
        "evidence": "full names = FirstName, LastName; report to represents a hierarchical relationship where the person being reported to is usually the direct supervisor of the reporter; Andrew Fuller refers to Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller'; Southern region refers to RegionDescription = 'Southern';",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Southern' AND T1.ReportsTo = ( SELECT EmployeeID FROM Employees WHERE FirstName = 'Andrew' AND LastName = 'Fuller' )"
    },
    {
        "db_id": "retail_world",
        "question": "On what date did the Du monde entier company request that 9 units of Filo Mix be sent to it?",
        "evidence": "9 units of Filo Mix refer to ProductName where Quantity = 9; Du monde entier is the name of the customer; date refers to OrderDate;",
        "SQL": "SELECT T2.OrderDate FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T4.ProductName = 'Filo Mix' AND T3.Quantity = 9 AND T1.CompanyName = 'Du monde entier'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate the name of the categories to which the products of order number 10933 belong.",
        "evidence": "order number 10933 refers to OrderID = 10933;",
        "SQL": "SELECT T3.CategoryName FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T2.OrderID = 10933"
    },
    {
        "db_id": "retail_world",
        "question": "What is the phone number for the employee in charge of the Portsmouth territory?",
        "evidence": "phone refers to HomePhone; Portsmouth territory refers to TerritoryDescription = 'Portsmouth';",
        "SQL": "SELECT T1.HomePhone FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Portsmouth'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average quantity of product that have been shipped by Federal Shipping in November 1996?",
        "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping'; DIVIDE(SUM(Quantity), COUNT(ProductID)) where CompanyName = 'Federal Shipping' and ShippedDate > = '1996-11-01 00:00:00' AND ShippedDate < '1996-12-01 00:00:00';",
        "SQL": "SELECT CAST(SUM(T2.Quantity) AS REAL) / COUNT(T2.OrderID) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T1.ShippedDate LIKE '1996-11%' AND T3.CompanyName = 'Federal Shipping'"
    },
    {
        "db_id": "retail_world",
        "question": "Of all the shipments made by United Package throughout the year 1996, what percentage correspond to the month of September?",
        "evidence": "DIVIDE(COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-09-01 00:00:00' AND ShippedDate < '1996-09-30 00:00:00')), (COUNT(OrderID where CompanyName = 'United Package' and ShippedDate > = '1996-01-01 00:00:00' AND ShippedDate < '1997-01-01 00:00:00')) as percentage; \n",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.ShippedDate LIKE '1996-09%' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.ShipVia) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package' AND T1.ShippedDate LIKE '1996%'"
    },
    {
        "db_id": "retail_world",
        "question": "How many owners are located in Mexico?",
        "evidence": "owners in Mexico refer to ContactTitle where Country = 'Mexico';",
        "SQL": "SELECT COUNT(ContactTitle) FROM Customers WHERE Country = 'Mexico' AND ContactTitle = 'Owner'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the full address of Andr Fonseca?",
        "evidence": "full address includes Address, City, Region, PostalCode and Country; ContactName = 'Andr Fonseca';",
        "SQL": "SELECT Address, City, Region, PostalCode, Country FROM Customers WHERE ContactName = 'Andr Fonseca'"
    },
    {
        "db_id": "retail_world",
        "question": "What are the companies that have the same phone area code as 171?",
        "evidence": "phone area code as 171 refers to Phone LIKE '(171)%'; companies refer to CompanyName;",
        "SQL": "SELECT CompanyName FROM Customers WHERE Phone LIKE '(171)%'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the difference in the number of employees from the UK and the USA who work as sales representatives?",
        "evidence": "SUBTRACT(COUNT(EmployeeID where Country = 'UK' and Title = 'sales representative'), COUNT(EmployeeID where Country = 'USA' and Title = 'sales representative'));",
        "SQL": "SELECT ( SELECT COUNT(Title) FROM Employees WHERE Country = 'UK' AND Title = 'Sales Representative' ) - ( SELECT COUNT(Title) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative' ) AS DIFFERENCE"
    },
    {
        "db_id": "retail_world",
        "question": "How many sales associates are located in Sao Paulo, Brazil?",
        "evidence": "sales associates refer to ContactTitle; Sao Paulo is the name of the city in the country Brazil;",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'Sao Paulo' AND Country = 'Brazil' AND ContactTitle = 'Sales Associate'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the family name of the employee who shipped the order 10521 to CACTU?",
        "evidence": "order 10521 refers to OrderID = 10521; CustomerID = 'CACTU'; family name refers to LastName;",
        "SQL": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10521 AND T2.CustomerID = 'CACTU'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the shipping cost for order number 10692 from the company Alfreds Futterkiste?",
        "evidence": "Alfreds Futterkiste is the name of the company; order number 10692 refers to OrderID = 10692;",
        "SQL": "SELECT T2.Freight FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10692 AND T1.CompanyName = 'Alfreds Futterkiste'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the shipping company for order number 10558?",
        "evidence": "order number 10558 refers to OrderID = 10558;",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10558"
    },
    {
        "db_id": "retail_world",
        "question": "Please list any three order numbers that have been shipped using Speedy Express.",
        "evidence": "Speedy Express is the name of the shipping company; three order numbers refer to OrderID LIMIT 3;",
        "SQL": "SELECT T1.OrderID FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express' LIMIT 3"
    },
    {
        "db_id": "retail_world",
        "question": "What are the products that belong to the beverage category?",
        "evidence": "products belong to beverage category refer to ProductName where CategoryName = 'beverage';",
        "SQL": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Beverages'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the description of the category that tofu belongs to?",
        "evidence": "tofu is the name of the product;",
        "SQL": "SELECT T1.Description FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ProductName = 'tofu'"
    },
    {
        "db_id": "retail_world",
        "question": "Which company supplies Gula Malacca?",
        "evidence": "Gula Malacca is the name of the product; company refers to CompanyName;",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Gula Malacca'"
    },
    {
        "db_id": "retail_world",
        "question": "What are the products that are supplied by Aux joyeux ecclsiastiques?",
        "evidence": "Aux joyeux ecclsiastiques is the name of supply company; products refer to ProductName;",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Aux joyeux ecclsiastiques'"
    },
    {
        "db_id": "retail_world",
        "question": "How much per unit of Konbu does Mayumi's charge?",
        "evidence": "Mayumi's is the name of the company; how much per unit of Konbu refers to UnitPrice where ProductName = 'Konbu';",
        "SQL": "SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'Mayumi%' AND T1.ProductName = 'Konbu'"
    },
    {
        "db_id": "retail_world",
        "question": "Who is the person to contact to get Camembert Pierrot?",
        "evidence": "Camembert Pierrot is the name of the product; person to contact refers to ContactName;",
        "SQL": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Camembert Pierrot'"
    },
    {
        "db_id": "retail_world",
        "question": "Please name any three products that have been discontinued in the meat or poultry category.",
        "evidence": "three products that have been discontinued refer to ProductName LIMIT 3 where Discontinued = 1; CategoryName = 'Meat/Poultry';",
        "SQL": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.Discontinued = 1 AND T1.CategoryName = 'Meat/Poultry' LIMIT 3"
    },
    {
        "db_id": "retail_world",
        "question": "Please name any two products that have the highest satisfaction levels among users of Heli Swaren GmbH & Co. KG.",
        "evidence": "High reorder level generally means high user satisfaction; the highest satisfaction levels refer to MAX(ReorderLevel); two products refer to ProductName LIMIT 2; CompanyName = 'Heli Swaren GmbH & Co. KG';",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Heli Swaren GmbH & Co. KG' ORDER BY T1.ReorderLevel DESC LIMIT 2"
    },
    {
        "db_id": "retail_world",
        "question": "Who is the one representing the company \"Heli Swaren GmbH & Co. KG\"?",
        "evidence": "Heli Swaren GmbH & Co. KG is the name of the company; who is representing refers to ContactName;",
        "SQL": "SELECT ContactName FROM Suppliers WHERE CompanyName = 'Heli Swaren GmbH & Co. KG'"
    },
    {
        "db_id": "retail_world",
        "question": "From which country is the company \"Drachenblut Delikatessen\" from?",
        "evidence": "Drachenblut Delikatessen is the company name;",
        "SQL": "SELECT Country FROM Customers WHERE CompanyName = 'Drachenblut Delikatessen'"
    },
    {
        "db_id": "retail_world",
        "question": "How many territories are there?",
        "evidence": "",
        "SQL": "SELECT COUNT(TerritoryID) FROM Territories"
    },
    {
        "db_id": "retail_world",
        "question": "What is the largest total price for an order?",
        "evidence": "the largest total price for an order can be calculated as MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1-Discount)));",
        "SQL": "SELECT SUM(UnitPrice) FROM `Order Details` GROUP BY OrderID ORDER BY SUM(UnitPrice) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Which product is the most expensive?",
        "evidence": "most expensive product refers to ProductName where MAX(UnitPrice);",
        "SQL": "SELECT ProductName FROM Products WHERE UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "How many of the orders are shipped to France?",
        "evidence": "shipped to France refers to ShipCountry = 'France';",
        "SQL": "SELECT COUNT(ShipCountry) FROM Orders WHERE ShipCountry = 'France'"
    },
    {
        "db_id": "retail_world",
        "question": "Which region does Hoffman Estates belong to?",
        "evidence": "Hoffman Estates refer to TerritoryDescription;",
        "SQL": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryDescription = 'Hoffman Estates'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the homepage link for the company that supplies the product \"Thringer Rostbratwurst\"?",
        "evidence": "ProductName = 'Thringer Rostbratwurst';",
        "SQL": "SELECT T2.HomePage FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Thringer Rostbratwurst'"
    },
    {
        "db_id": "retail_world",
        "question": "List the first names of the employees who take the orders that ship to the city of \"Reims\".",
        "evidence": "ship to the city of \"Reims\" refers to ShipCity = Reims';",
        "SQL": "SELECT DISTINCT T1.FirstName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ShipCity = 'Reims'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the largest quantity of \"Manjimup Dried Apples\" for an order?",
        "evidence": "the largest quantity of \"Manjimup Dried Apples\" refers to MAX(Quantity) where ProductName = 'Manjimup Dried Apples';",
        "SQL": "SELECT T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T2.ProductID = T1.ProductID WHERE T1.ProductName = 'Manjimup Dried Apples' ORDER BY T2.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders were shipped by \"Speedy Express\"?",
        "evidence": "\"Speedy Express\" is the name of the shipping company; orders refer to OrderID;",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express'"
    },
    {
        "db_id": "retail_world",
        "question": "Make a list of all the territories in the Southern region.",
        "evidence": "territories in the Southern region refer to TerritoryDescription WHERE RegionDescription = 'Southern';",
        "SQL": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern'"
    },
    {
        "db_id": "retail_world",
        "question": "What are the prices on cheese products?",
        "evidence": "prices on cheese refer to UnitPrice WHERE Description = 'Cheeses';",
        "SQL": "SELECT T2.UnitPrice FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.Description = 'Cheeses'"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders did \"Laughing Bacchus Wine Cellars\" make?",
        "evidence": "\"Laughing Bacchus Wine Cellars\" is the name of the company; orders refer to OrderID;",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars'"
    },
    {
        "db_id": "retail_world",
        "question": "List all the products that were shipped to Starenweg 5.",
        "evidence": "products shipped to Starenweg 5 refer to ProductName where ShipAddress = 'Starenweg 5';",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.ShipAddress = 'Starenweg 5' GROUP BY T3.ProductName"
    },
    {
        "db_id": "retail_world",
        "question": "What are the products by the company \"Bigfoot Breweries\"?",
        "evidence": "Bigfoot Breweries is the name of the company; products refer to ProductName;",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Bigfoot Breweries'"
    },
    {
        "db_id": "retail_world",
        "question": "What are the names of Robert King's territories?",
        "evidence": "Robert King is a full name of an employee where LastName = 'King' AND FirstName = 'Robert'; names of territories refer to TerritoryDescription;",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.LastName = 'King' AND T1.FirstName = 'Robert'"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the name of the contact person who made the orders that shipped to Switzerland.",
        "evidence": "shipped to Switzerland refers to ShipCountry = 'Switzerland'; contact person refers to Customers;",
        "SQL": "SELECT T1.ContactName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ShipCountry = 'Switzerland' GROUP BY T1.ContactName"
    },
    {
        "db_id": "retail_world",
        "question": "What proportion of orders are taken by the Sales Representative?",
        "evidence": "DIVIDE(COUNT(OrderID where Title = 'Sales Representative'), COUNT(OrderID)) as percentage;",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.Title = 'Sales Representative' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average salary for employees from ID 1 to 9?",
        "evidence": "ID 1 to 9 refers to EmployeeID BETWEEN 1 AND 9; Average salary = AVG(Salary)",
        "SQL": "SELECT AVG(Salary) FROM Employees WHERE EmployeeID BETWEEN 1 AND 9"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the total salary for employees from UK.",
        "evidence": "\"UK\" is the Country; total salary refers to Sum(Salary)",
        "SQL": "SELECT SUM(Salary) FROM Employees WHERE Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question": "Is (206) 555-1189 the home phone number for Laura Callahan?",
        "evidence": "\"Laura Callahan\" refers to FirstName = 'Laura AND LastName = 'Callahan",
        "SQL": "SELECT CASE WHEN HomePhone = '(206) 555-1189' THEN 'YES' ELSE 'NO' END FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan'"
    },
    {
        "db_id": "retail_world",
        "question": "Write down the notes of employee with the highest salary.",
        "evidence": "highest salary refers to Max(Salary)",
        "SQL": "SELECT Notes FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question": "List down the customer ids who placed order with Michael Suyama.",
        "evidence": "",
        "SQL": "SELECT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'"
    },
    {
        "db_id": "retail_world",
        "question": "Where are the ship countries of orders placed by Janet Leverling?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.ShipCountry FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Janet' AND T1.LastName = 'Leverling'"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders have Margaret Peacock placed?",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Margaret' AND T1.LastName = 'Peacock'"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the average salary per order for Andrew Fuller.",
        "evidence": "average salary = AVG(Salary)",
        "SQL": "SELECT CAST(SUM(T1.Salary) AS REAL) / COUNT(T2.EmployeeID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Andrew' AND T1.LastName = 'Fuller'"
    },
    {
        "db_id": "retail_world",
        "question": "What are the product names of Exotic Liquids?",
        "evidence": "\"Exotic Liquids\" is the CompanyName",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question": "List down the quantity per unit for products of Tokyo Traders.",
        "evidence": "\"Tokyo Traders\" is the CompanyName",
        "SQL": "SELECT T1.QuantityPerUnit FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'"
    },
    {
        "db_id": "retail_world",
        "question": "How many products have been discountinued by New Orleans Cajun Delights?",
        "evidence": "\"New Orleans Cajun Delights\" is the CompanyName; discontinued refers to Discontinued = 1",
        "SQL": "SELECT COUNT(T1.Discontinued) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights'"
    },
    {
        "db_id": "retail_world",
        "question": "Please calculate the average unit price for products of Formaggi Fortini s.r.l.",
        "evidence": "\"Formaggi Fortini s.r.l.\" is the CompanyName; average unit price = AVG(UnitPrice)",
        "SQL": "SELECT SUM(T1.UnitPrice) / COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Formaggi Fortini s.r.l.'"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the total products that are supplied by Japan suppliers.",
        "evidence": "Japan Supplier refers to Country = 'Japan'; total product refers to Count (ProductName)",
        "SQL": "SELECT COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the contact name for product Teatime Chocolate Biscuits?",
        "evidence": "\"Teatime Chocolate Biscuits\" is the ProductName",
        "SQL": "SELECT T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Teatime Chocolate Biscuits'"
    },
    {
        "db_id": "retail_world",
        "question": "List down the company names that have the highest reorder level.",
        "evidence": "Highest reorder level refers to Max(ReorderLevel)",
        "SQL": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "What is the contact title for the person who supplied a product that is 10 boxes x 12 pieces.",
        "evidence": "\"10 boxes x 12 pieces\" is the QuantityPerUnit",
        "SQL": "SELECT T2.ContactTitle FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.QuantityPerUnit = '10 boxes x 12 pieces'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the total units on order from Exotic Liquids?",
        "evidence": "\"Exotic Liquids\" is the CompanyName; total unit on order = Sum(UnitsOnOrder)",
        "SQL": "SELECT SUM(T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the percentage of products supplied by Gai pturage over all products.",
        "evidence": "\"Gai pturage\" is the CompanyName; Percentage = Divide (Count(SupplierID where CompanyName = 'Gai pturage'), Count (SupplierID)) * 100",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.CompanyName = 'Gai pturage' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID"
    },
    {
        "db_id": "retail_world",
        "question": "List the product ID of the top five products, by descending order, the number of quantities in stock.",
        "evidence": "by descending in number of quantity in stock refers to max(UnitsInStock)",
        "SQL": "SELECT ProductID FROM Products ORDER BY UnitsInStock DESC LIMIT 5"
    },
    {
        "db_id": "retail_world",
        "question": "Among the products, how many of them were discontinued in production?",
        "evidence": "discontinued refers to Discontinued = 1",
        "SQL": "SELECT COUNT(*) FROM Products WHERE Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "Give me the address, home phone and salary of the Sales Manager.",
        "evidence": "\"Sales Manage\" is the Title",
        "SQL": "SELECT Address, HomePhone, Salary FROM Employees WHERE Title = 'Sales Manager'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the full name of the Vice President of Sales. Give me the URL of his/her photo.",
        "evidence": "\"Vice Present of Sales\" refers to Title = 'Vice President, Sales'; full name refers to FirstName, LastName; url of photo refers to PhotoPath",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE Title = 'Vice President, Sales'"
    },
    {
        "db_id": "retail_world",
        "question": "Write down the top ten companies with the most total sales by amount.",
        "evidence": "most total sales refers to Max(SaleAmount); companies refers to CompanyName",
        "SQL": "SELECT CompanyName FROM `Sales Totals by Amount` ORDER BY SaleAmount DESC LIMIT 10"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average sales for each categories?",
        "evidence": "average sales = AVG(ProductSales)",
        "SQL": "SELECT AVG(ProductSales) FROM `Sales by Category` GROUP BY CategoryName"
    },
    {
        "db_id": "retail_world",
        "question": "Compute the total order quantity for Uncle Bob's Organic Dried Pears so far.",
        "evidence": "\"Uncle Bob's Organic Dried Pears\" is the ProductName; total order quantity refers to Sum(Quantity)",
        "SQL": "SELECT SUM(T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName LIKE 'Uncle Bob%s Organic Dried Pears'"
    },
    {
        "db_id": "retail_world",
        "question": "Among the seafoods, how many of them have an order quantity of more than 50?",
        "evidence": "\"Seafood\" is the CategoryName; order quantity of more than 50 refers to Quantity > 50",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Seafood' AND T2.Quantity > 50"
    },
    {
        "db_id": "retail_world",
        "question": "List the products whose supplier is Pavlova, Ltd. Please include the product ID and re-order level.",
        "evidence": "\"Pavlova, Ltd\" is the CompanyName; products refers to ProductName",
        "SQL": "SELECT T1.ProductName, T1.ProductID, T1.ReorderLevel FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Pavlova, Ltd.'"
    },
    {
        "db_id": "retail_world",
        "question": "Who are the suppliers of the discontinued products?",
        "evidence": "discontinued product refers to Discontinued = 1; supplier refers to CompanyName",
        "SQL": "SELECT DISTINCT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "Among the employees, give me the full names of those who have less than 4 territories.",
        "evidence": "less than 4 territories refers to EmployeeID where Count(TerritoryID) < 4",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.EmployeeID < 4"
    },
    {
        "db_id": "retail_world",
        "question": "How many employees have territories in the Eastern region?",
        "evidence": "\"Eastern\" is the RegionDescription",
        "SQL": "SELECT COUNT(DISTINCT T1.FirstName) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T4.RegionDescription = 'Eastern'"
    },
    {
        "db_id": "retail_world",
        "question": "From 1/3/97 to 8/10/97, how many orders were shipped via Federal Shipping?",
        "evidence": "from 1/3/97 to 8/10/97 refers to 1997-03-01 < ShippedDate < 1997-10-08; 'Federal Shipping' is the CompanyName",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShippedDate BETWEEN '1997-03-01 00:00:00' AND '1997-10-08 23:59:59'"
    },
    {
        "db_id": "retail_world",
        "question": "Tally the customer ID of orders that were shipped to Brazil by Margaret Peacock from 3/31/97 to 12/10/97.",
        "evidence": "\"Brazil\" is the ShipCountry; from 3/31/97 to 12/10/97 refers to 1997-03-31 < ShippedDate < 1997-10-12",
        "SQL": "SELECT DISTINCT T2.CustomerID FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.LastName = 'Peacock' AND T1.FirstName = 'Margaret' AND T2.ShipCountry = 'Brazil' AND T2.ShippedDate BETWEEN '1997-03-31 00:00:00' AND '1997-12-10 23:59:59'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the re-order level of products that have an order quantity of 1?",
        "evidence": "order quantity of 1 refers to Quantity = 1",
        "SQL": "SELECT T1.ReorderLevel FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Quantity = 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the stock value of every condiments?",
        "evidence": "\"Condiments\" is the CategoryName; Stock value = MULTIPLY( UnitPrice, UnitInStock)",
        "SQL": "SELECT T1.UnitPrice * T1.UnitsInStock FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID"
    },
    {
        "db_id": "retail_world",
        "question": "How many territories are owned by Anne Dodsworth?",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.TerritoryID) FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Anne' AND T1.LastName = 'Dodsworth'"
    },
    {
        "db_id": "retail_world",
        "question": "Which of the American customers have experienced a delay in the shipment and how long was the longest?",
        "evidence": "\"American\" refers to Country = 'USA'; longest delay in shipment refers to Max(Subtract(RequiredDate, ShippedDate)); customer refers to CustomerID",
        "SQL": "SELECT T1.CompanyName, TIMESTAMPDIFF(DAY, T2.ShippedDate, T2.RequiredDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'USA' AND TIMESTAMPDIFF(DAY, T2.ShippedDate, T2.RequiredDate) < 0"
    },
    {
        "db_id": "retail_world",
        "question": "What is the contact name and phone number of the customer who has made the most total payment on the order to date?",
        "evidence": "most total payment = Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount)))",
        "SQL": "SELECT T1.ContactName, T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.OrderID, T1.ContactName, T1.Phone ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Who is the sales representative of the customer who has made the highest payment? Include the full name of employee and his/her supervisor.",
        "evidence": "highest payment refers to Max(Multiply(Quantity, UnitPrice, Subtract(1, Discount))); full name refers to FirstName, LastName; his/her supervisor refers to 'ReportsTo'",
        "SQL": "SELECT T4.LastName, T4.FirstName, T4.ReportsTo , T1.Quantity * T1.UnitPrice * (1 - T1.Discount) AS payment FROM `Order Details` AS T1 INNER JOIN Orders AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID INNER JOIN Employees AS T4 ON T2.EmployeeID = T4.EmployeeID ORDER BY payment DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many customers are there in Berlin, Germany?",
        "evidence": "\"Berlin\" is the City; 'Germany' is the Country",
        "SQL": "SELECT COUNT(City) FROM Customers WHERE Country = 'Germany' AND City = 'Berlin'"
    },
    {
        "db_id": "retail_world",
        "question": "How many products does the company Exotic Liquids supply?",
        "evidence": "\"Exotic Liquids\" is the CompanyName of supplier",
        "SQL": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question": "Which company has the lowest unit price? Please give the company name and the product name.",
        "evidence": "lowest unit price refers to Min(UnitPrice)",
        "SQL": "SELECT T2.CompanyName, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MIN(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average unit price of Tokyo Traders' products?",
        "evidence": "\"Tokyo Traders\" is the CompanyName; average unit price = AVG(UnitPrice)",
        "SQL": "SELECT SUM(T1.UnitPrice) / COUNT(T2.SupplierID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Tokyo Traders'"
    },
    {
        "db_id": "retail_world",
        "question": "How many territories are there in the Eastern region?",
        "evidence": "\"Eastern\" is the RegionDescription",
        "SQL": "SELECT COUNT(T1.RegionID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Eastern'"
    },
    {
        "db_id": "retail_world",
        "question": "Which region has the most territories?",
        "evidence": "region refers to RegionDescription; most territories refers to Max(Count(TerritoryID))",
        "SQL": "SELECT T2.RegionID FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID GROUP BY T2.RegionID ORDER BY COUNT(T1.TerritoryID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Which region does territory id 2116 belong to?",
        "evidence": "region refers to RegionDescription",
        "SQL": "SELECT T2.RegionDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T1.TerritoryID = 2116"
    },
    {
        "db_id": "retail_world",
        "question": "What percentage of orders were placed by customers in Madrid city in 1996?",
        "evidence": "\"Madrid\" is the City; in 1996 refers to YEAR (OrderDate) = 1996; percentage = Divide (Count (CustomerID where City = 'Madrid'), Count (CustomerID)) * 100",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.City = 'Madrid' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.City) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = 1996"
    },
    {
        "db_id": "retail_world",
        "question": "Please list the full names and titles of all employees.",
        "evidence": "full name refers to LastName, FirstName",
        "SQL": "SELECT FirstName, LastName, Title FROM Employees"
    },
    {
        "db_id": "retail_world",
        "question": "Who has the highest salary? Please give their first name.",
        "evidence": "highest salary refers to Max(Salary)",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question": "How many sales representatives whose salaries are higher than 2000?",
        "evidence": "\"Sales Representative\" is the Title; higher than 2000 refers to Salary > 2000",
        "SQL": "SELECT COUNT(Title) FROM Employees WHERE Salary > 2000 AND Title = 'Sales Representative'"
    },
    {
        "db_id": "retail_world",
        "question": "In 1996, how many orders were from customers in the UK?",
        "evidence": "in 1996 refers to YEAR (OrderDate) = 1996; 'UK' is the Country;",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' AND T1.Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question": "Which company had the most orders in 1998?",
        "evidence": "in 1998 refers to YEAR (OrderDate) = 1998; most orders = Max(Count(CustomerID)); company refers to CompanyName",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1998' GROUP BY T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Please calculate the number of orders from customers by country in 1996.",
        "evidence": "in 1996 refer to YEAR(OrderDate) = 1996; number of order = Count(OrderID)",
        "SQL": "SELECT COUNT(T2.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' GROUP BY T1.Country"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders were from Hanna Moos company in 1999?",
        "evidence": "\"Hanna Moos\" is the CompanyName; in 1999 refer to YEAR (OrderDate) = 1999",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1999' AND T1.CompanyName = 'Hanna Moos'"
    },
    {
        "db_id": "retail_world",
        "question": "How many days was the fastest shipping of Berglunds snabbkp's order?",
        "evidence": "Berglunds snabbkp is the CompanyName; fastest shipping = Min(Subtract(ShippedDate, OrderDate))",
        "SQL": "SELECT datediff(T2.ShippedDate, T2.OrderDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Berglunds snabbkp' ORDER BY datediff(T2.ShippedDate, T2.OrderDate) LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Which company placed the order with the id 10257?",
        "evidence": "\"10257\" is the OrderID; company refers to CompanyName",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10257"
    },
    {
        "db_id": "retail_world",
        "question": "In which year did Around the Horn place the most orders?",
        "evidence": "Around the Horn is the CompanyName; year with the most order refers to Year (OrderDate) where Max(Count(OrderID))",
        "SQL": "SELECT STRFTIME('%Y', T2.OrderDate) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'Around the Horn' GROUP BY STRFTIME('%Y', T2.OrderDate) ORDER BY COUNT(T2.OrderID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many employees report to Andrew Fuller?",
        "evidence": "\"Andrew Fuller\" refers to FirstName = 'Andrew' AND LastName = 'Fuller'; report to refers to ReportsTo ! = NULL",
        "SQL": "SELECT COUNT(EmployeeID) FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE LastName = 'Fuller' AND FirstName = 'Andrew' )"
    },
    {
        "db_id": "retail_world",
        "question": "Which country are the majority of the suppliers located?",
        "evidence": "majority of the suppliers located refers to MAX(COUNT(SupplierID))",
        "SQL": "SELECT Country FROM Suppliers GROUP BY Country ORDER BY COUNT(SupplierID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the full name of the employees who report to the Sales Manager?",
        "evidence": "full name refers to LastName, FirstName; the Sales Manager refers to Title = 'Sales Manager'; report to refers to ReportsTo is not NULL;",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager' )"
    },
    {
        "db_id": "retail_world",
        "question": "In August of 1996, how many orders were placed by the customer with the highest amount of orders?",
        "evidence": "August of 1996 refers to OrderDate = '1996-8'; highest amount of orders refers to MAX(COUNT(OrderID))",
        "SQL": "SELECT COUNT(OrderID) FROM Orders WHERE OrderDate LIKE '1996-08%' GROUP BY CustomerID ORDER BY COUNT(OrderID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How much is the salary of the first employee that was hired?",
        "evidence": "first employee that was hired refers to MIN(HireDate)",
        "SQL": "SELECT Salary FROM Employees WHERE HireDate = ( SELECT MIN(HireDate) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question": "How old was the oldest employee at the time he or she was hired?",
        "evidence": "oldest employee at the time he or she was hired refers to MAX(SUBTRACT(HireDate, Birthdate))",
        "SQL": "SELECT MAX(TIMESTAMPDIFF(YEAR, BirthDate, HireDate)) FROM Employees"
    },
    {
        "db_id": "retail_world",
        "question": "What is the total sales amount of all discontinued products?",
        "evidence": "discontinued products refers to Discontinued = 1; total sales amount refers to SUM(MULTIPLY(UnitPrice, Quantity))",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the category of the product that has the highest number of discontinued products?",
        "evidence": "discontinued products refers to Discontinued = 1; highest number of discontinued products refers to MAX(Discontinued = 1)",
        "SQL": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.Discontinued = 1 GROUP BY T2.CategoryName ORDER BY COUNT(T1.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many condiments were sold in 1997?",
        "evidence": "\"Condiments\" is the CategoryName; in 1997 refers to year(OrderDate) = 1997;",
        "SQL": "SELECT COUNT(T2.ProductID) FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE T1.CategoryName = 'Condiments' AND T1.CategoryID = 2 AND T4.OrderDate LIKE '1997%'"
    },
    {
        "db_id": "retail_world",
        "question": "Who is the customer who purchased the highest number of products in a single order?",
        "evidence": "highest number of products refers to MAX(COUNT(ProductID))",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T1.CompanyName ORDER BY COUNT(T3.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the monthly average number of products shipped via Federal Shipping for the year 1996?",
        "evidence": "monthly average number of products refers to DIVIDE(SUM(OrderID), 12); shipped via Federal Shipping refers to CompanyName = 'Federal Shipping'; for the year 1996 refers to year(ShippedDate) = 1996",
        "SQL": "SELECT CAST(SUM(T1.ShipVia) AS REAL) / 12 FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShippedDate LIKE '1996%'"
    },
    {
        "db_id": "retail_world",
        "question": "Which products are being supplied by \"G'day, Mate\"? List all of their names.",
        "evidence": "supplied by \"G'day, Mate\" refers to CompanyName = 'G''day, Mate';",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'G%day, Mate'"
    },
    {
        "db_id": "retail_world",
        "question": "How many territories are there in the region with the highest number of territories?",
        "evidence": "highest number of territories refers to max(TerritoryID)",
        "SQL": "SELECT COUNT(T2.RegionDescription), T1.TerritoryDescription, COUNT(*) AS num FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID GROUP BY T1.TerritoryDescription ORDER BY num DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the company name of the supplier who supplies the product with the highest unit price?",
        "evidence": "the highest unit price refers to MAX(UnitPrice);",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "Who are the top 8 suppliers supplying the products with the highest user satisfaction?",
        "evidence": "highest user satisfaction refers to max(ReorderLevel);",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID ORDER BY T1.ReorderLevel DESC LIMIT 8"
    },
    {
        "db_id": "retail_world",
        "question": "What is the company name of the customer who made the biggest amount of purchase in a single order before discount?",
        "evidence": "biggest amount of purchase in a single order refers to MAX(MULTIPLY(UnitPrice, Quantity)); before discount refers to Discount = 0",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T3.Discount = 0 GROUP BY T1.CompanyName ORDER BY SUM(T3.UnitPrice * T3.Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What was the total amount of sales handled by Nancy Davolio in December 1996, excluding discounts?",
        "evidence": "in December 1996 refers to year(OrderDate) = 1996 AND month(OrderDate) = 12; excluding discounts refers to Discount = 0; total amount of sales refers to MULTIPLY((UnitPrice, Quantity))",
        "SQL": "SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T2.OrderDate LIKE '1996-12%' AND T3.Discount = 0"
    },
    {
        "db_id": "retail_world",
        "question": "What is the total amount of sales made in the year 1997?",
        "evidence": "year 1997 refers to year(OrderDate) = 1997; total amount of sales refers to (UnitPrice * Quantity)",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.OrderDate LIKE '1997%'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average annual amount of shipped sales from 1997 to 1998?",
        "evidence": "from 1997 to 1998 refers to ShippedDate > '1996-1-1' and ShippedDate < '1998-12-31'; average annual amount refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) / 3 FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.ShippedDate BETWEEN '1996-01-01 00:00:00' AND '1998-12-31 23:59:59'"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders were shipped to Venezuela in 1996?",
        "evidence": "shipped to Venezuela refers to ShipCountry = 'Venezuela'; in 1996 refers to year(ShippedDate) = '1996';",
        "SQL": "SELECT COUNT(OrderID) FROM Orders WHERE ShipCountry = 'Venezuela' AND STRFTIME('%Y', ShippedDate) = '1996'"
    },
    {
        "db_id": "retail_world",
        "question": "What are the ID and description of the condiments category?",
        "evidence": "condiments category refers to CategoryName = 'Condiments'; the ID refers to CategoryID",
        "SQL": "SELECT CategoryID, Description FROM Categories WHERE CategoryName = 'Condiments'"
    },
    {
        "db_id": "retail_world",
        "question": "List the order IDs, product IDs and unit price of orders which total payment is greater than 15000.",
        "evidence": "total payment is greater than 15000 refers to MULTIPLY((Quantity * UnitPrice * (1 - Discount))) > 15000\n",
        "SQL": "SELECT ProductID, OrderID, UnitPrice FROM `Order Details` WHERE UnitPrice * Quantity * (1 - Discount) > 15000"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the territory IDs under employee ID of 7.",
        "evidence": "",
        "SQL": "SELECT TerritoryID FROM EmployeeTerritories WHERE EmployeeID = 7"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the supplier company name in Sydney and its homepage address if available.",
        "evidence": "in Sydney refers to City = 'Sydney';",
        "SQL": "SELECT CompanyName, HomePage FROM Suppliers WHERE City = 'Sydney'"
    },
    {
        "db_id": "retail_world",
        "question": "Write down the full name of Vie President of Sales and his age when he was hired.",
        "evidence": "Vice President of Sales refers to Title = 'Vice President, Sales';",
        "SQL": "SELECT FirstName, LastName , TIMESTAMPDIFF(YEAR, BirthDate, HireDate) AS AGE FROM Employees WHERE Title = 'Vice President, Sales'"
    },
    {
        "db_id": "retail_world",
        "question": "List the supplier company names located in Germany.",
        "evidence": "located in Germany refers to Country = 'Germany';",
        "SQL": "SELECT CompanyName FROM Suppliers WHERE Country = 'Germany'"
    },
    {
        "db_id": "retail_world",
        "question": "List down the customer company names, addresses, phones and faxes which are located in London.",
        "evidence": "in London refers to City = 'London'",
        "SQL": "SELECT CompanyName, Address, Phone, Fax FROM Customers WHERE City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question": "List the full name of employees and titles who have to report to Sales Manager.",
        "evidence": "Sales Manager refers to Title = 'Sales Manager'; full name refers to FirstName, LastName",
        "SQL": "SELECT FirstName, LastName, Title FROM Employees WHERE ReportsTo = ( SELECT EmployeeID FROM Employees WHERE Title = 'Sales Manager' )"
    },
    {
        "db_id": "retail_world",
        "question": "List all the customer company names and cities located in Canada.",
        "evidence": "located in Canada refers to Country = 'Canada'",
        "SQL": "SELECT CompanyName, City FROM Customers WHERE Country = 'Canada'"
    },
    {
        "db_id": "retail_world",
        "question": "Find the total production amount and product names which had \"10 - 500 g pkgs.\" as quantity per unit.",
        "evidence": "total production amount refers to ADD(UnitsInstock, UnitsOnOrder)",
        "SQL": "SELECT UnitsInStock + UnitsOnOrder, ProductName FROM Products WHERE QuantityPerUnit = '10 - 500 g pkgs.'"
    },
    {
        "db_id": "retail_world",
        "question": "List all the product names and categories of the highest reorder level.",
        "evidence": "Highest reorder level refers to Max(ReorderLevel)",
        "SQL": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID ORDER BY T2.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Describe the supplier companies, cities and products which total production amount is more than 120.",
        "evidence": "total production amount is more than 120 refers to ADD(UnitsInstock, UnitsOnOrder) > 120",
        "SQL": "SELECT T2.CompanyName, T2.City, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitsInStock + UnitsOnOrder > 120"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the contact person name, title and supplied products by \"Escargots Nouveaux\" company.",
        "evidence": "\"Escargots Nouveaux\" company refers to CompanyName = 'Escargots Nouveaux';",
        "SQL": "SELECT T2.ContactName, T2.ContactTitle, T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Escargots Nouveaux'"
    },
    {
        "db_id": "retail_world",
        "question": "What were the products supplied by the company in Spain?",
        "evidence": "company in Spain refers to Country = 'Spain'; product supplied refers to ProductName",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Spain'"
    },
    {
        "db_id": "retail_world",
        "question": "What products were ordered by the customer ID \"WILMK\" which were required on 3/26/1998?",
        "evidence": "required on 3/26/1998 refers to RequiredDate = '1998-03-26 00:00:00'; products ordered refers to ProductName",
        "SQL": "SELECT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.RequiredDate LIKE '1998-03-26%' AND T1.CustomerID = 'WILMK'"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the list of product IDs and names under the meat/poultry category.",
        "evidence": "meat/poultry category refers to CategoryName = 'Meat/Poultry';",
        "SQL": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders were made by the customers in Ireland.",
        "evidence": "in Ireland refers to Country = 'Ireland';",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Country = 'Ireland'"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the products list which were ordered in 1996 by the company in Norway.",
        "evidence": "ordered in 1996 refers to year(OrderDate) = 1996; in Norway refers to Country = 'Norway'",
        "SQL": "SELECT T4.ProductName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Country = 'Norway' AND STRFTIME('%Y', T2.OrderDate) = '1996'"
    },
    {
        "db_id": "retail_world",
        "question": "Among orders shipping to Brazil, mention the supplier company of the order which was done by employee Anne Dodsworth in December, 1996 .",
        "evidence": "shipping to Brazil refers to ShipCountry = 'Brazil'; in December, 1996\u00a0 refers to year(OrderDate) = 1996 and month(OrderDate) = 12;",
        "SQL": "SELECT T5.CompanyName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID INNER JOIN Suppliers AS T5 ON T4.SupplierID = T5.SupplierID WHERE T1.FirstName = 'Anne' AND T1.LastName = 'Dodsworth' AND T2.ShipCountry = 'Brazil' AND T2.OrderDate LIKE '1996-12%'"
    },
    {
        "db_id": "retail_world",
        "question": "Mention the oldest empoyee's full name, title, salary and number of orders which were shipped to USA by him.",
        "evidence": "full name refers to FirstName, LastName; shipped to USA refers to ShipCountry = 'USA'",
        "SQL": "SELECT T1.FirstName, T1.LastName, T1.Title, T1.Salary , COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE ShipCountry = 'USA' GROUP BY T1.FirstName, T1.LastName, T1.Title, T1.Salary, T1.BirthDate ORDER BY T1.BirthDate LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "List down the territory IDs and descriptions existed in Southern region.",
        "evidence": "in Southern region refers to RegionDescription = 'Southern';",
        "SQL": "SELECT T1.TerritoryID, T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Southern'"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the average payment per product under confections category.",
        "evidence": "under confections category refers to CategoryName = 'Confections';",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Categories AS T3 ON T1.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Confections'"
    },
    {
        "db_id": "retail_world",
        "question": "Find the total payment of the orders by customers from San Francisco.",
        "evidence": "from San Francisco refers to City = 'San Francisco'; total payment refers to sum(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "SQL": "SELECT SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) AS TOTALPAYMENT FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.City = 'San Francisco'"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the total production for each product which were supplied from Japan",
        "evidence": "from Japan refers to Country = 'Japan'; total production refers to ADD(UnitsInstock, UnitsOnOrder)",
        "SQL": "SELECT SUM(T1.UnitsInStock + T1.UnitsOnOrder) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'"
    },
    {
        "db_id": "retail_world",
        "question": "Among the supplied products from Australia, describe the discontinued products and the category.",
        "evidence": "from Australia refers to Country = 'Australia'; discontinued products refers to Discontinued = 1;",
        "SQL": "SELECT T2.ProductName, T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T1.Country = 'Australia' AND T2.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "Mention the supplier country of Ipoh Coffee and the order ID which had maximum in total payment.",
        "evidence": "Ipoh Coffee refers to ProductName = 'Ipoh Coffee'; maximum in total payment refers to MAX(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "SQL": "SELECT T3.Country, T1.OrderID FROM `Order Details` AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Suppliers AS T3 ON T2.SupplierID = T3.SupplierID WHERE T2.ProductName = 'Ipoh Coffee' ORDER BY T1.UnitPrice * T1.Quantity * (1 - T1.Discount) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the list of products ordered by ID 10979 and calculate its total payment.",
        "evidence": "ordered by ID 10979 refers to OrderID = '10979'; total payment refers to SUM(MULTIPLY(UnitPrice, Quantity, SUBTRACT(1, Discount)))",
        "SQL": "SELECT T1.ProductName , SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderID = 10979 GROUP BY T1.ProductName"
    },
    {
        "db_id": "retail_world",
        "question": "Among the products under grains/cereals category, provide the contact person and title of the supplier with one digit ID.",
        "evidence": "grains/cereals category refers to CategoryName = 'Grains/Cereals'; supplier with one digit ID refers to SupplierID between 1 and 10;",
        "SQL": "SELECT DISTINCT T1.ContactName, T1.ContactTitle FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.CategoryName = 'Grains/Cereals' AND T1.SupplierID BETWEEN 1 AND 10 LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Provide Speedy Express's phone number and number of shipped orders on 30th January, 1998.",
        "evidence": "Speedy Express's refers to CompanyName = 'Speedy Express'; orders on 30th January, 1998 refers to ShippedDate = '1998-01-30 00:00:00'",
        "SQL": "SELECT T2.Phone, COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express' AND T1.ShippedDate LIKE '1998-01-30%' GROUP BY T2.Phone"
    },
    {
        "db_id": "retail_world",
        "question": "Describe the ordered products which were the most overdue from required date.",
        "evidence": "the most overdue from required date refers to MIN(SUBTRACT(ShippedDate, RequiredDate) < 0)",
        "SQL": "SELECT DISTINCT T3.ProductName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE DATEDIFF(T1.ShippedDate, T1.RequiredDate) < 0"
    },
    {
        "db_id": "retail_world",
        "question": "Under the in-charge of inside sales coordinator, provide the product lists which were shipped to Mexico in 1996.",
        "evidence": "shipped to Mexico refers to ShipCountry = 'Mexico'; in 1996 refers to year(ShippedDate) = 1996; charge of inside sales coordinator refers to Title = 'Inside Sales Coordinator'",
        "SQL": "SELECT T4.ProductName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Title = 'Inside Sales Coordinator' AND T2.ShippedDate LIKE '1996%' AND T2.ShipCountry = 'Mexico'"
    },
    {
        "db_id": "retail_world",
        "question": "Identify the name of the most popular dairy product in terms of reorder quantity.",
        "evidence": "'dairy product' refers to CategoryName; most popular reorder quantity refers to MAX(ReorderLevel)",
        "SQL": "SELECT T2.ProductName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.CategoryName = 'Dairy Products' AND T2.ReorderLevel = ( SELECT MAX(ReorderLevel) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the production volume of the dairy product 'Mascarpone Fabioli'.",
        "evidence": "'Mascarpone Fabioli' is a ProductName; calculation = SUM(UnitsInStock, UnitsOnOrder)",
        "SQL": "SELECT SUM(UnitsInStock + UnitsOnOrder) FROM Products WHERE ProductName = 'Mascarpone Fabioli'"
    },
    {
        "db_id": "retail_world",
        "question": "Identify the name and product category for the most expensive and the least expensive products.",
        "evidence": "name of product refers to ProductName; category of product refers to CategoryName; the most expensive products refers to MAX(UnitPrice); the least expensive products refers to MIN(UnitPrice);",
        "SQL": "SELECT T2.ProductName, T1.CategoryName FROM Categories AS T1 INNER JOIN Products AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.UnitPrice IN (( SELECT MIN(UnitPrice) FROM Products ), ( SELECT MAX(UnitPrice) FROM Products ))"
    },
    {
        "db_id": "retail_world",
        "question": "Identify the customer, which placed the largest order in terms of value.",
        "evidence": "value refers to SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)); the largest order in value refers to MAX(value)",
        "SQL": "SELECT T1.CompanyName FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T2.CustomerID ORDER BY SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Identify the number of employees in Northern sales region.",
        "evidence": "Northern sales region refers to RegionDescription = 'Northern'",
        "SQL": "SELECT COUNT(T2.EmployeeID) FROM Territories AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.TerritoryID = T2.TerritoryID INNER JOIN Region AS T3 ON T1.RegionID = T3.RegionID WHERE T3.RegionDescription = 'Northern'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the average value of the sales order?",
        "evidence": "calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))",
        "SQL": "SELECT SUM(UnitPrice * Quantity * (1 - Discount)) / COUNT(OrderID) FROM `Order Details`"
    },
    {
        "db_id": "retail_world",
        "question": "Find the percentage of discontinued products in Northwind's portfolio of products.",
        "evidence": "discontinued products refers to Discontinued = 1; calculation = DIVIDE(SUM(Discontinued = 1), COUNT(ProductID)) * 100",
        "SQL": "SELECT CAST(COUNT(CASE WHEN Discontinued = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(ProductID) FROM Products"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the full name of the employee who processed the sales order with ID 10274.",
        "evidence": "full name refers to FirstName, LastName; sales order with ID 10274 refers to OrderID = 10274",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10274"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the total number of orders placed by the company 'GROSELLA-Restaurante'.",
        "evidence": "'GROSELLA-Restaurante' refers to CompanyName;",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CompanyName = 'GROSELLA-Restaurante'"
    },
    {
        "db_id": "retail_world",
        "question": "Name products and their quantity ordered by the company 'GROSELLA-Restaurante' in the sales order that was processed by Nancy Davolio.",
        "evidence": "name products refers to ProductName; 'GROSELLA-Restaurante' refers to CompanyName; 'Nancy Davolio' is the full name of an employee; full name refers to FirstName, LastName;",
        "SQL": "SELECT T4.ProductName, T3.Quantity FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID INNER JOIN Products AS T4 ON T3.ProductID = T4.ProductID INNER JOIN Customers AS T5 ON T2.CustomerID = T5.CustomerID WHERE T1.FirstName = 'Nancy' AND T1.LastName = 'Davolio' AND T5.CompanyName = 'GROSELLA-Restaurante'"
    },
    {
        "db_id": "retail_world",
        "question": "Identify the total number of orders placed by the customer 'Laughing Bacchus Wine Cellars' and it's average value.",
        "evidence": "'Laughing Bacchus Wine Cellars' refers to CompanyName; calculation = DIVIDE(SUM(UnitPrice * Quantity * SUBTRACT(1, Discount)), COUNT(OrderID))",
        "SQL": "SELECT COUNT(T2.OrderID) , SUM(T3.UnitPrice * T3.Quantity * (1 - T3.Discount)) / COUNT(T2.OrderID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.CompanyName = 'Laughing Bacchus Wine Cellars'"
    },
    {
        "db_id": "retail_world",
        "question": "How many boxes of 'Pavlova' did Northwind sell?",
        "evidence": "'Pavlova' is a ProductName",
        "SQL": "SELECT COUNT(T2.Quantity) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Pavlova'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the salary range for sales representative in Northwind?",
        "evidence": "salary range is BETWEEN max(Salary) AND min(Salary); sales representative is a title",
        "SQL": "SELECT ( SELECT MIN(Salary) FROM Employees WHERE Title = 'Sales Representative' ) AS MIN , ( SELECT MAX(Salary) FROM Employees WHERE Title = 'Sales Representative' ) AS MAX"
    },
    {
        "db_id": "retail_world",
        "question": "How many suppliers does Northwind have in USA?",
        "evidence": "'USA' is a country; supplier refers to CompanyName",
        "SQL": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'USA'"
    },
    {
        "db_id": "retail_world",
        "question": "What products are no longer sold by Northwind?",
        "evidence": "no longer sold refers to Discontinued = 1; products refers to ProductName",
        "SQL": "SELECT ProductName FROM Products WHERE Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "Who is the Sales Agent for the company 'Eastern Connection'?",
        "evidence": "'Eastern Connection' is a CompanyName; 'Sales Agent' is a ContactTitle",
        "SQL": "SELECT ContactName FROM Customers WHERE CompanyName = 'Eastern Connection' AND ContactTitle = 'Sales Agent'"
    },
    {
        "db_id": "retail_world",
        "question": "How many companies do ship Northwind's orders?",
        "evidence": "companies refers to ShipperID",
        "SQL": "SELECT COUNT(ShipperID) FROM Shippers"
    },
    {
        "db_id": "retail_world",
        "question": "Identify the total number of orders processed by Northwind employee named Andrew Fuller. What percent of those orders was shipped to Austria?",
        "evidence": "'Andrew Fuller' is the full name of an employee; full name refers to FistName, LastName; Austria refers to ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Austria'), COUNT(OrderID)) * 100",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.ShipCountry = 'Austria' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Andrew' AND T1.LastName = 'Fuller'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate category name of soft drinks, coffees, teas, beers, and ales in description list.",
        "evidence": "Soft drinks, coffees, teas, beers, and ales' is Description of CategoryName",
        "SQL": "SELECT CategoryName FROM Categories WHERE Description = 'Soft drinks, coffees, teas, beers, and ales'"
    },
    {
        "db_id": "retail_world",
        "question": "List the phone number of company named Around the Horn.",
        "evidence": "phone number refers to Phone; 'Around the Horn' is a CompanyName",
        "SQL": "SELECT Phone FROM Customers WHERE CompanyName = 'Around the Horn'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate the fax of the company Blondesddsl pre et fils in Strasbourg city.",
        "evidence": "'Blondesddsl pre et fils' is a CompanyName",
        "SQL": "SELECT Fax FROM Customers WHERE CompanyName = 'Blondesddsl pre et fils' AND City = 'Strasbourg'"
    },
    {
        "db_id": "retail_world",
        "question": "How many companies are there in the city of London?",
        "evidence": "companies refers to CompanyName;",
        "SQL": "SELECT COUNT(CompanyName) FROM Customers WHERE City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate the address of the company Eastern Connection whose contact name is Ann Devon.",
        "evidence": "'Eastern Connection' is a CompanyName; 'Ann Devon' is the full name of an employee; full name refers to FirstName, LastName",
        "SQL": "SELECT Address FROM Customers WHERE CompanyName = 'Eastern Connection' AND ContactName = 'Ann Devon'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate which company is located in France?",
        "evidence": "company refers to CompanyName; France is a country",
        "SQL": "SELECT CompanyName FROM Customers WHERE Country = 'France'"
    },
    {
        "db_id": "retail_world",
        "question": "How many product names does the supplier Exotic Liquids have?",
        "evidence": "'Exotic Liquids' is a CompanyName",
        "SQL": "SELECT COUNT(T1.ProductName) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the name of the company that has the product with the highest unit price?",
        "evidence": "name of the company refers to CompanyName; the highest unit price refers to MAX(UnitPrice)",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.UnitPrice = ( SELECT MAX(UnitPrice) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "Which company name in London city has the most stocked products?",
        "evidence": "the most stocked products refers to MAX(UnitsInStock)",
        "SQL": "SELECT T2.CompanyName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.City = 'London' ORDER BY T1.UnitsInStock DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Which product of Exotic Liquids company that have the highest reorder levels?",
        "evidence": "'Exotic Liquids' is a CompanyName; the highest reorder levels refers to MAX(ReorderLevel)",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Exotic Liquids' ORDER BY T1.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Provide the category name of the Chef Anton's Gumbo Mix product that New Orleans Cajun Delights company has.",
        "evidence": "'Chef Anton's Gumbo Mix' is a ProductName; 'New Orleans Cajun Delights' is a CompanyName;",
        "SQL": "SELECT T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T1.CompanyName = 'New Orleans Cajun Delights' AND T2.ProductName LIKE 'Chef Anton%s Gumbo Mix'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate the name of the country where Leka Trading supplies Ipoh Coffee product.",
        "evidence": "'Leka Trading' is a CompanyName; 'Ipoh Coffee' is a ProductName",
        "SQL": "SELECT T2.Country FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName = 'Ipoh Coffee' AND T2.CompanyName = 'Leka Trading'"
    },
    {
        "db_id": "retail_world",
        "question": "Indicate the category name of the product name with the highest units on order.",
        "evidence": "",
        "SQL": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.UnitsOnOrder = ( SELECT MAX(T1.UnitsOnOrder) FROM Products )"
    },
    {
        "db_id": "retail_world",
        "question": "What is the difference in number of unit price from Chef Anton's Cajun Seasoning product and Chef Anton's Gumbo Mix product of New Orleans Cajun Delights company.",
        "evidence": "Chef Anton's Cajun Seasoning' AND 'Chef Anton''s Gumbo Mix' are ProductName; 'New Orleans Cajun Delights' is a CompanyName; calculation = SUBTRACT(UnitPrice where ProductName = 'Chef Anton's Cajun Seasoning', UnitPrice where ProductName = 'Chef Anton''s Gumbo Mix')",
        "SQL": "SELECT ( SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights' AND T1.ProductName LIKE 'Chef Anton%s Cajun Seasoning' ) - ( SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'New Orleans Cajun Delights' AND T1.ProductName LIKE 'Chef Anton%s Gumbo Mix' ) AS calu"
    },
    {
        "db_id": "retail_world",
        "question": "Which of Cooperativa de Quesos 'Las Cabras' products have a unit price greater than 20?",
        "evidence": "Cooperativa de Quesos 'Las Cabras'' is a CompanyName; unit price greater than 20 refers to UnitPrice > 20",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName LIKE 'Cooperativa de Quesos%' AND T1.UnitPrice > 20"
    },
    {
        "db_id": "retail_world",
        "question": "Please indicate the product name of Tokyo Traders company with order quantity greater than 40.",
        "evidence": "'Tokyo Traders' is a CompanyName; order quantity greater than 40 refers to Quantity > 40",
        "SQL": "SELECT DISTINCT T2.ProductName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID WHERE T1.CompanyName = 'Tokyo Traders' AND T3.Quantity > 40"
    },
    {
        "db_id": "retail_world",
        "question": "List all category name of Exotic Liquids 's product with units in stock over 100.",
        "evidence": "'Exotic Liquids' is a CompanyName; units in stock over 100 refers to UnitsInStock > 100",
        "SQL": "SELECT T3.CategoryName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T2.UnitsInStock > 100 AND T1.CompanyName = 'Exotic Liquids'"
    },
    {
        "db_id": "retail_world",
        "question": "How many product names have order quantity less than 50? Calculate the percentage of orders less than 50 out of total order quantity.",
        "evidence": "order quantity less than 50 refers to Quantity < 50; Calculation = DIVIDE(SUM(Quantity < 50), SUM(ProductID)) * 100",
        "SQL": "SELECT SUM(CASE WHEN T2.Quantity < 50 THEN 1 ELSE 0 END) , CAST(SUM(IF(T2.Quantity < 50, 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "db_id": "retail_world",
        "question": "Please indicate total order quantity of product Geitost and calculate the percentage of such product among all the order quantity.",
        "evidence": "'Geitost' is a ProductName; calculation = DIVIDE(ProductName = 'Geitost', COUNT(ProductID)) * 100",
        "SQL": "SELECT SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS sum , CAST(SUM(IF(T1.ProductName = 'Geitost', 1, 0)) AS REAL) / COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID"
    },
    {
        "db_id": "retail_world",
        "question": "What is the position of Robert King?",
        "evidence": "'Robert King' is the full name of an employee; full name refers to FirstName, LastName; position refers to Title",
        "SQL": "SELECT Title FROM Employees WHERE FirstName = 'Robert' AND LastName = 'King'"
    },
    {
        "db_id": "retail_world",
        "question": "Write the shipping company name with the telephone number of (503) 555-9931.",
        "evidence": "telephone number of (503) 555-9931 refers to Phone = '(503) 555-9931'",
        "SQL": "SELECT CompanyName FROM Shippers WHERE Phone = '(503) 555-9931'"
    },
    {
        "db_id": "retail_world",
        "question": "Write the address and phone number of Margaret Peacock.",
        "evidence": "Margaret Peacock is the full name of an employee; full name refers to FirstName, LastName; phone number refers to HomePhone",
        "SQL": "SELECT Address, HomePhone FROM Employees WHERE FirstName = 'Margaret' AND LastName = 'Peacock'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the full address of Rattlesnake Canyon Grocery?",
        "evidence": "full address refers to ShipAddress, ShipCity, ShipRegion,ShipPostalCode, ShipCountry; 'Rattlesnake Canyon Grocery' is a ShipName;",
        "SQL": "SELECT DISTINCT ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry FROM Orders WHERE ShipName = 'Rattlesnake Canyon Grocery'"
    },
    {
        "db_id": "retail_world",
        "question": "List all product names under Confections.",
        "evidence": "'Confections' is a CompanyName;",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T2.CategoryName = 'Confections'"
    },
    {
        "db_id": "retail_world",
        "question": "Sir Rodney's Marmalade is supplied by which company and who is the contact for this company?",
        "evidence": "'Sir Rodney's Marmalade' is a ProductName; company refers to CompanyName; contact for a company refers to ContactName",
        "SQL": "SELECT T2.CompanyName, T2.ContactName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T1.ProductName LIKE 'Sir Rodney%s Marmalade'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the full name of the employee who is in charge of the territory of Denver?",
        "evidence": "full name refers to FirstName, LastName; Denver is a TerritoryDescription",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Denver'"
    },
    {
        "db_id": "retail_world",
        "question": "List all the territories where Laura Callahan is in charge.",
        "evidence": "territories refers to TerritoryDescription; Laura Callahan is the full name of an employee; full name refers to FirstName, LastName",
        "SQL": "SELECT T3.TerritoryDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.FirstName = 'Laura' AND T1.LastName = 'Callahan'"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders were shipped via Federal Shipping?",
        "evidence": "'Federal Shipping' is a CompanyName; orders refers to OrderID",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping' AND T1.ShipVia = 3"
    },
    {
        "db_id": "retail_world",
        "question": "Name the products where the suppliers come from Finland.",
        "evidence": "'Finland' is a Country; product refers to ProductName; suppliers refers to SupplierID",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Finland'"
    },
    {
        "db_id": "retail_world",
        "question": "The product 'Mozzarella di Giovanni' belongs in which category? Include the category's description as well.",
        "evidence": "Mozzarella di Giovanni' is a ProductName; category refers to CategoryName;",
        "SQL": "SELECT T2.CategoryName, T2.Description FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.ProductName = 'Mozzarella di Giovanni'"
    },
    {
        "db_id": "retail_world",
        "question": "Name the suppliers that supply products under the category 'cheeses.'",
        "evidence": "suppliers refers to CompanyName; 'cheeses' is a Description",
        "SQL": "SELECT DISTINCT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN Categories AS T3 ON T2.CategoryID = T3.CategoryID WHERE T3.Description = 'Cheeses'"
    },
    {
        "db_id": "retail_world",
        "question": "Name all products supplied by Zaanse Snoepfabriek.",
        "evidence": "products refers to ProductName; 'Zaanse Snoepfabriek' is a CompanyName",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Zaanse Snoepfabriek'"
    },
    {
        "db_id": "retail_world",
        "question": "Which products by Plutzer Lebensmittelgromrkte AG were discontinued and what are their price?",
        "evidence": "products refers to ProductName; 'Plutzer Lebensmittelgromrkte AG' is a CompanyName; price refers to UnitPrice; \ndiscontinued products refers to discontinued = 1",
        "SQL": "SELECT T1.UnitPrice FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Plutzer Lebensmittelgromrkte AG' AND T1.Discontinued = 1"
    },
    {
        "db_id": "retail_world",
        "question": "List the cities where the product 'Mishi Kobe Niku' were shipped to.",
        "evidence": "cities refers to ShipCity; 'Mishi Kobe Niku' is a ProductName",
        "SQL": "SELECT T1.ShipCity FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID WHERE T3.ProductName = 'Mishi Kobe Niku'"
    },
    {
        "db_id": "retail_world",
        "question": "What percentage does the shipment of products by Speedy Express to Sweden make up to the shipping company's total?",
        "evidence": "Speedy Express is a company; Sweden is a ShipCountry; calculation = DIVIDE(SUM(ShipCountry = 'Sweden'), SEM(ShipCountry)) * 100",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.ShipCountry = 'Sweden' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Speedy Express'"
    },
    {
        "db_id": "retail_world",
        "question": "How many territory fall into region 1?",
        "evidence": "region 1 refers to RegionID = 1\n\n",
        "SQL": "SELECT COUNT(TerritoryID) FROM Territories WHERE RegionID = 1"
    },
    {
        "db_id": "retail_world",
        "question": "What are the the total number of territory in each region?",
        "evidence": "",
        "SQL": "SELECT COUNT(TerritoryDescription) FROM Territories WHERE RegionID IN (1, 2, 3, 4) GROUP BY RegionID"
    },
    {
        "db_id": "retail_world",
        "question": "How many suppliers are from UK?",
        "evidence": "from UK refers to Country = 'UK'",
        "SQL": "SELECT COUNT(SupplierID) FROM Suppliers WHERE Country = 'UK'"
    },
    {
        "db_id": "retail_world",
        "question": "Please give the contact name for Tokyo Traders.",
        "evidence": "Tokyo Traders refers to CompanyName = 'Tokyo Traders'",
        "SQL": "SELECT ContactName FROM Suppliers WHERE CompanyName = 'Tokyo Traders'"
    },
    {
        "db_id": "retail_world",
        "question": "How many employees from USA with Sales Representative title?",
        "evidence": "from USA refers to Country = 'USA'",
        "SQL": "SELECT COUNT(Country) FROM Employees WHERE Country = 'USA' AND Title = 'Sales Representative'"
    },
    {
        "db_id": "retail_world",
        "question": "What are the highest salary earn by the the employee and what is his/her position in the company?",
        "evidence": "highest salary refers to max(salary); position refers to Title",
        "SQL": "SELECT Salary, Title FROM Employees WHERE Salary = ( SELECT MAX(Salary) FROM Employees )"
    },
    {
        "db_id": "retail_world",
        "question": "How many products supplied by Plutzer Lebensmittelgromrkte AG that is currently out of stock and on order?",
        "evidence": "Plutzer Lebensmittelgromrkte AG refers to CompanyName; is currently out of stock and on order refers to UnitsInStock = 0 and UnitsOnOrder > 0",
        "SQL": "SELECT COUNT(T1.ProductID) FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.CompanyName = 'Plutzer Lebensmittelgromrkte AG' AND T1.UnitsInStock = 0 AND T1.UnitsOnOrder = 0"
    },
    {
        "db_id": "retail_world",
        "question": "What product have the highest unit price and how many quantity have been being sold?",
        "evidence": "product refers to ProductID; highest unit price refers to Max(UnitPrice)",
        "SQL": "SELECT T1.ProductName, T2.Quantity FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.UnitPrice DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Which employee has created the least order and please indicates the employee's title?",
        "evidence": "least order refers to Min(OrderID)",
        "SQL": "SELECT T1.Title FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID GROUP BY T1.Title ORDER BY COUNT(T2.OrderID) LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the most common product ordered by a customer from Germany?",
        "evidence": "most common product refers to max(count(ProductID)); customer from Germany\u00a0refers to Country = 'Germany'",
        "SQL": "SELECT T2.ProductID FROM Customers AS T1 INNER JOIN `Order Details` AS T2 WHERE T1.Country = 'Germany' GROUP BY T2.ProductID ORDER BY COUNT(T2.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What are the total products value shipped to Brazil by Speedy Express Company?",
        "evidence": "shipped to Brazil refers to ShipCountry = 'Brazil'; by Speedy Express Company refers to CompanyName = 'Speedy Express'; total products value refers to sum(MULTIPLY(UnitPrice, Quantity))",
        "SQL": "SELECT SUM(T2.Quantity * T2.UnitPrice) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Shippers AS T3 ON T1.ShipVia = T3.ShipperID WHERE T3.CompanyName = 'Speedy Express' AND T1.ShipCountry = 'Brazil'"
    },
    {
        "db_id": "retail_world",
        "question": "How many subordinates does employee ID 2 have and what is the biggest order in terms of value that his/her subordinates have created?",
        "evidence": "subordinates of employee ID 2 refers to EmployeeID where ReportsTo = 2;\u00a0 biggest order in terms of value refers to max(MULTIPLY(Quantity, UnitPrice))",
        "SQL": "SELECT COUNT(T1.EmployeeID), SUM(T3.Quantity * T3.UnitPrice) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.ReportsTo = 2 ORDER BY SUM(T3.UnitPrice * T3.Quantity) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many sales values have been created by sales representative and which sales representative have the highest sales?",
        "evidence": "sales representative refers to Title = 'Sales Representative'; sales values refers to MULTIPLY(Quantity, UnitPrice); the highest sales refers to max(MULTIPLY(Quantity, UnitPrice))",
        "SQL": "SELECT SUM(T3.UnitPrice * T3.Quantity) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID WHERE T1.Title = 'Sales Representative' ORDER BY SUM(T3.UnitPrice * T3.Quantity)"
    },
    {
        "db_id": "retail_world",
        "question": "How many employees is a UK citizen and are they all covering the same region?",
        "evidence": "is a UK citizen refers to Country = 'UK'",
        "SQL": "SELECT COUNT(T1.EmployeeID), T3.RegionID FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T1.Country = 'UK' GROUP BY T3.RegionID"
    },
    {
        "db_id": "retail_world",
        "question": "Which customer have the biggest purchase in one order and where does this order being ship to?",
        "evidence": "biggest purchase refers to max(ProductID.Order_Details); ship to refers to ShipCountry",
        "SQL": "SELECT T1.CompanyName, T2.ShipCountry FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN `Order Details` AS T3 ON T2.OrderID = T3.OrderID GROUP BY T1.CompanyName, T2.ShipCountry ORDER BY COUNT(T3.ProductID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Which customer is a regular customer in this shop and what are the products category that he mostly buy?",
        "evidence": "regular customer refers to max(count(CustomerID)); products category refers to CategoryName; mostly buy refers to max(count(CategoryID))",
        "SQL": "SELECT T1.CustomerID, T4.CategoryName FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID INNER JOIN Products AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Categories AS T4 ON T3.CategoryID = T4.CategoryID ORDER BY T1.CustomerID DESC, T4.CategoryName DESC"
    },
    {
        "db_id": "retail_world",
        "question": "What are the most popular confections product and calculate the total sales generated by this product?",
        "evidence": "most popular confections product refers to ProductID = max(count(MULTIPLY(Quantity, UnitPrice))) from CategoryName = 'Confections' ;\u00a0 total sales refers to sum(MULTIPLY(Quantity, UnitPrice))",
        "SQL": "SELECT COUNT(T1.UnitPrice * T3.Quantity) FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID INNER JOIN `Order Details` AS T3 ON T1.ProductID = T3.ProductID WHERE T2.CategoryName = 'Confections' GROUP BY T3.Quantity ORDER BY T3.Quantity DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "What is the name of product with the ID of 77?",
        "evidence": "name of product refers to ProductName; ID refers to ProductID",
        "SQL": "SELECT ProductName FROM Products WHERE ProductID = 77"
    },
    {
        "db_id": "retail_world",
        "question": "State the company name of all suppliers in USA.",
        "evidence": "in USA refers to Country = 'USA'",
        "SQL": "SELECT CompanyName FROM Suppliers WHERE Country = 'USA'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the position title for Laura Callahan?",
        "evidence": "",
        "SQL": "SELECT Title FROM Employees WHERE FirstName = 'Laura' AND LastName = 'Callahan'"
    },
    {
        "db_id": "retail_world",
        "question": "State the name of employee that manages the order from Victuailles en stock?",
        "evidence": "name of employee refers to FirstName; from Victuailles en stock refers to CompanyName = 'Victuailles en stock'",
        "SQL": "SELECT DISTINCT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.CompanyName = 'Victuailles en stock'"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders were shipped by Federal Shipping?",
        "evidence": "Federal Shipping refers to CompanyName = 'Federal Shipping'",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'Federal Shipping'"
    },
    {
        "db_id": "retail_world",
        "question": "Who was taking charge of orders from Morristown?",
        "evidence": "Morristown refers to TerritoryDescription = 'Morristown'",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID WHERE T3.TerritoryDescription = 'Morristown'"
    },
    {
        "db_id": "retail_world",
        "question": "State the name of all territories in Northern region.",
        "evidence": "name of all territories refers to TerritoryDescription; Northern region refers to RegionDescription = 'Northern'",
        "SQL": "SELECT DISTINCT T1.TerritoryDescription FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern'"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders were handled by Michael Suyama. State the order ID.",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the ratio number of territories in Northern region and number territories in Western region?",
        "evidence": "Northern region refers to RegionID = 3; Western region refers to RegionID = 2 ; ratio = divide((TerritoryDescription where RegionID = 3), (TerritoryDescription where RegionID = 2))",
        "SQL": "SELECT CAST(( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Northern' ) AS REAL) * 100 / ( SELECT COUNT(T1.TerritoryID) FROM Territories AS T1 INNER JOIN Region AS T2 ON T1.RegionID = T2.RegionID WHERE T2.RegionDescription = 'Westerns' ) AS Calu"
    },
    {
        "db_id": "retail_world",
        "question": "Provide employees' ID who are in-charge of territory ID from 1000 to 2000.",
        "evidence": "territory ID from 1000 to 2000 refers to TerritoryID BETWEEN 1000 and 2000",
        "SQL": "SELECT EmployeeID FROM EmployeeTerritories WHERE TerritoryID BETWEEN 1000 AND 2000"
    },
    {
        "db_id": "retail_world",
        "question": "List down the territory IDs, descriptions and region description which are under the in-charge of Nancy Davolio,",
        "evidence": "descriptions refers to TerritoryDescription; region refers to RegionDescription",
        "SQL": "SELECT T3.RegionID, T3.TerritoryDescription, T4.RegionDescription FROM Employees AS T1 INNER JOIN EmployeeTerritories AS T2 ON T1.EmployeeID = T2.EmployeeID INNER JOIN Territories AS T3 ON T2.TerritoryID = T3.TerritoryID INNER JOIN Region AS T4 ON T3.RegionID = T4.RegionID WHERE T1.LastName = 'Davolio' AND T1.FirstName = 'Nancy'"
    },
    {
        "db_id": "retail_world",
        "question": "Describe Sales Representative names who were hired in 1992 and compare the number of orders among them.",
        "evidence": "Sales Representative refers to Title = 'Sales Representative'\uff1bwere hired in 1992 refers to HireDate = '1992'",
        "SQL": "SELECT T1.FirstName, T1.LastName, COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.Title = 'Sales Representative' AND STRFTIME('%Y', T1.HireDate) = '1992' GROUP BY T1.EmployeeID, T1.FirstName, T1.LastName"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the total payment of orders for Vegie-spread product.",
        "evidence": "Vegie-spread product refers to ProductName = 'Vegie-spread'\uff1btotal payment = MULTIPLY(UnitPrice, Quantity, (1-Discount))",
        "SQL": "SELECT SUM(T2.UnitPrice * T2.Quantity * (1 - T2.Discount)) AS sum FROM Products AS T1 INNER JOIN `Order Details` AS T2 ON T1.ProductID = T2.ProductID WHERE T1.ProductName = 'Vegie-spread'"
    },
    {
        "db_id": "retail_world",
        "question": "List down the company names which supplied products for the order on 14th August, 1996.",
        "evidence": "products refers to Order_Details.ProductID; on 14th August, 1996 refers to OrderDate = '8/14/1996'",
        "SQL": "SELECT T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID INNER JOIN Orders AS T4 ON T3.OrderID = T4.OrderID WHERE date(T4.OrderDate) = '1996-08-14'"
    },
    {
        "db_id": "retail_world",
        "question": "Among the product lists in order ID 10337, write down the product names and suppliers which had the highest in reorder level.",
        "evidence": "suppliers refers to CompanyName; highest in reorder level refers to Max(ReorderLevel)",
        "SQL": "SELECT T2.ProductName, T1.CompanyName FROM Suppliers AS T1 INNER JOIN Products AS T2 ON T1.SupplierID = T2.SupplierID INNER JOIN `Order Details` AS T3 ON T2.ProductID = T3.ProductID WHERE T3.OrderID = 10337 ORDER BY T2.ReorderLevel DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Name the shipper which had the most shipments in first quarter of 1998.",
        "evidence": "Name the shipper refers to CompanyName; most shipments refers to max(count(OrderID)); first quarter of 1998 refers to ShippedDate = 1998/1 and ShippedDate = 1998/2 and ShippedDate = 1998/3 and ShippedDate = 1998/4",
        "SQL": "SELECT T1.CompanyName FROM Shippers AS T1 INNER JOIN Orders AS T2 ON T1.ShipperID = T2.ShipVia WHERE STRFTIME('%Y', T2.ShippedDate) = '1998' GROUP BY T1.CompanyName ORDER BY COUNT(T2.OrderID) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "How many customers are located in London?",
        "evidence": "London refers to City = 'London'",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the title of Michael Suyama?",
        "evidence": "",
        "SQL": "SELECT Title FROM Employees WHERE FirstName = 'Michael' AND LastName = 'Suyama'"
    },
    {
        "db_id": "retail_world",
        "question": "List out the full name of employee who has birth day on \"3/4/1955 12:00:00 AM\".",
        "evidence": "full name refers to FirstName, LastName; brith day refers to BirthDate",
        "SQL": "SELECT FirstName, LastName FROM Employees WHERE BirthDate = '1955-03-04 00:00:00'"
    },
    {
        "db_id": "retail_world",
        "question": "Mention the first name of employee who took care the order id 10250.",
        "evidence": "",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10250"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders that the employees who are located in Tacoma handled?",
        "evidence": "located in Tacoma refers to City = 'Tacoma'",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'"
    },
    {
        "db_id": "retail_world",
        "question": "What is the country location of the employee who handled order id 10257?",
        "evidence": "",
        "SQL": "SELECT T1.Country FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257"
    },
    {
        "db_id": "retail_world",
        "question": "What is the title of the employee who handled order id 10270?",
        "evidence": "",
        "SQL": "SELECT T1.Title FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10257"
    },
    {
        "db_id": "retail_world",
        "question": "Give the phone number of the customer who placed the order id 10264.",
        "evidence": "",
        "SQL": "SELECT T1.Phone FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10264"
    },
    {
        "db_id": "retail_world",
        "question": "What is the region where the customer who placed the order id 10276 located?",
        "evidence": "",
        "SQL": "SELECT T1.Region FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.OrderID = 10276"
    },
    {
        "db_id": "retail_world",
        "question": "Among the employees who handled orders to Brazil, who has the highest salary and calculate the average salary of them.",
        "evidence": "orders to Brazil refers to ShipCountry = 'Brazil'; highest salary refers to max(salary); average salary = AVG(Salary)",
        "SQL": "SELECT T1.FirstName, T1.LastName, AVG(T1.Salary) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.ShipCountry = 'Brazil' GROUP BY T1.FirstName, T1.LastName ORDER BY SUM(T1.Salary) DESC LIMIT 1"
    },
    {
        "db_id": "retail_world",
        "question": "Calculate the percentage salary of employees who handled orders shipped in 1996.",
        "evidence": "shipped in 1996 refers to ShippedDate = 1996; percentage salary = divide(sum(Salary when ShippedDate = 1996), sum(Salary)) as percentage",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T2.ShippedDate) = '1996' THEN T1.Salary ELSE 0 END) AS REAL) * 100 / SUM(T1.Salary) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID"
    },
    {
        "db_id": "retail_world",
        "question": "When was the employee who handled order id 10281 hired?",
        "evidence": "When was hired refers to HireDate",
        "SQL": "SELECT T1.HireDate FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10281"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders was handled by employees who reported to employee id 5?",
        "evidence": "reported to employee id 5 refers to ReportsTo = 5",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.ReportsTo = 5"
    },
    {
        "db_id": "retail_world",
        "question": "Give the full name of employee who handled the order id 10280.",
        "evidence": "full name refers to FirstName, LastName",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10280"
    },
    {
        "db_id": "retail_world",
        "question": "State the shipping company of order id 10260.",
        "evidence": "shipping company refers to CompanyName",
        "SQL": "SELECT T2.CompanyName FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260"
    },
    {
        "db_id": "retail_world",
        "question": "How many orders have been shipped through United Package?",
        "evidence": "shipped through refers to ShipVia; United Package refers to CompanyName = 'United Package'",
        "SQL": "SELECT COUNT(T1.OrderID) FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T2.CompanyName = 'United Package'"
    },
    {
        "db_id": "retail_world",
        "question": "List out the phone number of the shipping company of order id 10296.",
        "evidence": "shipping company refers to Shippers; phone number refers to Phone",
        "SQL": "SELECT T2.Phone FROM Orders AS T1 INNER JOIN Shippers AS T2 ON T1.ShipVia = T2.ShipperID WHERE T1.OrderID = 10260"
    },
    {
        "db_id": "car_retails",
        "question": "List the country and how many customers are there.",
        "evidence": "",
        "SQL": "SELECT country, COUNT(customerNumber) FROM customers GROUP BY country"
    },
    {
        "db_id": "car_retails",
        "question": "Which different vendor has the most amount of orders? Calculate the total estimated earnings.",
        "evidence": "amount of order refers to quantityOrdered; most amount of orders refers to SUM(QuantityOrdered); estimated earnings refers to expected profits; expected profits = SUBTRACT(msrp, buyPrice);",
        "SQL": "SELECT DISTINCT T1.productVendor, T1.MSRP - T1.buyPrice FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode GROUP BY T1.productVendor, T1.MSRP, T1.buyPrice ORDER BY COUNT(T2.quantityOrdered) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "Who is the sales agent of the distinct customer who paid the highest amount in the year 2004?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T3.lastName, T3.firstName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN employees AS T3 ON T2.salesRepEmployeeNumber = T3.employeeNumber WHERE STRFTIME('%Y', T1.paymentDate) = '2004' ORDER BY T1.amount DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "What was the total price of the products shipped to Rovelli Gifts Distributors Ltd. between 1/1/2003 and 12/31/2003?",
        "evidence": "Mini Gifts Distributors Ltd. Is the customer name; shippedDate between '2003-01-01' and '2003-12-31'; total price = MULTIPLY(quantityOrdered, priceEach);",
        "SQL": "SELECT T3.priceEach * T3.quantityOrdered FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.customerName = 'Rovelli Gifts' AND T2.status = 'Shipped' AND STRFTIME('%Y', T2.shippedDate) = '2003'"
    },
    {
        "db_id": "car_retails",
        "question": "How many employees are there in Sydney?",
        "evidence": "sales agent and sales representative are synonyms; Sydney is a city;",
        "SQL": "SELECT COUNT(employeeNumber) FROM employees WHERE officeCode = ( SELECT officeCode FROM offices WHERE city = 'Sydney' )"
    },
    {
        "db_id": "car_retails",
        "question": "Which sales representatives in New York city whose leader is Anthony Bow with the employee number is 1143? Indicate their employee numbers.",
        "evidence": "reportsTO' is the leader of the 'employeeNumber';",
        "SQL": "SELECT T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1143 AND T2.city = 'NYC'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the average, highest and lowest annual payments collected between 1/1/2003 to 12/31/2005?",
        "evidence": "paymentDate BETWEEN '2003-01-01' AND '2005-12-31'; average annual payments = DIVIDE(SUM(amount), 3);",
        "SQL": "SELECT CAST(SUM(T1.amount) AS REAL) / 3, MAX(T1.amount) , MIN(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate BETWEEN '2003-01-01' AND '2005-12-31'"
    },
    {
        "db_id": "car_retails",
        "question": "Which countries do the top 5 highest paying customers in a single payment come from? Indicate their entire address.",
        "evidence": "highest paying customer refers to MAX(amount); entire address = addressLine1+addressLine2;",
        "SQL": "SELECT DISTINCT T2.country, T2.addressLine1, T2.addressLine2 FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber ORDER BY T1.amount DESC LIMIT 5"
    },
    {
        "db_id": "car_retails",
        "question": "How many checks were issued by Euro+ Shopping Channel in the year 2004?",
        "evidence": "Euro+ Shopping Channel is a customer name; year(paymentDate) = '2004';",
        "SQL": "SELECT COUNT(T1.checkNumber) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE customerName = 'Euro+ Shopping Channel' AND STRFTIME('%Y', T1.paymentDate) = '2004'"
    },
    {
        "db_id": "car_retails",
        "question": "Of all the classic cars, with a product scale of 1:18, which product is the most ordered product by customers?",
        "evidence": "classic car is a product line; most ordered product refers to MAX(quantityOrdered);",
        "SQL": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productScale = '1:18' AND T1.productLine = 'Classic Cars' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "How many customers have a credit limit of not more than 100,000 and which customer made the highest total payment amount for the year 2004?",
        "evidence": "creditLimit < = 100000; total payment amount refers to amount; highest total payment amount refers to MAX(amount); year(paymentDate) = '2004';",
        "SQL": "SELECT ( SELECT COUNT(customerNumber) FROM customers WHERE creditLimit <= 100000 AND customerNumber IN ( SELECT customerNumber FROM payments WHERE STRFTIME('%Y', paymentDate) = '2004' ) ), T1.customerName FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.creditLimit <= 100000 AND STRFTIME('%Y', T2.paymentDate) = '2004' GROUP BY T1.customerNumber, T1.customerName ORDER BY SUM(T2.amount) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "Which of the customers, whose Tokyo-based sales representative reports to the Vice President of Sales whose employee number is 1056, has paid the highest payment? List the customer's name, the contact person and calculate the total amount of that customer's total payments.",
        "evidence": "Tokyo is a city; 'reportsTO' is the leader of the 'employeeNumber'; highest payment refers to MAX(amount); total amount of payments = SUM(amount);",
        "SQL": "SELECT T2.customerName, T2.contactFirstName, T2.contactLastName, SUM(T3.amount) FROM employees AS T1 INNER JOIN customers AS T2 ON T2.salesRepEmployeeNumber = T1.employeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN offices AS T4 ON T1.officeCode = T4.officeCode WHERE T4.city = 'Tokyo' AND T1.reportsTo = 1056 GROUP BY T2.customerName, T2.contactFirstName, T2.contactLastName ORDER BY amount DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "Which two products has the highest and lowest expected profits? Determine the total price for each product in terms of the largest quantity that was ordered.",
        "evidence": "expected profits = SUBTRACT(msrp, buyPrice); total price = MULTIPLY(quantityOrdered, priceEach)",
        "SQL": "SELECT T2.productName, SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice DESC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode UNION SELECT T2.productName, SUM(quantityOrdered * priceEach) FROM orderdetails AS T1 INNER JOIN ( SELECT productCode, productName FROM products ORDER BY MSRP - buyPrice ASC LIMIT 1 ) AS T2 ON T1.productCode = T2.productCode"
    },
    {
        "db_id": "car_retails",
        "question": "How many different orders with a total price greater than 4000 are cancelled?",
        "evidence": "total price = MULTIPLY(quantityOrdered, priceEach) > 4000; cancelled orders refer to status = 'Cancelled';",
        "SQL": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered * T1.priceEach > 4000 AND T2.status = 'Cancelled'"
    },
    {
        "db_id": "car_retails",
        "question": "How many distinct orders were there in 2003 when the quantity ordered was less than 30?",
        "evidence": "year(orderDate) = '2003'; quantityOrdered < 30;",
        "SQL": "SELECT COUNT(DISTINCT T1.orderNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.quantityOrdered < 30 AND STRFTIME('%Y', T2.orderDate) = '2003'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the total value of cancelled orders?",
        "evidence": "total value = SUM(MULTIPLY(quantityOrdered, priceEach)); cancelled orders refers to status = 'Cancelled';",
        "SQL": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T2.status = 'Cancelled'"
    },
    {
        "db_id": "car_retails",
        "question": "Please calculate the total value of Motorcycles orders.",
        "evidence": "Motorcycle is a product line; total value = SUM(MULTIPLY(quantityOrdered, priceEach));",
        "SQL": "SELECT SUM(T1.quantityOrdered * T1.priceEach) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Motorcycles'"
    },
    {
        "db_id": "car_retails",
        "question": "How many Planes orders were there?",
        "evidence": "Planes is a product line;",
        "SQL": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productLine = 'Planes'"
    },
    {
        "db_id": "car_retails",
        "question": "How many orders which expected profits greater than 100?",
        "evidence": "expected profits greater than 100 = (SUBTRACT(msrp, buyPrice))>100;",
        "SQL": "SELECT COUNT(T1.productCode) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.MSRP - T2.buyPrice > 100"
    },
    {
        "db_id": "car_retails",
        "question": "Please calculate the average total price of orders from Exoto Designs Vendor in 2005.",
        "evidence": "average total price = DIVIDE(SUM(MULTIPLY(quantityOrdered, priceEach))), COUNT(orderNumber)); year(orderDate) = '2005';",
        "SQL": "SELECT SUM(T2.quantityOrdered * T2.priceEach) / COUNT(T3.orderNumber) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T1.productVendor = 'Exoto Designs' AND STRFTIME('%Y', T3.orderDate) = '2005'"
    },
    {
        "db_id": "car_retails",
        "question": "How many sales representatives who have office code is 1?",
        "evidence": "sales representative refers to jobTitle = 'Sales Rep';",
        "SQL": "SELECT COUNT(officeCode) FROM employees WHERE jobTitle = 'Sales Rep' AND officeCode = 1"
    },
    {
        "db_id": "car_retails",
        "question": "Please list different customer names with the payment amount of over 50,000.",
        "evidence": "amount > 50000;",
        "SQL": "SELECT DISTINCT T2.customerName FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.amount > 50000"
    },
    {
        "db_id": "car_retails",
        "question": "Please calculate the total payment amount of customers who come from the USA.",
        "evidence": "USA is a country; total amount payment refers to SUM(amount);",
        "SQL": "SELECT SUM(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.country = 'USA'"
    },
    {
        "db_id": "car_retails",
        "question": "What are the total payments of customers with no credit limit in 2003?",
        "evidence": "total payment refers to SUM(amount); no credit limit refers to creditLimit = 0; year(paymentDate) = '2003';",
        "SQL": "SELECT SUM(amount) FROM payments WHERE STRFTIME('%Y', paymentDate) = '2003' AND customerNumber IN ( SELECT customerNumber FROM customers WHERE creditLimit = 0 )"
    },
    {
        "db_id": "car_retails",
        "question": "Please list the name and phone number of the customer whose order was cancelled.",
        "evidence": "cancelled order refers to status = 'Cancelled';",
        "SQL": "SELECT T2.customerName, T2.phone FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Cancelled'"
    },
    {
        "db_id": "car_retails",
        "question": "How many French customers shipped 2 orders which have been cancelled?",
        "evidence": "French is a nationality of country = 'France'; cancelled orders refers to status = 'Cancelled';",
        "SQL": "SELECT COUNT(T2.country) FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.status = 'Shipped' AND T2.country = 'France' GROUP BY T2.customerNumber HAVING COUNT(T1.status) = 2"
    },
    {
        "db_id": "car_retails",
        "question": "Please calculate the average total price of shipped orders from German customers.",
        "evidence": "average total price = DIVIDE(MULTIPLY(quantityOrdered, priceEach)), COUNT(orderNumber)); German is a nationality of country = 'Germany'; shipped orders refers to status = 'Shipped';",
        "SQL": "SELECT SUM(T3.quantityOrdered * T3.priceEach) / COUNT(T2.orderNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T2.status = 'Shipped' AND T1.country = 'Germany'"
    },
    {
        "db_id": "car_retails",
        "question": "List out full name of employees who are working in Tokyo?",
        "evidence": "Tokyo is a city; full name = firstName+lastName;",
        "SQL": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo'"
    },
    {
        "db_id": "car_retails",
        "question": "How many Sales Rep who are working in Tokyo? List out email and full name of those employees.",
        "evidence": "Sales Rep is a job title; Tokyo is a city; full name = firstName+lastName;",
        "SQL": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Tokyo' AND T1.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question": "State the email of those who are staff of Murphy Diane whose number is 1002 and living in San Francisco",
        "evidence": "staff of refers to reportsTO; San Francisco is a city;",
        "SQL": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.reportsTo = 1002 AND T2.city = 'San Francisco'"
    },
    {
        "db_id": "car_retails",
        "question": "Determine the email and Code of employee who are working at United State, state MA",
        "evidence": "code of employee refers to employeeNumber; United States of America refers to country = 'USA';",
        "SQL": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.state = 'MA' AND T2.country = 'USA'"
    },
    {
        "db_id": "car_retails",
        "question": "How many Sales Manager who are working in Sydney? List out their email.",
        "evidence": "Sales Manager is a job title; Sydney is a city;",
        "SQL": "SELECT T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T1.jobTitle LIKE '%Sales Manager%' AND T2.city = 'Sydney'"
    },
    {
        "db_id": "car_retails",
        "question": "How many employees who are living in Australia and have the credit limit under 200000? State their email address and countries where they are working.",
        "evidence": "Australia is a country; creditLimit < 20000;",
        "SQL": "SELECT T2.email, T3.country FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber INNER JOIN offices AS T3 ON T2.officeCode = T3.officeCode WHERE T3.country = 'Australia' AND T1.creditLimit < 200000 AND T2.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question": "State 10 emails of UK Sales Rep who have the lowest credit limit.",
        "evidence": "UK is a country; Sales Rep is a job title;",
        "SQL": "SELECT DISTINCT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' ORDER BY T1.creditLimit LIMIT 10"
    },
    {
        "db_id": "car_retails",
        "question": "How many Australian customers who have credit line under 220000?",
        "evidence": "Australian is a nationality of country = 'Australia'; credit line refers to creditLimit; creditLimit < 220000;",
        "SQL": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Australia'"
    },
    {
        "db_id": "car_retails",
        "question": "List out 3 customer numbers who have highest amount payment",
        "evidence": "amount of payment refers to amount;",
        "SQL": "SELECT customerNumber FROM payments ORDER BY amount DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question": "Determine the email and Code of employee who are working at United State, state CA",
        "evidence": "United States of America refers to country = 'USA'; code of employee refers to employeeNumber;",
        "SQL": "SELECT T1.email, T1.employeeNumber FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.country = 'USA' AND T2.state = 'CA' GROUP BY T1.email, T1.officeCode"
    },
    {
        "db_id": "car_retails",
        "question": "List out full name of employees who are working in Boston?",
        "evidence": "full name = contactFirstName, contactLastName; Boston is a city;",
        "SQL": "SELECT T1.firstName, T1.lastName FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Boston'"
    },
    {
        "db_id": "car_retails",
        "question": "State top 3 emails of UK Sales Rep who have the highest credit limit.",
        "evidence": "UK is a country; Sales Rep is a job title;",
        "SQL": "SELECT T2.email FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep' AND T1.country = 'UK' GROUP BY T1.customerName, T2.email ORDER BY SUM(T1.creditLimit) DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question": "How many customers who are in Norway and have credit line under 220000?",
        "evidence": "Norway is a country; credit line refers to creditLimit; creditLimit<220000;",
        "SQL": "SELECT COUNT(creditLimit) FROM customers WHERE creditLimit < 220000 AND country = 'Norway'"
    },
    {
        "db_id": "car_retails",
        "question": "List out full name and email of employees who are working in Paris?",
        "evidence": "full name = firstName+LastName; Paris is a city;",
        "SQL": "SELECT T1.firstName, T1.lastName, T1.email FROM employees AS T1 INNER JOIN offices AS T2 ON T1.officeCode = T2.officeCode WHERE T2.city = 'Paris'"
    },
    {
        "db_id": "car_retails",
        "question": "List the product code of the top five motorcycles, by descending order, the number of quantity in stock.",
        "evidence": "motorcycle is a product line;",
        "SQL": "SELECT productCode, quantityInStock FROM products WHERE productLine = 'Motorcycles' ORDER BY quantityInStock DESC LIMIT 5"
    },
    {
        "db_id": "car_retails",
        "question": "Among the German customers, how many of the them has credit limit of zero?",
        "evidence": "German is a nationality of country = 'Germany'; CREDITLIMIT = 0",
        "SQL": "SELECT COUNT(customerNumber) FROM customers WHERE creditLimit = 0 AND country = 'Germany'"
    },
    {
        "db_id": "car_retails",
        "question": "From 2003 to 2004, how many customers have paid more than three times?",
        "evidence": "paymentdate BETWEEN '2003-01-01' AND '2004-12-31'; customers who have paid more than three times refers to (COUNT(customernumber)>3);",
        "SQL": "SELECT COUNT(customernumber) FROM ( SELECT customernumber FROM payments WHERE STRFTIME('%Y', paymentDate) >= '2003' AND STRFTIME('%Y', paymentDate) <= '2004' GROUP BY customernumber HAVING COUNT(customernumber) > 3 ) T"
    },
    {
        "db_id": "car_retails",
        "question": "What is the average actual profit by 1937 Lincoln Berline?",
        "evidence": "average actual profit = AVG(SUBTRACT(priceEach, buyPrice)); 1937 Lincoln Berline is a product name;",
        "SQL": "SELECT SUM(T1.priceEach - T2.buyPrice) / COUNT(*) FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode WHERE T2.productName = '1937 Lincoln Berline'"
    },
    {
        "db_id": "car_retails",
        "question": "Among the motorcycles with product scale of 1:10, which of them is the most ordered by American customers?",
        "evidence": "motorcycle is a product line; American is a nationality of country = 'USA';",
        "SQL": "SELECT T1.productName FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T1.productLine = 'Motorcycles' AND T1.productScale = '1:10' AND T4.country = 'USA' GROUP BY T1.productName ORDER BY SUM(T2.quantityOrdered) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "Between 8/1/2003 and 8/30/2004, how many checks were issued by Mini Gifts Distributors Ltd.? Please list their check numbers.",
        "evidence": "paymentDate BETWEEN '2003-08-01' AND '2004-08-30'; Mini Gifts Distributors Ltd. Is a customer name;",
        "SQL": "SELECT T1.checkNumber FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate >= '2003-08-01' AND T1.paymentDate <= '2004-08-30' AND T2.customerName = 'Mini Gifts Distributors Ltd.'"
    },
    {
        "db_id": "car_retails",
        "question": "For the planes which has the hightest total price, how much it exceeds the average?",
        "evidence": "plane is a product line; total price = MULTIPLY(quantityOrdered, priceEach); how much the total price exceeds the average = SUBTRACT(MAX(MULTIPLY(quantityOrdered, priceEach))), AVG(priceEach));",
        "SQL": "SELECT MAX(quantityOrdered * priceEach) - AVG(priceEach) FROM orderdetails WHERE productCode IN ( SELECT productCode FROM products WHERE productLine = 'Planes' )"
    },
    {
        "db_id": "car_retails",
        "question": "What is the total value of shipped vintage car orders from 2003-2004?",
        "evidence": "total value = SUM(MULTIPLY(quantityOrdered, priceEach)); shipped orders refers to status = 'Shipped'; vintage car is a product line; year(orderDate) between 2003 and 2004;",
        "SQL": "SELECT SUM(T2.priceEach * T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber WHERE T3.status = 'Shipped' AND T3.orderDate BETWEEN '2003-01-01' AND '2004-12-31'"
    },
    {
        "db_id": "car_retails",
        "question": "Who is the sales agent of the customer who has made the highest payment? Include the full names of employee and his/her supervisor.",
        "evidence": "payment refers to amount; full name = firstName+lastName; supervisor refers to reportsTO; 'reportsTO' is the leader of the 'employeeNumber';",
        "SQL": "SELECT T1.firstName, T1.lastName, T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber ORDER BY T3.amount DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "What is the highest amount of order made by the sales representative in Boston? Please give the name of the product and amount.",
        "evidence": "Boston is a city; amount of order = MULTIPLY(quantityOrdered, priceEach);",
        "SQL": "SELECT T2.productName, T1.quantityOrdered * T1.priceEach FROM orderdetails AS T1 INNER JOIN products AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T1.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T4.city = 'Boston' AND T4.salesRepEmployeeNumber IN ( SELECT employeeNumber FROM employees WHERE jobTitle = 'Sales Rep' ) ORDER BY T1.quantityOrdered DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "What is the total actual profit gained from orders made by American customers from 2003-01-06 to 2005-05-09?",
        "evidence": "total actual profit = SUM(SUBTRACT(priceEach, buyPrice)); American is a nationality of country = 'USA'; orderDate BETWEEN '2003-01-06' AND '2005-05-09';",
        "SQL": "SELECT SUM(T2.priceEach - T1.buyPrice) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode INNER JOIN orders AS T3 ON T2.orderNumber = T3.orderNumber INNER JOIN customers AS T4 ON T3.customerNumber = T4.customerNumber WHERE T3.orderDate > '2003-01-05' AND T3.orderDate < '2005-05-10'"
    },
    {
        "db_id": "car_retails",
        "question": "From which branch does the sales representative employee who made the most sales in 2005? Please indicates its full address and phone number.",
        "evidence": "orderDate between '2005-01-01' and '2005-12-31'; full address = addressLine1+addressLine2;",
        "SQL": "SELECT T3.addressLine1, T3.addressLine2, T3.phone FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber INNER JOIN customers AS T3 ON T2.customerNumber = T3.customerNumber INNER JOIN employees AS T4 ON T3.salesRepEmployeeNumber = T4.employeeNumber INNER JOIN offices AS T5 ON T4.officeCode = T5.officeCode WHERE STRFTIME('%Y', T2.orderDate) = '2005' AND T4.jobTitle = 'Sales Rep' ORDER BY T1.quantityOrdered DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "What is the phone number of all companies where the last name of the contact person starts with the letter M and are not from Germany?",
        "evidence": "last name of contact person starts with M refers to lastName LIKE 'M%'; Germany is a country; not from Germany refers to country<>'Germany';",
        "SQL": "SELECT phone FROM customers WHERE contactLastName LIKE 'M%' AND country != 'Germany'"
    },
    {
        "db_id": "car_retails",
        "question": "Calculate the average amount of payments made by customers during the first half of 2004.",
        "evidence": "average amount of payments = DIVIDE(SUM(amount), COUNT(customerNumber); first half of 2014 refers to paymentDate > = '2004-01-01' AND paymentDate < '2004-07-01;",
        "SQL": "SELECT AVG(amount) FROM payments WHERE paymentDate BETWEEN '2004-01-01' AND '2004-06-30'"
    },
    {
        "db_id": "car_retails",
        "question": "Of all the orders placed and shipped throughout the year 2005, what percentage of those orders corresponds to customer number 186?",
        "evidence": "shipped orders refers to status = 'shipped'; year(shippedDate) = 2005; percentage = DIVIDE(SUM(customerNumber = 186)), COUNT(orderNumber)) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN customerNumber = 186 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(orderNumber) FROM orders WHERE status = 'Shipped' AND shippedDate BETWEEN '2005-01-01' AND '2005-12-31'"
    },
    {
        "db_id": "car_retails",
        "question": "How many customers with a canceled shipment have a credit limit greater than 115,000?",
        "evidence": "cancelled shipment refers to status = 'cancelled'; creditLimit > 115000;",
        "SQL": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000"
    },
    {
        "db_id": "car_retails",
        "question": "On what date did the customer with the lowest credit limit serviced by sales representative Barry Jones make payments for his/her orders?",
        "evidence": "",
        "SQL": "SELECT T3.paymentDate FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN payments AS T3 ON T2.customerNumber = T3.customerNumber WHERE T1.firstName = 'Barry' AND T1.lastName = 'Jones' AND T1.jobTitle = 'Sales Rep' ORDER BY T2.creditLimit ASC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "To whom does the employee have to inform that is the sales representative of the French customer?",
        "evidence": "inform refers to reportsTo; 'reportsTO' is the leader of the 'employeeNumber'; France is a country; country = 'France';",
        "SQL": "SELECT T1.reportsTo FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber WHERE T2.country = 'France'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the full address of the customer who commented that DHL be used for the order that was shipped on April 4, 2005?",
        "evidence": "full address = addressLine1+addressLine2; shippedDate = '2005-04-04';",
        "SQL": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.shippedDate = '2005-04-04' AND T2.status = 'Shipped'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the full address of the office where the employee who is a sales representative for the customer whose business is located in the city of New York works?",
        "evidence": "full address = addressLine1 + addressLine2; NYC is a shortname of New York City.",
        "SQL": "SELECT T2.addressLine1, T2.addressLine2 FROM employees AS T1 INNER JOIN customers AS T2 ON T1.employeeNumber = T2.salesRepEmployeeNumber INNER JOIN offices AS T3 ON T1.officeCode = T3.officeCode WHERE T2.city = 'NYC' AND T1.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the full address of the office where 4 people work and one of them is Sales Representation?",
        "evidence": "full address = addressLine1+addressLine2; Sales Manager is a job title;",
        "SQL": "SELECT T1.addressLine1, T1.addressLine2 FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T2.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question": "What profit can the seller Carousel DieCast Legends make from the sale of the product described as \"The perfect holiday or anniversary gift for executives\"?",
        "evidence": "seller and product vendor are synonyms; Carousel DieCast Legends is a product vendor; profit = SUM(SUBTRACT(msrp, buyPrice));",
        "SQL": "SELECT SUM(T2.MSRP - T2.buyPrice) FROM productlines AS T1 INNER JOIN products AS T2 ON T1.productLine = T2.productLine WHERE T2.productVendor = 'Carousel DieCast Legends' AND T1.textDescription LIKE '%perfect holiday or anniversary gift for executives%'"
    },
    {
        "db_id": "car_retails",
        "question": "Of the clients whose businesses are located in the city of Boston, calculate which of them has a higher average amount of payment.",
        "evidence": "average amount payment = AVG(amount);",
        "SQL": "SELECT T1.customerNumber FROM customers AS T1 INNER JOIN payments AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.city = 'Boston' GROUP BY T1.customerNumber ORDER BY SUM(T2.amount) / COUNT(T2.paymentDate) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "Calculate the total quantity ordered for 18th Century Vintage Horse Carriage and the average price.",
        "evidence": "18th Century Vintage Horse Carriage is a product name; average price = AVG(priceEach);",
        "SQL": "SELECT SUM(T2.quantityOrdered) , SUM(T2.quantityOrdered * T2.priceEach) / SUM(T2.quantityOrdered) FROM products AS T1 INNER JOIN orderdetails AS T2 ON T1.productCode = T2.productCode WHERE T1.productName = '18th Century Vintage Horse Carriage'"
    },
    {
        "db_id": "car_retails",
        "question": "How many kinds of products did order No. 10252 contain?",
        "evidence": "Products refer to productCode;",
        "SQL": "SELECT COUNT(t.productCode) FROM orderdetails t WHERE t.orderNumber = '10252'"
    },
    {
        "db_id": "car_retails",
        "question": "Who is the sales representative that made the order which was sent to 25 Maiden Lane, Floor No. 4?",
        "evidence": "Sales representative is an employee;",
        "SQL": "SELECT T2.firstName, T2.lastName FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesRepEmployeeNumber = T2.employeeNumber WHERE T1.addressLine1 = '25 Maiden Lane' AND T1.addressLine2 = 'Floor No. 4'"
    },
    {
        "db_id": "car_retails",
        "question": "Where's Foon Yue Tseng's office located at? Give the detailed address.",
        "evidence": "Detailed address comprises addressLine1 and addressLine2;",
        "SQL": "SELECT T1.addressLine1, T1.addressLine2 FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.firstName = 'Foon Yue' AND T2.lastName = 'Tseng'"
    },
    {
        "db_id": "car_retails",
        "question": "Compared with the orders happened on 2005-04-08 and two days later, which day's order had a higher value?",
        "evidence": "2005-04-08 and two days later refer to orderDate = '2005-04-08' and orderDate = '2005-04-10'; order with a higher value refers to MAX(Total price) = MULTIPLY(quantityOrdered, priceEach); ",
        "SQL": "SELECT T2.orderDate FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-08' OR STRFTIME('%Y-%m-%d', T2.orderDate) = '2005-04-10' ORDER BY T1.quantityOrdered * T1.priceEach DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "How many products with the highest expected profits were sold in total?",
        "evidence": "Products refer to productCode; Expected profits = SUBTRACT(MSRP, buyPrice);",
        "SQL": "SELECT SUM(t2.quantityOrdered) FROM orderdetails AS t2 INNER JOIN ( SELECT t1.productCode FROM products AS t1 ORDER BY t1.MSRP - t1.buyPrice DESC LIMIT 1 ) AS t3 ON t2.productCode = t3.productCode"
    },
    {
        "db_id": "car_retails",
        "question": "How much did Petit Auto pay on 2004-08-09?",
        "evidence": "Petit Auto is name of customer; paymentDate = '2004-08-09';",
        "SQL": "SELECT t1.amount FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Petit Auto' AND t1.paymentDate = '2004-08-09'"
    },
    {
        "db_id": "car_retails",
        "question": "What was the contact name for the check \"NR157385\"?",
        "evidence": "Contact name refers to customerName;",
        "SQL": "SELECT t2.contactFirstName, t2.contactLastName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'NR157385'"
    },
    {
        "db_id": "car_retails",
        "question": "Which customer made the order No. 10160? Give the contact name.",
        "evidence": "",
        "SQL": "SELECT t2.contactFirstName, t2.contactLastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10160'"
    },
    {
        "db_id": "car_retails",
        "question": "Where was the order No. 10383 shipped to? Show me the address.",
        "evidence": "Address comprises addressLine1 and addressLine2;",
        "SQL": "SELECT t2.addressLine1, t2.addressLine2 FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10383'"
    },
    {
        "db_id": "car_retails",
        "question": "For the productline where the product No.S18_2949 was produced, what's the text description for that product line?",
        "evidence": "",
        "SQL": "SELECT t1.textDescription FROM productlines AS t1 INNER JOIN products AS t2 ON t1.productLine = t2.productLine WHERE t2.productCode = 'S18_2949'"
    },
    {
        "db_id": "car_retails",
        "question": "If Dragon Souveniers, Ltd. aren't satisfied with their order and want to send a complain e-mail, which e-mail address should they send to?",
        "evidence": "E-mail address belongs to employee; customerName = 'Dragon Souveniers, Ltd.';",
        "SQL": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Dragon Souveniers, Ltd.'"
    },
    {
        "db_id": "car_retails",
        "question": "How many French customers does Gerard Hernandez take care of?",
        "evidence": "Gerakd Hermandez is an employee; French customer refers to customer from France where country = 'France'",
        "SQL": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.country = 'France' AND t2.firstName = 'Gerard' AND t2.lastName = 'Hernandez'"
    },
    {
        "db_id": "car_retails",
        "question": "What was the latest order that customer No.114 made? Give the name of the product.",
        "evidence": "The latest refers to the most recent orderDate;",
        "SQL": "SELECT t3.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t1.productCode = t3.productCode WHERE t2.customerNumber = '114' ORDER BY t2.orderDate DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "For the product No. S18_3482 in the Order No.10108, how much discount did the customer have?",
        "evidence": "DIVIDE(SUBTRACT(MSRP, priceEach)), MSRP); product No. S18_3482 refers to productCode = 'S18_3482'",
        "SQL": "SELECT (t1.MSRP - t2.priceEach) / t1.MSRP FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productCode = 'S18_3482' AND t2.orderNumber = '10108'"
    },
    {
        "db_id": "car_retails",
        "question": "To whom does Steve Patterson report? Please give his or her full name.",
        "evidence": "reportsTO' is the leader of the 'employeeNumber';",
        "SQL": "SELECT t2.firstName, t2.lastName FROM employees AS t1 INNER JOIN employees AS t2 ON t2.employeeNumber = t1.reportsTo WHERE t1.firstName = 'Steve' AND t1.lastName = 'Patterson'"
    },
    {
        "db_id": "car_retails",
        "question": "How do I contact the President of the company?",
        "evidence": "President refers to the jobTitle;",
        "SQL": "SELECT t.email FROM employees t WHERE t.jobTitle = 'President'"
    },
    {
        "db_id": "car_retails",
        "question": "Who is the sales representitive of Muscle Machine Inc? Please give the employee's full name.",
        "evidence": "Sales representative refers to jobTitle = 'Sales Rep'; Muscle Machine Inc is name of customer;",
        "SQL": "SELECT t2.firstName, t2.lastName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'"
    },
    {
        "db_id": "car_retails",
        "question": "If I'm from the Muscle Machine Inc, to which e-mail adress should I write a letter if I want to reach the superior of my sales representitive?",
        "evidence": "Muscle Machine Inc is name of customer; superior refers to 'reportsTO', who is the leader of the 'employeeNumber'",
        "SQL": "SELECT t2.email FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t1.customerName = 'Muscle Machine Inc'"
    },
    {
        "db_id": "car_retails",
        "question": "Please list all the customers that have Steve Patterson as their sales representitive.",
        "evidence": "Steve Patterson is an employee;",
        "SQL": "SELECT t1.customerName FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Steve' AND t2.lastName = 'Patterson'"
    },
    {
        "db_id": "car_retails",
        "question": "How many customers have an employee who reports to William Patterson as their sales representitive?",
        "evidence": "reportsTO' is the leader of the 'employeeNumber';",
        "SQL": "SELECT COUNT(t1.customerNumber) FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'William' AND t2.lastName = 'Patterson'"
    },
    {
        "db_id": "car_retails",
        "question": "Please list the phone numbers of the top 3 customers that have the highest credit limit and have Leslie Jennings as their sales representitive.",
        "evidence": "",
        "SQL": "SELECT t1.phone FROM customers AS t1 INNER JOIN employees AS t2 ON t1.salesRepEmployeeNumber = t2.employeeNumber WHERE t2.firstName = 'Leslie' AND t2.lastName = 'Jennings' ORDER BY t1.creditLimit DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question": "How many sales representitives are based in the offices in the USA?",
        "evidence": "Sales representative refers to jobTitle = 'Sales Rep'; country = 'USA';",
        "SQL": "SELECT COUNT(t1.employeeNumber) FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.country = 'USA' AND t1.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question": "Where can I find the office of the President of the company?",
        "evidence": "Where can I find the office refers to address, comprising of addressLine1 and addressLine2; President is a jobTitle",
        "SQL": "SELECT t2.addressLine1, t2.addressLine2 FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'President'"
    },
    {
        "db_id": "car_retails",
        "question": "What's the postal code of the office the VP Sales is at?",
        "evidence": "VP Sales refers to jobTitle",
        "SQL": "SELECT t2.postalCode FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'VP Sales'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the total price of the order made by Cruz & Sons Co. on 2003/3/3?",
        "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)) where orderDate = '2003-03-03'; customerName = 'Cruz & Sons Co.'",
        "SQL": "SELECT SUM(t1.priceEach * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'"
    },
    {
        "db_id": "car_retails",
        "question": "Which product did Cruz & Sons Co. order on 2003/3/3?",
        "evidence": "Cruz & Sons Co. is name of customer; 2003/3/3 refers to orderDate;",
        "SQL": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' AND t2.orderDate = '2003-03-03'"
    },
    {
        "db_id": "car_retails",
        "question": "Which product did Cruz & Sons Co. ask for the biggest amount in a single order?",
        "evidence": "Cruz & Sons Co. is name of customer; the biggest amount refers to MAX(quantityOrdered).",
        "SQL": "SELECT t4.productName FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode WHERE t3.customerName = 'Cruz & Sons Co.' ORDER BY t1.priceEach * t1.quantityOrdered DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "When were the products ordered by Cruz & Sons Co. on 2003-03-03 shipped?",
        "evidence": "Cruz & Sons Co. is name of customer; ordered on 2003-03-03 refers to orderDate;",
        "SQL": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Cruz & Sons Co.' AND t1.orderDate = '2003-03-03'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the amount of customers of 1957 Chevy Pickup by customers in a month?",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.customerNumber) FROM orderdetails AS T1 INNER JOIN orders AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.productCode IN ( SELECT productCode FROM products WHERE productName = '1957 Chevy Pickup' )"
    },
    {
        "db_id": "car_retails",
        "question": "Name the product from the 'Classic Cars' production line that has the greatest expected profit.",
        "evidence": "The greatest expected profit refers to MAX(SUBTRACT(MSRP, buyPrice);",
        "SQL": "SELECT t.productName, t.MSRP - t.buyPrice FROM products AS t WHERE t.productLine = 'Classic Cars' ORDER BY t.MSRP - t.buyPrice DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "List all the name of customers who have orders that are still processing.",
        "evidence": "Still processing refers to status = 'In Process';",
        "SQL": "SELECT t2.customerName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.status = 'In Process'"
    },
    {
        "db_id": "car_retails",
        "question": "Among all orders shipped, calculate the percentage of orders shipped at least 3 days before the required date.",
        "evidence": "Orders shipped refer to status = 'Shipped'; at least 3 days before the required date refers to SUBTRACT(shippedDate, requiredDate)>3; DIVIDE(COUNT(orderNumber where SUBTRACT(shippedDate, requiredDate)>3), (COUNT(orderNumber) as percentage;",
        "SQL": "SELECT COUNT(CASE WHEN JULIANDAY(t1.shippeddate) - JULIANDAY(t1.requireddate) > 3 THEN T1.customerNumber ELSE NULL END) FROM orders AS T1 INNER JOIN orderdetails AS T2 ON T1.orderNumber = T2.orderNumber WHERE T1.status = 'Shipped'"
    },
    {
        "db_id": "car_retails",
        "question": "Find the customer who made the highest payment in 2005.",
        "evidence": "The highest payment refers to max(amount); 2005 refers to year(paymentDate);",
        "SQL": "SELECT t2.customerName FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t1.paymentDate) = '2005' GROUP BY t2.customerNumber, t2.customerName ORDER BY SUM(t1.amount) DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "Which is the most ordered quantity product? What is its expected profit margin per piece?",
        "evidence": "The most ordered quantity product refers to productName where Max(quantityOrdered); SUBTRACT(MSRP, buyPrice);",
        "SQL": "SELECT productName, MSRP - buyPrice FROM products WHERE productCode = ( SELECT productCode FROM orderdetails ORDER BY quantityOrdered DESC LIMIT 1 )"
    },
    {
        "db_id": "car_retails",
        "question": "For the order has the most product ordered, name the customer who placed the order.",
        "evidence": "The largest order in terms of total price refers to MAX(SUM(MULTIPLY(quantityOrdered, priceEach)).",
        "SQL": "SELECT T2.firstName, T2.lastName FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.employeeNumber = ( SELECT MAX(employeeNumber) FROM employees )"
    },
    {
        "db_id": "car_retails",
        "question": "List all customer names with orders that are disputed.",
        "evidence": "Orders that are disputed refer to status = 'Disputed'; the sales representative means employees; names refers to firstName, lastName.",
        "SQL": "SELECT t3.firstName, t3.lastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN employees AS t3 ON t2.salesRepEmployeeNumber = t3.employeeNumber WHERE t1.status = 'Disputed'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the percentage of employees are in Paris office?",
        "evidence": "DIVIDE(COUNT(employeeNumber) when city = 'Paris'), (COUNT(employeeNumber)) as percentage;",
        "SQL": "SELECT CAST(COUNT(CASE WHEN t1.city = 'Paris' THEN t2.employeeNumber ELSE NULL END) AS REAL) * 100 / COUNT(t2.employeeNumber) FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode"
    },
    {
        "db_id": "car_retails",
        "question": "Name the Sales Manager of Europe, Middle East, and Africa region. In which office does he/she report to?",
        "evidence": "Sales Manager refers to jobTitle; Europe, Middle East, and Africa region refers to territory = 'EMEA';",
        "SQL": "SELECT t2.firstName, t2.lastName FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t2.jobTitle = 'Sale Manager (EMEA)'"
    },
    {
        "db_id": "car_retails",
        "question": "List the name of employees in Japan office and who are they reporting to.",
        "evidence": "Japan is the name of the country; 'reportsTO' is the leader of the 'employeeNumber';",
        "SQL": "SELECT t2.firstName, t2.lastName, t2.reportsTo FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode WHERE t1.country = 'Japan'"
    },
    {
        "db_id": "car_retails",
        "question": "Which customer ordered 1939 'Chevrolet Deluxe Coupe' at the highest price?",
        "evidence": "1939 'Chevrolet Deluxe Coupe' refers to productName; the highest price refers to MAX(priceEach)",
        "SQL": "SELECT t4.customerName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode INNER JOIN orders AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN customers AS t4 ON t3.customerNumber = t4.customerNumber WHERE t1.productName = '1939 Chevrolet Deluxe Coupe' ORDER BY t2.priceEach DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "What is the percentage of the payment amount in 2004 was made by Atelier graphique?",
        "evidence": "DIVIDE(SUM(amount) where customerName = 'Atelier graphique'), (SUM(amount)) as percentage where year(paymentDate) = 2004;",
        "SQL": "SELECT SUM(CASE WHEN t1.customerName = 'Atelier graphique' THEN t2.amount ELSE 0 END) * 100 / SUM(t2.amount) FROM customers AS t1 INNER JOIN payments AS t2 ON t1.customerNumber = t2.customerNumber WHERE STRFTIME('%Y', t2.paymentDate) = '2004'"
    },
    {
        "db_id": "car_retails",
        "question": "Calculate the actual profit for order number 10100.",
        "evidence": "SUM(MULTIPLY(quantityOrdered (SUBTRACT (priceEach, buyPrice));",
        "SQL": "SELECT SUM((t1.priceEach - t2.buyPrice) * t1.quantityOrdered) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t1.orderNumber = '10100'"
    },
    {
        "db_id": "car_retails",
        "question": "How much did customer 103 pay in total?",
        "evidence": "Pay in total refers to SUM(amount);",
        "SQL": "SELECT SUM(t.amount) FROM payments t WHERE t.customerNumber = '103'"
    },
    {
        "db_id": "car_retails",
        "question": "What is the total price of the order 10100?",
        "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)",
        "SQL": "SELECT SUM(t.priceEach * t.quantityOrdered) FROM orderdetails t WHERE t.orderNumber = '10100'"
    },
    {
        "db_id": "car_retails",
        "question": "Please list the top three product names with the highest unit price.",
        "evidence": "The highest unit price refers to MAX(priceEach)",
        "SQL": "SELECT t1.productName FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode ORDER BY t2.priceEach DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question": "Among the customers of empolyee 1370, who has the highest credit limit?Please list the full name of the contact person.",
        "evidence": "Employee 1370 refers to employeeNumber = '1370';",
        "SQL": "SELECT t2.contactFirstName, t2.contactLastName FROM employees AS t1 INNER JOIN customers AS t2 ON t1.employeeNumber = t2.salesRepEmployeeNumber WHERE t1.employeeNumber = '1370' ORDER BY t2.creditLimit DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "How many 2003 Harley-Davidson Eagle Drag Bikes were ordered?",
        "evidence": "2003 Harley-Davidson Eagle Drag Bikes refers to productName; how many ordered refers to COUNT(quantityOrdered);",
        "SQL": "SELECT SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode WHERE t1.productName = '2003 Harley-Davidson Eagle Drag Bike'"
    },
    {
        "db_id": "car_retails",
        "question": "When was the product with the highest unit price shipped?",
        "evidence": "The highest unit price refers to MAX(priceEach); when shipped refers to shippedDate;",
        "SQL": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "How many motorcycles have been ordered in 2004?",
        "evidence": "Motorcycles refer to productLine = 'motorcycles'; ordered in 2004 refers to year(orderDate) = 2004;",
        "SQL": "SELECT SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE t3.productLine = 'motorcycles' AND STRFTIME('%Y', t1.orderDate) = '2004'"
    },
    {
        "db_id": "car_retails",
        "question": "Please list the order number of the customer whose credit card has a limit of 45300.",
        "evidence": "Credit card does not have a limit refers to creditLimit = 45300;",
        "SQL": "SELECT t1.orderNumber FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.creditLimit = 45300"
    },
    {
        "db_id": "car_retails",
        "question": "For Which order was the most profitable, please list the customer name of the order and the profit of the order.",
        "evidence": "Most profitable order can be computed as MAX(MULTIPLY(quantityOrdered, SUBTRACT(priceEach, buyPrice)).",
        "SQL": "SELECT t3.customerName, (t1.priceEach - t4.buyPrice) * t1.quantityOrdered FROM orderdetails AS t1 INNER JOIN orders AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN customers AS t3 ON t2.customerNumber = t3.customerNumber INNER JOIN products AS t4 ON t1.productCode = t4.productCode GROUP BY t3.customerName, t1.priceEach, t4.buyPrice, t1.quantityOrdered ORDER BY (t1.priceEach - t4.buyPrice) * t1.quantityOrdered DESC LIMIT 1"
    },
    {
        "db_id": "car_retails",
        "question": "How many transactions payment made by customer that is lower than 10000. Group the result by year.",
        "evidence": "Transactions payment lower than 10000 refer to COUNT(amount) < 1000; by year refers to YEAR(paymentDate)",
        "SQL": "SELECT STRFTIME('%Y', t1.paymentDate), COUNT(t1.customerNumber) FROM payments AS t1 WHERE t1.amount < 10000 GROUP BY STRFTIME('%Y', t1.paymentDate)"
    },
    {
        "db_id": "car_retails",
        "question": "List out 3 best seller products during year 2003 with their total quantity sold during 2003.",
        "evidence": "Best selling products refer to products with MAX(quantityOrdered); 2003 refers to year(orderDate) = 2003;",
        "SQL": "SELECT t3.productName, SUM(t2.quantityOrdered) FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber INNER JOIN products AS t3 ON t2.productCode = t3.productCode WHERE STRFTIME('%Y', t1.orderDate) = '2003' GROUP BY t3.productName ORDER BY SUM(t2.quantityOrdered) DESC LIMIT 3"
    },
    {
        "db_id": "car_retails",
        "question": "List out sale rep that has sold 1969 Harley Davidson Ultimate Chopper. List out their names and quantity sold throughout the year.",
        "evidence": "1969 Harley Davidson Ultimate Chopper refers to the name of the product; sale rep refers to employee; 2003 refers to year(orderDate) = 2003; quantity sold refers to quantityOrdered; their names refer to the name of customers; ",
        "SQL": "SELECT t5.firstName, t5.lastName, SUM(t2.quantityOrdered) FROM products AS t1 INNER JOIN orderdetails AS t2 ON t1.productCode = t2.productCode INNER JOIN orders AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN customers AS t4 ON t3.customerNumber = t4.customerNumber INNER JOIN employees AS t5 ON t4.salesRepEmployeeNumber = t5.employeeNumber WHERE t1.productName = '1969 Harley Davidson Ultimate Chopper' GROUP BY t5.lastName, t5.firstName"
    },
    {
        "db_id": "car_retails",
        "question": "Who are the sales representatives in New York City? List their full names.",
        "evidence": "New York City refers to city = 'NYC'; sales representative refers to jobTitle = 'Sales Rep';",
        "SQL": "SELECT t1.lastName, t1.firstName FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.city = 'NYC' AND t1.jobTitle = 'Sales Rep'"
    },
    {
        "db_id": "car_retails",
        "question": "Identify the customer and list down the country with the check number GG31455.",
        "evidence": "",
        "SQL": "SELECT t2.customerName, t2.country FROM payments AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.checkNumber = 'GG31455'"
    },
    {
        "db_id": "car_retails",
        "question": "How many 2001 Ferrari Enzo were ordered?",
        "evidence": "2001 Ferrari Enzo refers to productName;",
        "SQL": "SELECT SUM(t1.orderNumber) FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode WHERE t2.productName = '2001 Ferrari Enzo'"
    },
    {
        "db_id": "car_retails",
        "question": "Which 5 products has the lowest amount of orders? List the product names.",
        "evidence": "The lowest amount of orders refers to MIN(quantityOrdered);",
        "SQL": "SELECT t2.productName FROM orderdetails AS t1 INNER JOIN products AS t2 ON t1.productCode = t2.productCode GROUP BY t2.productName ORDER BY SUM(t1.quantityOrdered) ASC LIMIT 5"
    },
    {
        "db_id": "car_retails",
        "question": "List down the customer names with a disputed order status.",
        "evidence": "",
        "SQL": "SELECT t1.customerName FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'Disputed'"
    },
    {
        "db_id": "car_retails",
        "question": "How many countries from the USA have an In Process order status?",
        "evidence": "country = 'USA'",
        "SQL": "SELECT COUNT(t2.orderNumber) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.status = 'On Hold' AND t1.country = 'USA'"
    },
    {
        "db_id": "car_retails",
        "question": "Calculate the total price of shipped orders belonging to Land of Toys Inc. under the classic car line of products.",
        "evidence": "SUM(MULTIPLY(quantityOrdered, priceEach)) where productLine = 'Classic Cars'; status = 'Shipped'; customername = 'Land of Toys Inc';",
        "SQL": "SELECT SUM(t3.priceEach * t3.quantityOrdered) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customerNumber = t2.customerNumber INNER JOIN orderdetails AS t3 ON t2.orderNumber = t3.orderNumber INNER JOIN products AS t4 ON t3.productCode = t4.productCode WHERE t4.productLine = 'Classic Cars' AND t1.customerName = 'Land of Toys Inc.' AND t2.status = 'Shipped'"
    },
    {
        "db_id": "retails",
        "question": "How many kinds of items are returned in order no.5?",
        "evidence": "returned refer to l_returnflag = 'R'; order no.5 refers to l_orderkey = 5; kinds of items refer to l_linenumber;",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_orderkey = 5 AND l_returnflag = 'R'"
    },
    {
        "db_id": "retails",
        "question": "When was the latest date the items of order no.1 were shipped?",
        "evidence": "order no.1 refers to l_orderkey = 1; the latest date shipped refers to MAX(l_shipdate);",
        "SQL": "SELECT MAX(l_shipdate) FROM lineitem WHERE l_orderkey = 1"
    },
    {
        "db_id": "retails",
        "question": "Which order has a higher priority, order no. 4 or order no. 36?",
        "evidence": "earlier orderdate have higher priority in delivery; which order no. 4 or order no. 36 refers to o_orderkey in (4, 36) where MIN(o_orderdate);",
        "SQL": "SELECT l_orderkey FROM lineitem WHERE l_orderkey IN (4, 36) ORDER BY l_shipdate DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What is the comment of the order with the highest total price?",
        "evidence": "the highest total price refers to MAX(o_totalprice); comment of the order refers to o_comment;",
        "SQL": "SELECT o_comment FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )"
    },
    {
        "db_id": "retails",
        "question": "What is the phone number of Customer#000000001?",
        "evidence": "customer phone refers to c_phone; Customer#000000001 refers to c_name;",
        "SQL": "SELECT c_phone FROM customer WHERE c_name = 'Customer#000000001'"
    },
    {
        "db_id": "retails",
        "question": "How many orders in total have the customers in the household segment made?",
        "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD';",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question": "Among all the orders made by a customer in the household segment, what is the highest total price?",
        "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the highest total price refers to MAX(o_totalprice);",
        "SQL": "SELECT MAX(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question": "Please list the order comments of all the orders made by customers in the household segment.",
        "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; order comments refer to o_comment;",
        "SQL": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question": "Please give the name of the customer who has made the single order with the highest total price.",
        "evidence": "name of the customer refers to c_name; single order with the highest total price refers to MAX(o_totalprice) LIMIT 1;",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "Please list the order keys of all the orders made by a customer whose account is in debt.",
        "evidence": "account is in debt if c_acctbal < 0;",
        "SQL": "SELECT T1.o_orderkey FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "Among the orders made by customers in the household segment, how many of them are urgent?",
        "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; the order is urgent if o_orderpriority = '1-URGENT' ;",
        "SQL": "SELECT COUNT(T1.o_orderpriority) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD' AND T1.o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question": "How many customers are in Brazil?",
        "evidence": "Brazil is the name of the nation which refers to n_name = 'BRAZIL'",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL'"
    },
    {
        "db_id": "retails",
        "question": "Please list the phone numbers of all the customers in the household segment and are in Brazil.",
        "evidence": "phone numbers refer to c_phone; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; household segment refers to c_mktsegment = 'HOUSEHOLD';",
        "SQL": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'BRAZIL'"
    },
    {
        "db_id": "retails",
        "question": "Among all the customers in Germany, how many of them have an account balance of over 1000?",
        "evidence": "Germany is the name of the nation which refers to n_name = 'GERMANY'; account balance of over 1000 refers to c_acctbal > 1000;",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.c_acctbal > 1000"
    },
    {
        "db_id": "retails",
        "question": "How many orders in total are made by customers in Germany?",
        "evidence": "orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY';",
        "SQL": "SELECT COUNT(T2.c_custkey) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question": "What is the total price of all the orders made by customers in Germany?",
        "evidence": "orders refer to o_orderkey; total price refers to o_totalprice; Germany is the name of the nation which refers to n_name = 'GERMANY';",
        "SQL": "SELECT SUM(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question": "Among the orders made by customers in Germany, which one of them has the highest priority in delivery? Please give its order key.",
        "evidence": "orders refer to o_orderkey; Germany is the name of the nation which refers to n_name = 'GERMANY'; earlier orderdate have higher priority in delivery therefore MIN(o_orderdate);",
        "SQL": "SELECT T3.o_orderkey FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY' ORDER BY T3.o_orderdate LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What is the average price of the orders made by a customer in Germany?",
        "evidence": "DIVIDE(SUM(o_totalprice), COUNT(o_orderkey)) where n_name = 'GERMANY';",
        "SQL": "SELECT AVG(T3.o_totalprice) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN orders AS T3 ON T2.c_custkey = T3.o_custkey WHERE T1.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question": "Among all the customers, what is the percentage of the customer's nation being Germany?",
        "evidence": "DIVIDE(COUNT(c_custkey when n_name = 'GERMANY'), COUNT(c_custkey)) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey"
    },
    {
        "db_id": "retails",
        "question": "How many countries are there in the No.2 region?",
        "evidence": "No.2 region refers to n_regionkey = 2;",
        "SQL": "SELECT COUNT(n_nationkey) FROM nation WHERE n_regionkey = 2"
    },
    {
        "db_id": "retails",
        "question": "Which country does supplier No.34 come from?",
        "evidence": "supplier No.34 refers to s_suppkey = 34; country refers to n_name;",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 34"
    },
    {
        "db_id": "retails",
        "question": "Which region does \"Supplier#000000129\" belong to?",
        "evidence": "\"Supplier#000000129\" is the name of the supplier which refers to s_name; Which region refers to r_name;",
        "SQL": "SELECT T3.r_name FROM nation AS T1 INNER JOIN supplier AS T2 ON T1.n_nationkey = T2.s_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.s_name = 'Supplier#000000129'"
    },
    {
        "db_id": "retails",
        "question": "What is the nationality of \"Customer#000000055\"?",
        "evidence": "\"Customer#000000055\" is the name of the customer which refers to c_name; nationality is the state of belonging to a particular country, therefore nationality refers to n_name;",
        "SQL": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_name = 'Customer#000000055'"
    },
    {
        "db_id": "retails",
        "question": "Give customer No.106936's region name.",
        "evidence": "\"Customer#000000055\" is the name of the customer which refers to c_name; region name refers to r_name;",
        "SQL": "SELECT T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_custkey = 106936"
    },
    {
        "db_id": "retails",
        "question": "Give the number of Moroccan customers whose account is in debt.",
        "evidence": "account is in debt if c_acctbal < 0; Moroccan customers refer to c_name WHERE n_name = 'MOROCCO';",
        "SQL": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'MOROCCO' AND T1.c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "For the order with the total price of 231499.38, what was the discounted price for supplier No. 9397?",
        "evidence": "MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)) where o_totalprice = 231499.38 AND l_suppkey = 9397;",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) AS DISCOUNTERPRICE FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE T1.l_suppkey = 9397 AND T2.o_totalprice = 231499.38"
    },
    {
        "db_id": "retails",
        "question": "For the order with the total price of 218195.43, which supplier handled the returned item? Give the supplier id.",
        "evidence": "returned item refers to l_returnflag = 'R'; supplier id refers to l_suppkey; order with the total price of 218195.43 refers to o_totalprice = 218195.43;",
        "SQL": "SELECT T2.l_suppkey FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_totalprice = 218195.43 AND T2.l_returnflag = 'R'"
    },
    {
        "db_id": "retails",
        "question": "Clerk#000000936 dealt with a \"Not Specified\" order on 1995/3/13, what was the charge for the part of the order shipped by truck?",
        "evidence": "MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax)) WHERE o_clerk = 'Clerk#000000936', o_orderstatus = '4-NOT SPECIFIED', o_orderdate = '1995-03-13' AND l_shipmode = 'TRUCK';",
        "SQL": "SELECT T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax) AS num FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_clerk = 'Clerk#000000936' AND T2.l_shipmode = 'TRUCK' AND T1.o_orderstatus = '4-NOT SPECIFIED' AND T1.o_orderdate = '1995-03-13'"
    },
    {
        "db_id": "retails",
        "question": "Customer No.129301 made an order on 1996/7/27, what was the delivery time for the first part of that order?",
        "evidence": "SUBTRACT(l_receiptdate, l_commitdate) WHERE o_orderdate = '1996-07-27' AND o_custkey = '129301';",
        "SQL": "SELECT JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = '129301' AND T1.o_orderdate = '1996-07-27'"
    },
    {
        "db_id": "retails",
        "question": "Give the name of the customer who made an order with Clerk#000000803 on 1997/12/10.",
        "evidence": "name of the customer refers to c_name; o_clerk = 'Clerk#000000803'; order on 1997/12/10 refers to o_orderdate = '1997-12-10';",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate = '1997-12-10' AND T1.o_clerk = 'Clerk#000000803'"
    },
    {
        "db_id": "retails",
        "question": "Calculates the profit processed by Supplier No. 7414 on order No. 817154.",
        "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) WHERE l_suppkey = 7414 AND l_orderkey = 817154;",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_suppkey = 7414 AND T1.l_orderkey = 817154"
    },
    {
        "db_id": "retails",
        "question": "Which country has the most number of suppliers whose account is in debt?",
        "evidence": "country refers to n_name; the most number of suppliers whose account is in debt refers to MAX(SUM(s_acctbal < 0));",
        "SQL": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T2.n_name ) AS T ORDER BY T.num LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What is the percentage of the European countries among the given countries?",
        "evidence": "DIVIDE(COUNT(n_name where r_name = 'EUROPE'), COUNT(n_name)) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T2.r_name = 'EUROPE', 1, 0)) AS REAL) * 100 / COUNT(T1.n_name) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey"
    },
    {
        "db_id": "retails",
        "question": "Give the percentage of Japanese suppliers whose account is in debt.",
        "evidence": "account is in debt if s_acctbal < 0; DIVIDE(COUNT(s_acctbal < 0 where n_name = 'JAPAN'), COUNT(s_name where n_name = 'JAPAN')) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'JAPAN', 1, 0)) AS REAL) * 100 / COUNT(T1.s_name) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "What is the name of the customer with the highest amount of debt?",
        "evidence": "customer with the highest amount of debt refers to c_name where MIN(c_acctbal);",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )"
    },
    {
        "db_id": "retails",
        "question": "How many orders were shipped in 1998?",
        "evidence": "orders refer to l_orderkey; shipped in 1998 refers to year(l_shipdate) = 1998;",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1998'"
    },
    {
        "db_id": "retails",
        "question": "How many customers are in debt?",
        "evidence": "customers are in debt refer to c_custkey where c_acctbal < 0;",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "How many items that were shipped via air were returned in 1994?",
        "evidence": "items refer to l_linenumber; shipped via air in 1994 refers to year(l_shipdate) = 1994 where l_shipmode = 'AIR'; returned refer to l_returnflag = 'R';",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_returnflag = 'R' AND l_shipmode = 'AIR' AND STRFTIME('%Y', l_shipdate) = '1994'"
    },
    {
        "db_id": "retails",
        "question": "How many customers are in the automobile market segment?",
        "evidence": "automobile market segment refers to c_mktsegment = 'AUTOMOBILE';",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'AUTOMOBILE'"
    },
    {
        "db_id": "retails",
        "question": "What are the top 2 order keys of the item with the highest amount of extended price?",
        "evidence": "the highest amount of extended price refers to MAX(l_extendedprice);",
        "SQL": "SELECT l_orderkey FROM lineitem ORDER BY l_extendedprice DESC LIMIT 2"
    },
    {
        "db_id": "retails",
        "question": "When was the order with the highest amount of total price shipped?",
        "evidence": "when shipped refers to l_shipdate; the highest amount of total price refers to MAX(o_totalprice);",
        "SQL": "SELECT T2.l_shipdate FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "In which country do most of the customers come from?",
        "evidence": "country refers to n_name; most of the customers refer to MAX(COUNT(c_custkey));",
        "SQL": "SELECT T.n_name FROM ( SELECT T2.n_name, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "How many urgent orders were shipped the next day?",
        "evidence": "the order is urgent if o_orderpriority = '1-URGENT'; shipped the next day refers to SUBTRACT(l_shipdate, o_orderdate) = 1;",
        "SQL": "SELECT COUNT(T2.o_orderkey) FROM lineitem AS T1 INNER JOIN orders AS T2 ON T2.o_orderkey = T1.l_orderkey WHERE JULIANDAY(T1.l_shipdate) - JULIANDAY(T2.o_orderdate) = 1 AND T2.o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question": "How many in debt customers in the household market segment are from Russia?",
        "evidence": "in debt customers refer to c_custkey where c_acctbal < 0; c_mktsegment = 'HOUSEHOLD'; Russian is the name of the nation which refers to n_name = 'RUSSIA';",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'RUSSIA'"
    },
    {
        "db_id": "retails",
        "question": "How many suppliers are from Japan?",
        "evidence": "suppliers refer to s_nationkey; Japan is the name of the nation which refers to n_name = 'JAPAN';",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'"
    },
    {
        "db_id": "retails",
        "question": "How many orders shipped via ship have a medium priority?",
        "evidence": "orders shipped via ship refer to o_orderkey where l_shipmode = 'SHIP'; medium priority refers to o_orderpriority = '3-MEDIUM';",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'SHIP' AND T1.o_orderpriority = '3-MEDIUM'"
    },
    {
        "db_id": "retails",
        "question": "Among the customers from the United States, which market segment has the highest number of customers?",
        "evidence": "the highest number of customers refer to MAX(COUNT(c_custkey)); the United States is the name of the nation which refers to n_name = 'UNITED STATES'; market segment refers to c_mktsegment;",
        "SQL": "SELECT T.c_mktsegment FROM ( SELECT T1.c_mktsegment, COUNT(T1.c_custkey) AS num FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'UNITED STATES' GROUP BY T1.c_mktsegment ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What are the countries in the region of Asia?",
        "evidence": "countries in the region of Asia refer to n_name where r_name = 'ASIA';",
        "SQL": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'"
    },
    {
        "db_id": "retails",
        "question": "What are the names of the parts manufactured by manufacturer 3 that have a supply cost of 1,000?",
        "evidence": "names of the parts refer to p_name; manufacturer 3 refers to p_mfgr = 'Manufacturer#3'; ps_supplycost = 1000;",
        "SQL": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T1.ps_supplycost = 1000 AND T2.p_mfgr = 'Manufacturer#3'"
    },
    {
        "db_id": "retails",
        "question": "How many countries are there in the region whose comment description is \"asymptotes sublate after the r.\"",
        "evidence": "r_comment = 'asymptotes sublate after the r'; countries refer to n_nationkey;",
        "SQL": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'asymptotes sublate after the r'"
    },
    {
        "db_id": "retails",
        "question": "Among the products manufactured by manufacturer 5 that have a retail price of no more than 1,000, how many products were shipped via rail?",
        "evidence": "manufacturer 5 refers to p_mfgr = 'Manufacturer#5'; retail price of no more than 1,000 refers to p_retailprice < 1000; shipped via rail refers to shipmode = 'RAIL';",
        "SQL": "SELECT COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_mfgr = 'Manufacturer#5' AND T3.p_retailprice < 1000 AND T2.l_shipmode = 'RAIL'"
    },
    {
        "db_id": "retails",
        "question": "How much is the profit for smoke turquoise purple blue salmon that was delivered in person on 5/7/1996?",
        "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'smoke turquoise purple blue salmon' and l_receiptdate = '1996-05-07' and l_shipinstruct = 'DELIVER IN PERSON';",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity AS num FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey INNER JOIN part AS T3 ON T2.ps_partkey = T3.p_partkey WHERE T1.l_receiptdate = '1996-05-07' AND T1.l_shipinstruct = 'DELIVER IN PERSON' AND T3.p_name = 'smoke turquoise purple blue salmon'"
    },
    {
        "db_id": "retails",
        "question": "What is the average price before discount of the top 10 orders with the highest total price?",
        "evidence": "DIVIDE(SUM(l_extendedprice), 10) where MAX(o_totalprice);",
        "SQL": "SELECT SUM(T2.l_extendedprice) / 10 FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 10"
    },
    {
        "db_id": "retails",
        "question": "Identify the names of the top 3 customers with the highest number of orders of all time and calculate for the average total price per order of each customers.",
        "evidence": "customers with the highest number of orders refer to c_name where MAX(COUNT(o_orderkey)); DIVIDE(SUM(o_totalprice), COUNT(o_orderkey));",
        "SQL": "SELECT T.c_name, T.res FROM ( SELECT T2.c_name, SUM(T1.o_totalprice) / COUNT(T1.o_orderkey) AS res , COUNT(T1.o_orderkey) AS num FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey GROUP BY T1.o_custkey ) AS T ORDER BY T.num DESC LIMIT 3"
    },
    {
        "db_id": "retails",
        "question": "How many items were shipped on 4th December, 1993?",
        "evidence": "items shipped on 4th December, 1993 refer to l_linenumber where l_shipdate = '1993-12-04';",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipdate = '1993-12-04'"
    },
    {
        "db_id": "retails",
        "question": "What was the order date of items with the highest total price?",
        "evidence": "the highest total price refers to MAX(o_totalprice);",
        "SQL": "SELECT o_orderdate FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )"
    },
    {
        "db_id": "retails",
        "question": "Calculate the percentage of customers' accounts in debt.",
        "evidence": "DIVIDE(COUNT(c_custkey where c_acctbal < 0), COUNT(c_custkey)) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(c_acctbal < 0, 1, 0)) AS REAL) * 100 / COUNT(c_custkey) FROM customer"
    },
    {
        "db_id": "retails",
        "question": "How many part supplies were nearly out of stock?",
        "evidence": "supplies nearly out of stock refer to ps_partkey where ps_availqty < 10;",
        "SQL": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10"
    },
    {
        "db_id": "retails",
        "question": "Calculate the percentage of manufactured parts by Manufacturer#3.",
        "evidence": "DIVIDE(COUNT(p_partkey where p_mfgr = 'Manufacturer#3'), COUNT(p_partkey)) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(p_mfgr = 'Manufacturer#3', 1, 0)) AS REAL) * 100 / COUNT(p_partkey) FROM part"
    },
    {
        "db_id": "retails",
        "question": "List any five parts name in Medium Plated Brass.",
        "evidence": "p_type = 'MEDIUM PLATED BRASS'; parts name refer to p_name;",
        "SQL": "SELECT p_name FROM part WHERE p_type = 'MEDIUM PLATED BRASS' LIMIT 5"
    },
    {
        "db_id": "retails",
        "question": "Among the orders shipped in November, 1998 by air, how many orders were urgent?",
        "evidence": "orders shipped in November, 1998 refer to o_orderkey where l_shipdate LIKE '1998-11-%'; by air refers to l_shipmode = 'AIR'; the order is urgent if o_orderpriority = '1-URGENT' ;",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'AIR' AND T1.o_orderpriority = '1-URGENT' AND SUBSTR(T2.l_shipdate, 1, 7) = '1998-11'"
    },
    {
        "db_id": "retails",
        "question": "How many customers are there in India?",
        "evidence": "customers refer to c_custkey; India is the name of the nation which refers to n_name = 'INDIA';",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDIA'"
    },
    {
        "db_id": "retails",
        "question": "Among the customers from Morocco, how many customers were in debt?",
        "evidence": "customers refer to c_custkey; Morocco is the name of the nation which refers to n_name = 'MOROCCO'; in debt refers to c_acctbal < 0;",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T2.n_name = 'MOROCCO'"
    },
    {
        "db_id": "retails",
        "question": "List down the nation keys and names in Africa.",
        "evidence": "Africa refers to r_name = 'Africa';",
        "SQL": "SELECT T1.n_name, T1.n_nationkey FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'AFRICA'"
    },
    {
        "db_id": "retails",
        "question": "Calculate the total price of orders by Customer#000000013.",
        "evidence": "Customer#000000013 is the name of the customer which refers to c_name;",
        "SQL": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_name = 'Customer#000000013'"
    },
    {
        "db_id": "retails",
        "question": "How many items did Customer#000021159 order? Calculate those items total charges.",
        "evidence": "items Customer#000021159 order refer to l_linenumber where c_name = 'Customer#000021159'; SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where c_name = 'Customer#000021159';",
        "SQL": "SELECT COUNT(T2.o_orderkey), SUM(T3.l_extendedprice * (1 - T3.l_discount) * (1 + T3.l_tax)) FROM customer AS T1 INNER JOIN orders AS T2 ON T1.c_custkey = T2.o_custkey INNER JOIN lineitem AS T3 ON T2.o_orderkey = T3.l_orderkey WHERE T1.c_name = 'Customer#000021159' GROUP BY T3.l_linenumber"
    },
    {
        "db_id": "retails",
        "question": "Calculate the total profit made by chocolate floral blue coral cyan.",
        "evidence": "SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))) where p_name = 'chocolate floral blue coral cyan';",
        "SQL": "SELECT SUM(T3.l_extendedprice * (1 - T3.l_discount) - T2.ps_supplycost * T3.l_quantity) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_partkey = T3.l_partkey AND T2.ps_suppkey = T3.l_suppkey WHERE T1.p_name = 'chocolate floral blue coral cyan'"
    },
    {
        "db_id": "retails",
        "question": "Calculate the percentage of suppliers in Germany.",
        "evidence": "DIVIDE(COUNT(s_suppkey where n_name = 'GERMANY'), COUNT(s_suppkey)) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'GERMANY', 1, 0)) AS REAL) * 100 / COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "List the suppliers' names which supplied smoke red pale saddle plum.",
        "evidence": "p_name = 'smoke red pale saddle plum'; the suppliers' names refer to s_name;",
        "SQL": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'smoke red pale saddle plum'"
    },
    {
        "db_id": "retails",
        "question": "Among the suppliers from Middle East region, how many suppliers were in debt?",
        "evidence": "suppliers from Middle East region refer to s_name where r_name = 'MIDDLE EAST'; in debt refers to s_acctbal < 0;",
        "SQL": "SELECT COUNT(T3.s_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T3.s_acctbal < 0 AND T1.r_name = 'MIDDLE EAST'"
    },
    {
        "db_id": "retails",
        "question": "Among the parts shipped by rail on 1st December, 1995, list part names with 10% discount.",
        "evidence": "shipped by rail on 1st December, 1995 refers to l_shipmode = 'RAIL' where l_shipdate = '1995-12-01'; part names with 10% discount refer to p_name where l_discount = 0.1;",
        "SQL": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN lineitem AS T3 ON T1.ps_partkey = T3.l_partkey WHERE T3.l_discount = 0.1 AND T3.l_shipdate = '1995-12-01' AND T3.l_shipmode = 'RAIL'"
    },
    {
        "db_id": "retails",
        "question": "Among the parts supplied by Supplier#000000018, provide parts names which had supply costs above 900.",
        "evidence": "Supplier#000000018 is the name of supplier which refers to s_name; supply costs above 900 refer to ps_supplycost > 900;",
        "SQL": "SELECT T2.p_name FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey INNER JOIN supplier AS T3 ON T1.ps_suppkey = T3.s_suppkey WHERE T1.ps_supplycost > 900 AND T3.s_name = 'Supplier#000000018'"
    },
    {
        "db_id": "retails",
        "question": "How many orders were shipped in 1994?",
        "evidence": "orders shipped in 1994 refer to l_orderkey where year(l_shipdate) = 1994;",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994'"
    },
    {
        "db_id": "retails",
        "question": "How many of the line items have been shipped by rail with a quantity less than 30?",
        "evidence": "shipped by rail refers to l_shipmode = 'RAIL'; quantity less than 30 refers to l_quantity < 30;",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity < 30 AND l_shipmode = 'RAIL'"
    },
    {
        "db_id": "retails",
        "question": "Among the customers in the furniture market segment, how many of them have a nation key of 1?",
        "evidence": "furniture market segment refers to c_mktsegment = 'FURNITURE';",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE' AND c_nationkey = 1"
    },
    {
        "db_id": "retails",
        "question": "Give the phone number of the customer with the highest account balance.",
        "evidence": "phone number of the customer refers to c_phone; the highest account balance refers to MAX(c_acctbal);",
        "SQL": "SELECT c_phone FROM customer ORDER BY c_acctbal DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What is the order priority of the order with the highest total price?",
        "evidence": "order with the highest total price refers to MAX(o_totalprice);",
        "SQL": "SELECT o_orderpriority FROM orders WHERE o_totalprice = ( SELECT MAX(o_totalprice) FROM orders )"
    },
    {
        "db_id": "retails",
        "question": "What is the total number of orders made by customers in United States?",
        "evidence": "orders refer to o_orderkey; the United States is the name of the nation which refers to n_name = 'UNITED STATES';",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey INNER JOIN nation AS T3 ON T2.c_nationkey = T3.n_nationkey WHERE T3.n_name = 'UNITED STATES'"
    },
    {
        "db_id": "retails",
        "question": "Among the customers from Brazil, how many customers are in automobile market segment?",
        "evidence": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; c_mktsegment = 'automobile';",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'AUTOMOBILE' AND T2.n_name = 'BRAZIL'"
    },
    {
        "db_id": "retails",
        "question": "Provide the order comments for at least 5 orders made by customers in the furniture segment.",
        "evidence": "order comments refer to o_comment; c_mktsegment = 'Furniture';",
        "SQL": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'Furniture' LIMIT 5"
    },
    {
        "db_id": "retails",
        "question": "List down the countries that are located in Asia.",
        "evidence": "countries in Asia refer to n_name where r_name = 'ASIA';",
        "SQL": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_name = 'ASIA'"
    },
    {
        "db_id": "retails",
        "question": "Name the countries that belong in the region with comment description \"furiously express accounts wake sly\".",
        "evidence": "r_comment = 'furiously express accounts wake sly';",
        "SQL": "SELECT T1.n_name FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey WHERE T2.r_comment = 'furiously express accounts wake sly'"
    },
    {
        "db_id": "retails",
        "question": "What is the total number of suppliers from Germany?",
        "evidence": "suppliers refer to s_suppkey; Germany is the name of the nation which refers to n_name = 'GERMANY';",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question": "Among the customers in Asia, how many customers are in debt?",
        "evidence": "customers in Asia refer to n_name where r_name = 'ASIA'; customers in debt refer to c_acctbal < 0;",
        "SQL": "SELECT COUNT(T1.n_name) FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_acctbal < 0 AND T3.r_name = 'ASIA'"
    },
    {
        "db_id": "retails",
        "question": "Provide the phone number of the customer with the highest total price in an order.",
        "evidence": "phone number of the customer refers to c_phone; the highest total price refers to MAX(o_totalprice);",
        "SQL": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey ORDER BY T1.o_totalprice DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "Among the products that have a retail price greater than 1,000, how many products were shipped via ship?",
        "evidence": "products refer to l_partkey; retail price greater than 1,000 refers to p_retailprice > 1000; shipped via ship refers to l_shipmode = 'SHIP';",
        "SQL": "SELECT COUNT(T1.ps_suppkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_retailprice > 1000 AND T2.l_shipmode = 'SHIP'"
    },
    {
        "db_id": "retails",
        "question": "What is the name and marketing segment of the customer with the total order price of 199180.63?",
        "evidence": "name of the customer refers to c_name; total order price of 199180.63 refers o_totalprice = 199180.63; marketing segment refers to c_mktsegment;",
        "SQL": "SELECT T2.c_name, T2.c_mktsegment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 199180.63"
    },
    {
        "db_id": "retails",
        "question": "Provide the nation and region of the customer with the address of wH55UnX7 VI?",
        "evidence": "nation refers to n_name; region refers to r_name; address of wH55UnX7 VI refers to c_address = 'wH55UnX7 VI';",
        "SQL": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_address = 'wH55UnX7 VI'"
    },
    {
        "db_id": "retails",
        "question": "Among all the customers in Brazil, how many of them have an account balance of less than 1000?",
        "evidence": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; account balance of less than 1000 refers to c_acctbal < 1000;",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL' AND T1.c_acctbal < 1000"
    },
    {
        "db_id": "retails",
        "question": "List the country name of the customers in the building marketing segment with an account balance greater than 80% of the average account balance of all customers.",
        "evidence": "country name refers to n_name; building marketing segment refers to c_mktsegment = 'BUILDING'; account balance greater than 80% of the average account balance of all customers refers to c_acctbal > MULTIPLY(AVG(c_acctbal), 0.8);",
        "SQL": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN ( SELECT AVG(c_acctbal) * 0.8 AS avg_acctbal FROM customer ) AS T3 WHERE T1.c_acctbal > T3.avg_acctbal"
    },
    {
        "db_id": "retails",
        "question": "Among the customers with an account balance lower than 4000, what is the percentage of the customers in the US?",
        "evidence": "DIVIDE(COUNT(c_custkey where n_name = 'United States' and c_acctbal < 4000), COUNT(c_custkey where c_acctbal < 4000)) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'United States', 1, 0)) AS REAL) * 100 / COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 4000"
    },
    {
        "db_id": "retails",
        "question": "Give the name and phone number of the customers who have more than 9000 account balance.",
        "evidence": "the name of the customer refers to c_name; phone number of the customer refers to c_phone; have more than 9000 account balance refers to c_acctbal > 9000;",
        "SQL": "SELECT c_name, c_phone FROM customer WHERE c_acctbal > 9000"
    },
    {
        "db_id": "retails",
        "question": "What is the average number of items shipped each day in April of 1994?",
        "evidence": "AVG(l_linenumber) where l_shipdate between '1994-01-01' and '1994-01-30';",
        "SQL": "SELECT AVG(l_linenumber) FROM lineitem WHERE l_shipdate BETWEEN '1994-01-01' AND '1994-01-30'"
    },
    {
        "db_id": "retails",
        "question": "List the order key of the orders with a total price between 200000 and 300000.",
        "evidence": "orders with a total price between 200000 and 300000 refer to o_totalprice between 200000 and 300000;",
        "SQL": "SELECT o_orderkey FROM orders WHERE o_totalprice BETWEEN 200000 AND 300000"
    },
    {
        "db_id": "retails",
        "question": "Find and list the part key of the parts which has an above-average retail price.",
        "evidence": "part key of the parts which has an above-average retail price refer to p_partkey where p_retailprice > AVG(p_retailprice);",
        "SQL": "SELECT p_partkey FROM part WHERE p_retailprice > ( SELECT AVG(p_retailprice) FROM part )"
    },
    {
        "db_id": "retails",
        "question": "Calculate the percentage of part supply that costs more than 500.",
        "evidence": "DIVIDE(COUNT(ps_suppkey where ps_supplycost > 500)), COUNT(ps_suppkey) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(ps_supplycost > 500, 1, 0)) AS REAL) * 100 / COUNT(ps_suppkey) FROM partsupp"
    },
    {
        "db_id": "retails",
        "question": "Find the supply key of the top ten suppliers with the most account balance, and list the supply key along with the account balance in descending order of account balance.",
        "evidence": "supply key refers to s_suppkey; the most amount account balance refers to MAX(s_acctbal);",
        "SQL": "SELECT s_suppkey, s_acctbal FROM supplier ORDER BY s_acctbal DESC LIMIT 10"
    },
    {
        "db_id": "retails",
        "question": "How many customers who are not in debt ordered an urgent order?",
        "evidence": "customers who are not in debt refer to c_custkey where c_acctbal > 0; the order is urgent if o_orderpriority = '1-URGENT' ;",
        "SQL": "SELECT COUNT(T2.c_custkey) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_acctbal > 0 AND T1.o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question": "List the name and phone number of customers in India who have an above-average account balance.",
        "evidence": "name of customer refers to c_name; phone number of customer refers to c_phone; customers in India who have an above-average account balance refer to n_name = 'INDIA' and c_acctbal > AVG(c_acctbal);",
        "SQL": "SELECT T1.c_name, T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > ( SELECT AVG(c_acctbal) FROM customer ) ORDER BY T1.c_name"
    },
    {
        "db_id": "retails",
        "question": "In the parts supply by Supplier#000000654, list the top five parts with the most supply cost in descending order of supply cost.",
        "evidence": "Supplier#000000654 is the name of the supplier which refers to s_name; parts with the most supply cost refer to ps_partkey where MAX(ps_supplycost);",
        "SQL": "SELECT T2.ps_partkey FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey WHERE T1.s_name = 'Supplier#000000654' ORDER BY T2.ps_supplycost DESC LIMIT 5"
    },
    {
        "db_id": "retails",
        "question": "What percentage of customers from France is in the automobile segment?",
        "evidence": "DIVIDE(COUNT(c_name where c_mktsegment = 'AUTOMOBILE' and n_name = 'FRANCE'), COUNT(c_name where n_name = 'FRANCE')) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'AUTOMOBILE', 1, 0)) AS REAL) * 100 / COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'FRANCE'"
    },
    {
        "db_id": "retails",
        "question": "Name the part which is most profitable.",
        "evidence": "profit can be calculated as SUBTRACT(MULTIPLY(l_extendedprice, (SUBTRACT(1, l_discount)), MULTIPLY(ps_supplycost, l_quantity))); part which is most profitable refers to p_name where MAX(profit);",
        "SQL": "SELECT T.p_name FROM ( SELECT T3.p_name , T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity AS num FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "List the names of the countries with the below-average number of customers in ascending order of customer numbers.",
        "evidence": "the names of countries with the below-average number of customers refer to n_name where COUNT(c_name) < DIVIDE(COUNT(c_name)), COUNT(n_name);",
        "SQL": "SELECT T2.n_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey GROUP BY T2.n_name HAVING COUNT(T1.c_name) > ( SELECT COUNT(customer.c_name) / COUNT(DISTINCT nation.n_name) FROM customer INNER JOIN nation ON customer.c_nationkey = nation.n_nationkey ) ORDER BY COUNT(T1.c_name)"
    },
    {
        "db_id": "retails",
        "question": "What percentage of customers from the African region is in the household segment?",
        "evidence": "DIVIDE(COUNT(c_custkey where c_mktsegment = 'HOUSEHOLD' and r_name = 'AFRICA'), COUNT(c_custkey where r_name = 'AFRICA')) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T2.r_name = 'AFRICA', 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN customer AS T3 ON T1.n_nationkey = T3.c_nationkey WHERE T3.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question": "List the name of the top ten items with the most quantity available in the descending order of availability.",
        "evidence": "items with the most quantity available refer to p_name where MAX(ps_availqty);",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey ORDER BY T2.ps_availqty DESC LIMIT 10"
    },
    {
        "db_id": "retails",
        "question": "Calculate the difference in the average retail price of parts shipped via ship and air.",
        "evidence": "SUBTRACT(DIVIDE(SUM(p_retailprice where l_shipmode = 'SHIP'), COUNT(l_shipmode = 'SHIP')), DIVIDE(SUM(p_retailprice where l_shipmode = 'AIR'), COUNT(l_shipmode = 'AIR')));",
        "SQL": "SELECT (CAST(SUM(IIF(T3.l_shipmode = 'SHIP', T1.p_retailprice, 0)) AS REAL) / SUM(IIF(T3.l_shipmode = 'SHIP', 1, 0))) - (CAST(SUM(IIF(T3.l_shipmode = 'AIR', T1.p_retailprice, 0)) AS REAL) / SUM(IIF(T3.l_shipmode = 'AIR', 1, 0))) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_suppkey = T3.l_suppkey"
    },
    {
        "db_id": "retails",
        "question": "What is the average discount for the parts made by Manufacturer#5?",
        "evidence": "DIVIDE(SUM(l_discount), COUNT(l_partkey)) where p_mfgr = 'Manufacturer#5';",
        "SQL": "SELECT AVG(T3.l_discount) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN lineitem AS T3 ON T2.ps_suppkey = T3.l_suppkey WHERE T1.p_mfgr = 'Manufacturer#5'"
    },
    {
        "db_id": "retails",
        "question": "In the parts shipped by rail, how many are of medium priority?",
        "evidence": "parts shipped by rail refer to l_partkey where l_shipmode = 'RAIL'; medium priority refers to o_orderpriority = '3-MEDIUM';",
        "SQL": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'RAIL' AND T1.o_orderpriority = '3-MEDIUM'"
    },
    {
        "db_id": "retails",
        "question": "Among the suppliers in the European region, what percentage have a below-average account balance?",
        "evidence": "DIVIDE(COUNT(s_acctbal < AVG(s_acctbal)), COUNT(s_suppkey)) as percentage where r_name = 'EUROPE';",
        "SQL": "SELECT CAST(SUM(IIF(T3.s_acctbal < ( SELECT AVG(supplier.s_acctbal) FROM supplier ), 1, 0)) AS REAL) * 100 / COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'"
    },
    {
        "db_id": "retails",
        "question": "Calculate the difference in the average number of low-priority orders shipped by truck in each month of 1995 and 1996.",
        "evidence": "SUBTRACT(DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1995), 12), DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1996), 12)) where o_orderpriority = '5-LOW';",
        "SQL": "SELECT (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1995, 1, 0)) AS REAL) / 12) - (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1996, 1, 0)) AS REAL) / 12) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderpriority = '5-LOW' AND T2.l_shipmode = 'TRUCK'"
    },
    {
        "db_id": "retails",
        "question": "List by their id all customers who have a debit balance in their accounts.",
        "evidence": "customers who have a debt balance refer to c_custkey where c_acctbal < 0;",
        "SQL": "SELECT c_custkey FROM customer WHERE c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "List by order number the 3 items with the lowest price after applying the discount.",
        "evidence": "order number refers to l_orderkey; the lowest price after applying the discount refers to MIN(MULTIPLY(l_extendedprice), SUBTRACT(1, l_discount));",
        "SQL": "SELECT l_orderkey FROM lineitem ORDER BY l_extendedprice * (1 - l_discount) LIMIT 3"
    },
    {
        "db_id": "retails",
        "question": "How many orders of more than 10 items have been returned?",
        "evidence": "more than 10 items have been returned refer to l_returnflag = 'R' where l_quantity > 10; orders refer to l_orderkey;",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 10 AND l_returnflag = 'R'"
    },
    {
        "db_id": "retails",
        "question": "What is the total price charged for orders shipped by air without shipping instructions?",
        "evidence": "SUM(MULTIPLY(MULTIPLY(l_extendedprice, SUBTRACT(1, l_discount)), SUM(1, l_tax))) where l_shipmode = 'AIR' and l_shipinstruct = 'NONE';",
        "SQL": "SELECT l_extendedprice * (1 - l_discount) * (1 + l_tax) AS totalprice FROM lineitem WHERE l_shipmode = 'AIR' AND l_shipinstruct = 'NONE'"
    },
    {
        "db_id": "retails",
        "question": "Of the orders with a lower delivery priority, how many have an urgent priority order?",
        "evidence": "an urgent priority order refers to o_orderkey where o_orderpriority = '1-URGENT'; earlier orderdate have higher priority in delivery; lower delivery priority refers to MAX(o_orderdate);",
        "SQL": "SELECT COUNT(o_orderkey) FROM orders WHERE o_orderpriority = '1-URGENT' GROUP BY o_orderdate ORDER BY o_orderdate DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "How many suppliers from Egypt have a debit balance?",
        "evidence": "suppliers refer to s_suppkey; Egypt is the name of the nation which refers to n_name = 'EGYPT'; the balance is in debt if s_acctbal < 0;",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'EGYPT'"
    },
    {
        "db_id": "retails",
        "question": "How many items shipped by REG AIR were ordered on March 22, 1995?",
        "evidence": "items shipped by REG AIR refer to l_linenumber where l_shipmode = 'REG AIR'; ordered on March 22, 1995 refers to o_orderdate = '1995-03-22';",
        "SQL": "SELECT COUNT(T1.o_orderkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'REG AIR' AND T1.o_orderdate = '1995-03-22'"
    },
    {
        "db_id": "retails",
        "question": "How many European suppliers are there?",
        "evidence": "European suppliers refer to s_suppkey where r_name = 'EUROPE';",
        "SQL": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE'"
    },
    {
        "db_id": "retails",
        "question": "To which segment belongs the customer that made the most orders in April 1994?",
        "evidence": "segment refers to c_mktsegment; customer made the most orders in April 1994 refers to c_custkey where o_orderdate LIKE '1994-04-%' and MAX(COUNT(o_orderkey));",
        "SQL": "SELECT T.c_mktsegment FROM ( SELECT T2.c_mktsegment, COUNT(T1.o_orderkey) AS num FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderdate LIKE '1994-04-%' GROUP BY T1.o_custkey ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "Lists all parts supplied by Supplier#000000034.",
        "evidence": "part refers to p_name; Supplier#000000034 refers to s_name = 'Supplier#000000034'",
        "SQL": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.s_name = 'Supplier#000000034'"
    },
    {
        "db_id": "retails",
        "question": "What are the cost prices of large burnished copper?",
        "evidence": "cost price refers to ps_supplycost; large burnished copper refers to p_type = 'LARGE BURNISHED COPPER'",
        "SQL": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'LARGE BURNISHED COPPER'"
    },
    {
        "db_id": "retails",
        "question": "How many clients from Mozambique required orders with a low priority order?",
        "evidence": "Mozambique refers to n_name = 'MOZAMBIQUE'; low priority order refers to o_orderpriority = '5-LOW'",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'MOZAMBIQUE' AND T3.o_orderpriority = '5-LOW'"
    },
    {
        "db_id": "retails",
        "question": "Indicate the name of the product that is close to being sold out and that has the lowest cost price.",
        "evidence": "name of the product refers to p_name; close to being sold out refers to ps_availqty < 10; the lowest cost price refers to min(ps_supplycost)",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty < 10 ORDER BY T2.ps_supplycost LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "How many different clerks have served the customer with the address uFTe2u518et8Q8UC?",
        "evidence": "clerk who have served the customer refers to o_clerk\n",
        "SQL": "SELECT COUNT(T1.o_clerk) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_address = 'uFTe2u518et8Q8UC'"
    },
    {
        "db_id": "retails",
        "question": "Indicate the name of the parts without discount.",
        "evidence": "name of the part refers to p_name; without discount refers to l_discount = 0.0000",
        "SQL": "SELECT T3.p_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T2.l_discount = 0.0000"
    },
    {
        "db_id": "retails",
        "question": "How many suppliers from Germany have left a comment with 'carefully regular packages'?",
        "evidence": "Germany is nation name which refers to n_name = 'GERMANY'; comment with 'carefully regular packages' refers to s_comment LIKE 'carefully regular packages%'",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'"
    },
    {
        "db_id": "retails",
        "question": "How many products shipped on 19/11/1994 were ordered on 21/09/1994?",
        "evidence": "shipped on 19/11/1994 refers to l_shipdate = '1994-11-19'; ordered on 21/09/1994 refers to o_orderdate = '1994-09-21'",
        "SQL": "SELECT COUNT(T2.l_partkey) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-09-21' AND T2.l_shipdate = '1994-11-19'"
    },
    {
        "db_id": "retails",
        "question": "Calculate the average profit of prom brushed steel products.",
        "evidence": "prom brushed steel refers to p_type = 'PROMO BRUSHED STEEL'; average profit = divide(sum(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))), count(ps_partkey))",
        "SQL": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity) / COUNT(T1.ps_partkey) FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "db_id": "retails",
        "question": "What percentage of customers engaged in the household segment are from Iran?",
        "evidence": "the household segment refers to c_mktsegment = 'HOUSEHOLD'; Iran is nation name which refers to n_name = 'IRAN'; percentage = divide(count(c_custkey where n_name = 'IRAN'), count(c_custkey)) where c_mktsegment = 'HOUSEHOLD' * 100%",
        "SQL": "SELECT CAST(SUM(IIF(T2.n_name = 'IRAN', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD'"
    },
    {
        "db_id": "retails",
        "question": "Please state the segment, the name, the address, and the phone number of customer number 3.",
        "evidence": "segment refers to c_mktsegment; name refers to c_name; address refers to c_address; phone number refers to c_phone; customer number 3 refers to c_custkey = 3",
        "SQL": "SELECT c_mktsegment, c_name, c_address, c_phone FROM customer WHERE c_custkey = 3"
    },
    {
        "db_id": "retails",
        "question": "Please list any three line item numbers that have 10% off.",
        "evidence": "line item number refers to l_linenumber; 10% off refers to l_discount = 0.1",
        "SQL": "SELECT l_linenumber FROM lineitem WHERE l_discount = 0.1 LIMIT 3"
    },
    {
        "db_id": "retails",
        "question": "How many of the line items that have a quantity greater than 40 have been shipped by air?",
        "evidence": "quantity greater than 40 refers to l_quantity > 40; shipped by air refers to l_shipmode = 'AIR'",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_quantity > 40 AND l_shipmode = 'AIR'"
    },
    {
        "db_id": "retails",
        "question": "Which ship mode has more \"deliver in person\" instructions, rail or mail?",
        "evidence": "ship mode refers to l_shipmode; \"deliver in person\" instruction refers to l_shipinstruct = 'DELIVER IN PERSON'",
        "SQL": "SELECT IIF(SUM(IIF(l_shipmode = 'RAIL', 1, 0)) - SUM(IIF(l_shipmode = 'MAIL', 1, 0)), 'RAIL', 'MAIL') AS result FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'"
    },
    {
        "db_id": "retails",
        "question": "What is the total price and the order priority of order number 33?",
        "evidence": "total price refers to o_totalprice; order priority refers to o_orderpriority; order number 33 refers to o_orderkey = 33",
        "SQL": "SELECT o_totalprice, o_orderpriority FROM orders WHERE o_orderkey = 33"
    },
    {
        "db_id": "retails",
        "question": "How many orders in 1998 had a total price under 950?",
        "evidence": "1998 refers to year(o_orderdate) = '1998'; a total price under 950 refers to o_totalprice < 950",
        "SQL": "SELECT COUNT(o_orderkey) AS countorders FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1998' AND o_totalprice < 950"
    },
    {
        "db_id": "retails",
        "question": "Please list any three customers with debt.",
        "evidence": "customer refers to c_name; with debt refers to c_acctbal < 0",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3"
    },
    {
        "db_id": "retails",
        "question": "What is the discounted price of line item number 1?",
        "evidence": "discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); line item number 1 refers to l_linenumber = 1",
        "SQL": "SELECT l_extendedprice * (1 - l_discount) FROM lineitem WHERE l_linenumber = 1"
    },
    {
        "db_id": "retails",
        "question": "What is the difference between the number of returned items and not returned items with the full price of under 16947.7?",
        "evidence": "full price of under 16947.7 refers to l_extendedprice < 16947.7; returned item refers to l_returnflag = 'R'; not returned item refers to l_returnflag = 'A' OR l_returnflag = 'N'; difference = subtract(count(l_linenumber where l_returnflag = 'A' OR l_returnflag = 'N'), count(l_linenumber where l_returnflag = 'R')) where l_extendedprice < 16947.7",
        "SQL": "SELECT SUM(IIF(l_returnflag = 'A', 1, 0)) - SUM(IIF(l_returnflag = 'N', 1, 0)) AS diff FROM lineitem WHERE l_extendedprice < 16947.7"
    },
    {
        "db_id": "retails",
        "question": "What is the supply cost of large plated tin?",
        "evidence": "supply cost refers to ps_supplycost; large plated tin refers to p_type = 'large plated tin'",
        "SQL": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_type = 'large plated tin'"
    },
    {
        "db_id": "retails",
        "question": "Please name any three parts that have an available quantity of more than 9998.",
        "evidence": "part name refers to p_name; an available quantity of more than 9998 refers to ps_availqty > 9998",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_availqty > 9998 LIMIT 3"
    },
    {
        "db_id": "retails",
        "question": "Please list any two parts that come with the wrap bag container and have a supply cost of under 10.",
        "evidence": "part name refers to p_name; wrap bag container refers to p_container = 'WRAP BAG'; supply cost of under 10 refers to ps_supplycost < 10",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost < 10 AND T1.p_container = 'WRAP BAG' LIMIT 2"
    },
    {
        "db_id": "retails",
        "question": "What is the nationality of supplier number 1?",
        "evidence": "nationality refers to n_name; supplier number 1 refers to s_suppkey = 1",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_suppkey = 1"
    },
    {
        "db_id": "retails",
        "question": "What are the countries that belong to Africa?",
        "evidence": "country is nation name which refers to n_name; Africa is region name refers to r_name = 'Africa'",
        "SQL": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'Africa'"
    },
    {
        "db_id": "retails",
        "question": "Which region has the lowest number of countries?",
        "evidence": "region refers to has r_name; the lowest number of countries refers to min(count(n_name))",
        "SQL": "SELECT T.r_name FROM ( SELECT T1.r_name, COUNT(T2.n_name) AS num FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey GROUP BY T1.r_name ) AS T ORDER BY T.num LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "How many customers from the furniture segments come from Iraq?",
        "evidence": "furniture segment refers to c_mktsegment = 'FURNITURE'; Iraq refers to n_name = 'Iraq'",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'FURNITURE' AND T2.n_name = 'IRAQ'"
    },
    {
        "db_id": "retails",
        "question": "What is the name of the customer number 93697 with the total order price of 191918.92?",
        "evidence": "customer name refers to c_name; number 93697 refers to o_custkey = 93697; total order price of 191918.92 refers to o_totalprice = 191918.92",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice = 191918.92 AND T1.o_custkey = 93697"
    },
    {
        "db_id": "retails",
        "question": "Which nation and region does the Customer#000000008 come from?",
        "evidence": "nation refers to n_name; region refers to r_name; Customer#000000008 refers to c_name = 'Customer#000000008'",
        "SQL": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_name = 'Customer#000000008'"
    },
    {
        "db_id": "retails",
        "question": "What is the delivery time and the clerk of order number 6?",
        "evidence": "delivery time = subtract(l_receiptdate, l_commitdate); clerk refers to o_clerk; order number 6 refers to o_orderkey = 6",
        "SQL": "SELECT JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate), T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderkey = 6"
    },
    {
        "db_id": "retails",
        "question": "How many Japanese suppliers have their accounts in debt?",
        "evidence": "Japanese refers to n_name = 'Japan'; have accounts in debt refers to s_acctbal < 0",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'JAPAN'"
    },
    {
        "db_id": "retails",
        "question": "Which customer is the most in debt?",
        "evidence": "customer refers to c_name; the most in debt refers to max(c_acctbal)",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )"
    },
    {
        "db_id": "retails",
        "question": "List all the dates of the urgent orders.",
        "evidence": "date refers to o_orderdate; urgent order refers to o_orderpriority = '1-URGENT'",
        "SQL": "SELECT o_orderdate FROM orders WHERE o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question": "How many of the items are instructed to be delivered in person?",
        "evidence": "instructed to be delivered in person refers to l_shipinstruct = 'DELIVER IN PERSON'",
        "SQL": "SELECT COUNT(l_linenumber) FROM lineitem WHERE l_shipinstruct = 'DELIVER IN PERSON'"
    },
    {
        "db_id": "retails",
        "question": "What is the largest supplier's account balance?",
        "evidence": "the largest supplier's account balance refers to max(s_acctbal)",
        "SQL": "SELECT MAX(s_acctbal) FROM supplier"
    },
    {
        "db_id": "retails",
        "question": "How many part supplies are close to being out of stock?",
        "evidence": "close to being out of stock refers to ps_availqty < 10",
        "SQL": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10"
    },
    {
        "db_id": "retails",
        "question": "List all the nations in Europe.",
        "evidence": "nation refers to n_name; Europe refers to r_name = 'EUROPE'",
        "SQL": "SELECT T2.n_name FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T1.r_name = 'EUROPE'"
    },
    {
        "db_id": "retails",
        "question": "What is the supply cost for the part \"violet olive rose ivory sandy\"?",
        "evidence": "supply cost refers to ps_supplycost; part \"violet olive rose ivory sandy\" refers to p_name = 'violet olive rose ivory sandy'",
        "SQL": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'violet olive rose ivory sandy'"
    },
    {
        "db_id": "retails",
        "question": "List all the customers' phone numbers from Ethiopia.",
        "evidence": "phone number refers to c_phone; Ethiopia refers to n_name = 'Ethiopia'",
        "SQL": "SELECT T1.c_phone FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'Ethiopia'"
    },
    {
        "db_id": "retails",
        "question": "What is the total price of all orders from the customer with the phone number \"627-220-3983\"?",
        "evidence": "total price = sum(o_totalprice); phone number \"627-220-3983\" refers to c_phone = '627-220-3983'",
        "SQL": "SELECT SUM(T1.o_totalprice) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_phone = '627-220-3983'"
    },
    {
        "db_id": "retails",
        "question": "What are the shipping methods for the orders on 12/31/1994?",
        "evidence": "shipping method refers to l_shipmode; order on 12/31/1994 refers to o_orderdate = '1994-12-31'",
        "SQL": "SELECT DISTINCT T2.l_shipmode FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1994-12-31'"
    },
    {
        "db_id": "retails",
        "question": "What is the account balance of the supplier with the most parts?",
        "evidence": "account balance refers to s_acctbal; the most parts refers to max(count(ps_suppkey))",
        "SQL": "SELECT T.s_acctbal FROM ( SELECT T1.s_acctbal, COUNT(T2.ps_suppkey) AS num FROM supplier AS T1 INNER JOIN partsupp AS T2 ON T1.s_suppkey = T2.ps_suppkey GROUP BY T1.s_suppkey ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "Which nation does the supplier with the account balance of \"4393.04\" belong to?",
        "evidence": "nation refers to n_name; account balance of \"4393.04\" refers to s_acctbal = 4393.04",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal = 4393.04"
    },
    {
        "db_id": "retails",
        "question": "What is the region with the most customers?",
        "evidence": "region refers to r_name; the most customers refers to max(count(c_custkey))",
        "SQL": "SELECT T.r_name FROM ( SELECT T3.r_name, COUNT(T2.c_custkey) AS num FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey GROUP BY T3.r_name ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "List the phone number of the customer who placed orders with a total price of more than $300,000.",
        "evidence": "phone number refers to c_phone; a total price of more than $300,000 refers to o_totalprice > 300000",
        "SQL": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000"
    },
    {
        "db_id": "retails",
        "question": "What are the clerks of orders with line items shipped by mail?",
        "evidence": "clerk refers to o_clerk; shipped by mail refers to l_shipmode = 'MAIL'",
        "SQL": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T2.l_shipmode = 'MAIL'"
    },
    {
        "db_id": "retails",
        "question": "What are the top 5 nations of suppliers with the lowest account balance?",
        "evidence": "nation refers to n_name; the lowest account balance refers to min(s_acctbal)",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey ORDER BY T1.s_acctbal LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "List all the addresses for the suppliers of the biggest parts.",
        "evidence": "addresses refers to s_address; the biggest part refers to max(p_size)",
        "SQL": "SELECT T2.s_address FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey ORDER BY T3.p_size DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "Which part and supplier have the most profit?",
        "evidence": "part refers to p_name; supplier refers to s_name; the most profit refers to max(subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity)))",
        "SQL": "SELECT T3.p_name, T4.s_name FROM partsupp AS T1 INNER JOIN lineitem AS T2 ON T1.ps_suppkey = T2.l_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey INNER JOIN supplier AS T4 ON T1.ps_suppkey = T4.s_suppkey ORDER BY T2.l_extendedprice * (1 - T2.l_discount) - T1.ps_supplycost * T2.l_quantity DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What proportion of suppliers are from Asia?",
        "evidence": "Asia refers to r_name = 'ASIA'; proportion = divide(count(s_name where r_name = 'ASIA'), count(s_name)) * 100%",
        "SQL": "SELECT CAST(SUM(IIF(T1.r_name = 'ASIA', 1, 0)) AS REAL) * 100 / COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey"
    },
    {
        "db_id": "retails",
        "question": "Please indicate the total price of order key 32.",
        "evidence": "total price refers to o_totalprice; order key 32 refers to o_orderkey = 32",
        "SQL": "SELECT o_totalprice FROM orders WHERE o_orderkey = 32"
    },
    {
        "db_id": "retails",
        "question": "How many order keys are not applied for the discount?",
        "evidence": "order key refers to l_orderkey; not applied for the discount refers to l_discount = 0",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE l_discount = 0"
    },
    {
        "db_id": "retails",
        "question": "List line items shipped by truck with delivery time before 1997.",
        "evidence": "line item refers to l_linenumber; shipped by truck refers to l_shipmode = 'truck'; delivery time before 1997 refers to year(l_shipdate) < 1997",
        "SQL": "SELECT l_linenumber FROM lineitem WHERE STRFTIME('%Y', l_shipdate) < 1997 AND l_shipmode = 'truck'"
    },
    {
        "db_id": "retails",
        "question": "How many line items were returned in 1998?",
        "evidence": "line item refers to l_linenumber; returned refers to returnflag = 'R'; in 1998 refers to year(l_shipdate) = 1998",
        "SQL": "SELECT l_linenumber FROM lineitem WHERE STRFTIME('%Y', l_shipdate) < 1997 AND l_shipmode = 'TRUCK'"
    },
    {
        "db_id": "retails",
        "question": "Which line item with the highest quantity is shipped by air?",
        "evidence": "line item refers to l_linenumber; the highest quantity refers to max(l_quantity); shipped by air refers to l_shipmode = 'AIR'",
        "SQL": "SELECT l_linenumber FROM lineitem WHERE l_shipmode = 'AIR' ORDER BY l_quantity DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "List the names of customers whose accounts are in debt.",
        "evidence": "name of customer refers to c_name; account in debt refers to c_acctbal < 0",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "How many customers belong to the household segment in Germany?",
        "evidence": "household segment refers to c_mktsegment = 'household'; Germany refers to n_name = 'Germany'",
        "SQL": "SELECT COUNT(T1.c_name) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_mktsegment = 'HOUSEHOLD' AND T2.n_name = 'GERMANY'"
    },
    {
        "db_id": "retails",
        "question": "List the phone numbers of customers whose order priority is urgent.",
        "evidence": "phone number refers to c_phone; order priority is urgent refers to o_orderpriority = '1-URGENT'",
        "SQL": "SELECT T2.c_phone FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question": "Name of customer whose order is applied with the highest discount.",
        "evidence": "customer name refers to c_name; the highest discount refers to max(l_discount)",
        "SQL": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY T2.l_discount DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "List the 5 orders with the highest total price, indicating the delivery date.",
        "evidence": "order refers to o_orderkey; the highest total price refers to max(o_totalprice); delivery date refers to l_shipdate",
        "SQL": "SELECT T1.o_orderkey, T2.l_shipdate FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T1.o_totalprice DESC LIMIT 5"
    },
    {
        "db_id": "retails",
        "question": "List the comments describing orders from customers in the furniture segment.",
        "evidence": "comment refers to o_comment; furniture segment refers to c_mktsegment = 'FURNITURE'",
        "SQL": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'FURNITURE'"
    },
    {
        "db_id": "retails",
        "question": "Please indicate the names of the customers whose order with a total price over $300000.",
        "evidence": "customer name refers to c_name; a total price over $300000 refers to o_totalprice > 300000",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000"
    },
    {
        "db_id": "retails",
        "question": "Name customers in India with account balances over $5000.",
        "evidence": "customer name refers to c_name; India refers to n_name = 'INDIA'; account balance over $5000 refers to c_acctbal > 5000",
        "SQL": "SELECT T1.c_name FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal > 5000 AND T2.n_name = 'INDIA'"
    },
    {
        "db_id": "retails",
        "question": "List the phone numbers of suppliers from Japan.",
        "evidence": "phone number refers to s_phone; Japan refers to n_name = 'JAPAN'",
        "SQL": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'JAPAN'"
    },
    {
        "db_id": "retails",
        "question": "Among the providers in Argentina, which supplier has an account that is in debt?",
        "evidence": "Argentina refers to n_name = 'ARGENTINA'; supplier refers to s_name; an account in debt refers to s_acctbal < 0",
        "SQL": "SELECT T1.s_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'ARGENTINA'"
    },
    {
        "db_id": "retails",
        "question": "How many countries belong to the Algeria region?",
        "evidence": "the algeria region refers to r_name = 'ALGERIA'",
        "SQL": "SELECT COUNT(T1.r_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey WHERE T2.n_name = 'ALGERIA'"
    },
    {
        "db_id": "retails",
        "question": "Please indicate the names of customers whose orders are eligible for 10% discount with order dates between 1/1/1994 and 1/1/1995.",
        "evidence": "customer name refers to c_name; 10% discount refers to l_discount = 0.1; order dates between 1/1/1994 and 1/1/1995 refers to year(o_orderdate) = 1994 OR o_orderdate = '1995-01-01'",
        "SQL": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey WHERE T2.l_discount = 0.1 AND STRFTIME('%Y', T1.o_orderdate) BETWEEN 1994 AND 1995"
    },
    {
        "db_id": "retails",
        "question": "Calculate the percentage of countries that belong to the American region.",
        "evidence": "the American region refers to r_name = 'America'; percentage = divide(count(n_name where r_name = 'America'), count(n_name)) * 100%",
        "SQL": "SELECT CAST(SUM(IIF(T1.r_name = 'America', 1, 0)) AS REAL) * 100 / COUNT(T2.n_name) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey"
    },
    {
        "db_id": "retails",
        "question": "Calculate percentage of household segment in Indonesia.",
        "evidence": "household segment refers to c_mktsegment = 'HOUSEHOLD'; Indonesia refers to n_name = 'Indonesia'; percentage = divide(count(c_mktsegment = 'HOUSEHOLD'), count(c_mktsegment)) where n_name = 'Indonesia' * 100%",
        "SQL": "SELECT CAST(SUM(IIF(T1.c_mktsegment = 'HOUSEHOLD', 1, 0)) AS REAL) * 100 / COUNT(T1.c_mktsegment) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDONESIA'"
    },
    {
        "db_id": "retails",
        "question": "Please list the names of all the products under the type \"promo brushed steel\".",
        "evidence": "product name refers to p_name; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'",
        "SQL": "SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "db_id": "retails",
        "question": "What is the comment of the product \"burlywood plum powder puff mint\"?",
        "evidence": "comment refers to p_comment; product \"burlywood plum powder puff mint\" refers to p_name = 'burlywood plum powder puff mint'",
        "SQL": "SELECT p_comment FROM part WHERE p_name = 'burlywood plum powder puff mint'"
    },
    {
        "db_id": "retails",
        "question": "How many parts have a retail price of over 1900?",
        "evidence": "a retail price of over 1900 refers to p_retailprice > 1900",
        "SQL": "SELECT COUNT(p_partkey) FROM part WHERE p_retailprice > 1900"
    },
    {
        "db_id": "retails",
        "question": "Among the products under the type \"promo brushed steel\", how many of them are manufactured by Manufacturer#5?",
        "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; Manufacturer#5 refers to p_mfgr = 'Manufacturer#5'",
        "SQL": "SELECT COUNT(p_partkey) FROM part WHERE p_type = 'PROMO BRUSHED STEEL' AND p_mfgr = 'Manufacturer#5'"
    },
    {
        "db_id": "retails",
        "question": "Please list all the brands that contain a part under the type \"promo brushed steel\".",
        "evidence": "brand refers to p_brand; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'",
        "SQL": "SELECT p_brand FROM part WHERE p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "db_id": "retails",
        "question": "What is the name of the product with the highest retail price?",
        "evidence": "name of the product refers to p_name; the highest retail price refers to p_retailprice",
        "SQL": "SELECT p_name FROM part WHERE p_retailprice = ( SELECT MAX(p_retailprice) FROM part )"
    },
    {
        "db_id": "retails",
        "question": "Which part has a bigger size, \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\"?",
        "evidence": "size refers to p_size; \"pink powder drab lawn cyan\" or \"cornflower sky burlywood green beige\" refers to p_name in ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige')",
        "SQL": "SELECT T.p_name FROM ( SELECT p_name, p_size FROM part WHERE p_name IN ('pink powder drab lawn cyan', 'cornflower sky burlywood green beige') ) AS T ORDER BY p_size DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "How many parts have a jumbo case container?",
        "evidence": "jumbo case container refers to p_container = 'JUMBO CASE'",
        "SQL": "SELECT COUNT(p_partkey) FROM part WHERE p_container = 'JUMBO CASE'"
    },
    {
        "db_id": "retails",
        "question": "What is the size of the smallest part in a jumbo case container?",
        "evidence": "size refers to p_size; the smallest part refers to min(p_size); jumbo case container refers to p_container = 'JUMBO CASE'",
        "SQL": "SELECT MIN(p_size) FROM part WHERE p_container = 'JUMBO CASE'"
    },
    {
        "db_id": "retails",
        "question": "How many suppliers have their accounts in debt?",
        "evidence": "account in debt refers to s_acctbal < 0",
        "SQL": "SELECT COUNT(s_suppkey) FROM supplier WHERE s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "Please list the names of the top 3 suppliers with the most amount of money in their accounts.",
        "evidence": "supplier name refers to s_name; the most amount of money refers to max(s_acctbal)",
        "SQL": "SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3"
    },
    {
        "db_id": "retails",
        "question": "Please list the phone numbers of all the suppliers in Germany.",
        "evidence": "phone number refers to s_phone; Germany refers to n_name = 'Germany'",
        "SQL": "SELECT T1.s_phone FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'Germany'"
    },
    {
        "db_id": "retails",
        "question": "Please list the names of all the suppliers for the part \"hot spring dodger dim light\".",
        "evidence": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "SQL": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question": "What is the lowest supply cost for the part \"hot spring dodger dim light\"?",
        "evidence": "the lowest supply cost refers to min(ps_supplycost); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "SQL": "SELECT MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question": "What is the name of the supplier that provides the part \"hot spring dodger dim light\" with the lowest supply cost?",
        "evidence": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; the lowest supply cost refers to min(ps_supplycost)",
        "SQL": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light' ORDER BY T1.ps_supplycost LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What is the total quantity available by all suppliers for the part \"hot spring dodger dim light\"?",
        "evidence": "total quantity available refers to sum(ps_availqty); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "SQL": "SELECT SUM(T1.ps_availqty) FROM partsupp AS T1 INNER JOIN part AS T2 ON T1.ps_partkey = T2.p_partkey WHERE T2.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question": "Which supplier can provide the most number of \"hot spring dodger dim light\"? Please give the supplier's phone number.",
        "evidence": "the most number refers to max(ps_availqty); \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; phone number refers to s_phone",
        "SQL": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T2.ps_availqty DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "Please list the names of all the suppliers for the part with the highest retail price.",
        "evidence": "supplier name refers to s_name; the highest retail price refers to max(p_retailprice)",
        "SQL": "SELECT T3.s_phone FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_name = 'hot spring dodger dim light' ORDER BY T1.p_size DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "How many suppliers for the part \"hot spring dodger dim light\" are in Vietnam?",
        "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; Vietnam refers to n_name = 'VIETNAM'",
        "SQL": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey INNER JOIN nation AS T4 ON T3.s_nationkey = T4.n_nationkey WHERE T1.p_name = 'hot spring dodger dim light' AND T4.n_name = 'VIETNAM'"
    },
    {
        "db_id": "retails",
        "question": "Among the suppliers providing parts under the type \"promo brushed steel\", how many of them are in debt?",
        "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; in debt refers to s_acctbal < 0",
        "SQL": "SELECT COUNT(T3.s_name) FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T3.s_acctbal < 0 AND T1.p_type = 'PROMO BRUSHED STEEL'"
    },
    {
        "db_id": "retails",
        "question": "Please list the names of all the suppliers for parts under Brand#55.",
        "evidence": "supplier name refers to s_name; Brand#55 refers to p_brand = 'Brand#55'",
        "SQL": "SELECT T3.s_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_brand = 'Brand#55'"
    },
    {
        "db_id": "retails",
        "question": "Among all the parts under the type \"promo brushed steel\", how many of them have a total available quantity from all suppliers of under 5000?",
        "evidence": "type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'; a total available quantity of under 5000 refers to sum(ps_availqty) < 5000",
        "SQL": "SELECT SUM(num) FROM ( SELECT COUNT(T3.s_name) AS num FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey INNER JOIN supplier AS T3 ON T2.ps_suppkey = T3.s_suppkey WHERE T1.p_type = 'PROMO BRUSHED STEEL' GROUP BY T2.ps_partkey HAVING SUM(T2.ps_availqty) < 5000 ) T"
    },
    {
        "db_id": "retails",
        "question": "The part \"hot spring dodger dim light\" is ordered in how many orders?",
        "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "SQL": "SELECT COUNT(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question": "What is the total quantity of the part \"hot spring dodger dim light\" ordered in all orders?",
        "evidence": "total quantity refers to sum(l_quantity); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "SQL": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question": "Please list the order keys of all the orders that have more than 2 parts with a jumbo case container.",
        "evidence": "order key refers to l_orderkey; jumbo case container refers to p_container = 'JUMBO CASE'; more than 2 parts refers to count(l_partkey) > 2",
        "SQL": "SELECT T.l_orderkey FROM ( SELECT T2.l_orderkey, COUNT(T2.l_partkey) AS num FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_container = 'JUMBO CASE' GROUP BY T2.l_orderkey ) AS T WHERE T.num > 2"
    },
    {
        "db_id": "retails",
        "question": "Among all the suppliers in debt, how many of them are in Europe?",
        "evidence": "in debt refers to s_acctbal < 0; Europe refers to r_name = 'EUROPE'",
        "SQL": "SELECT COUNT(T1.n_nationkey) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey INNER JOIN supplier AS T3 ON T1.n_nationkey = T3.s_nationkey WHERE T2.r_name = 'EUROPE' AND T3.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "Among all the suppliers providing the part \"hot spring dodger dim light\", how many of them are in Europe?",
        "evidence": "part \"hot spring dodger dim light\" refers to p_name = hot spring dodger dim light; Europe refers to r_name = 'EUROPE'",
        "SQL": "SELECT COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey WHERE T1.r_name = 'EUROPE'"
    },
    {
        "db_id": "retails",
        "question": "Please list the phone numbers of all the suppliers for the parts ordered in order no.1.",
        "evidence": "phone number refers to s_phone; order no.1 refers to l_orderkey = 1",
        "SQL": "SELECT T2.s_phone FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 1"
    },
    {
        "db_id": "retails",
        "question": "Among the suppliers for the parts ordered in order no.4, how many of them are in debt?",
        "evidence": "order no.4 refers to l_orderkey = 4; in debt refers to s_acctbal < 0",
        "SQL": "SELECT COUNT(T1.l_linenumber) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_orderkey = 4 AND T2.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "Among the parts that are returned, how many of them are provided by a supplier in debt?",
        "evidence": "returned refers to l_returnflag = 'R'; in debt refers to s_acctbal < 0",
        "SQL": "SELECT COUNT(T1.l_partkey) FROM lineitem AS T1 INNER JOIN supplier AS T2 ON T1.l_suppkey = T2.s_suppkey WHERE T1.l_returnflag = 'R' AND T2.s_acctbal < 0"
    },
    {
        "db_id": "retails",
        "question": "On which date was the part \"burnished seashell gainsboro navajo chocolate\" in order no.1 shipped?",
        "evidence": "date refers to l_shipdate; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1",
        "SQL": "SELECT T1.l_shipdate FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "db_id": "retails",
        "question": "What is the quantity of the part \"burnished seashell gainsboro navajo chocolate\" ordered in order no.1?",
        "evidence": "quantity refers to l_quantity; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1",
        "SQL": "SELECT T1.l_quantity FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T1.l_orderkey = 1 AND T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "db_id": "retails",
        "question": "Which part is ordered in a bigger amount in order no.1, \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\"?",
        "evidence": "amount refers to sum(l_quantity); order no.1 refers to l_orderkey = 1; \"burnished seashell gainsboro navajo chocolate\" or \"salmon white grey tan navy\" refers to p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate')",
        "SQL": "SELECT T.p_name FROM ( SELECT T2.p_name, SUM(T1.l_quantity) AS num FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name IN ('salmon white grey tan navy', 'burnished seashell gainsboro navajo chocolate') GROUP BY T1.l_partkey ) AS T ORDER BY T.num DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What is the biggest discount among all orders for the part \"burnished seashell gainsboro navajo chocolate\"?",
        "evidence": "the biggest discount refers to max(l_discount); part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'",
        "SQL": "SELECT MAX(T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "db_id": "retails",
        "question": "Please list all the modes of shipping for the part \"burnished seashell gainsboro navajo chocolate\".",
        "evidence": "mode of shipping refers to l_shipmode; part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'",
        "SQL": "SELECT DISTINCT T1.l_shipmode FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate'"
    },
    {
        "db_id": "retails",
        "question": "What is the average supply cost for the part \"hot spring dodger dim light\"?",
        "evidence": "average supply cost refers to avg(ps_supplycost); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "SQL": "SELECT AVG(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question": "How much higher in percentage is the highest supply cost of the part \"hot spring dodger dim light\" than the lowest supply cost?",
        "evidence": "part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'; percentage = divide(subtract(max(ps_supplycost), min(ps_supplycost)), min(ps_supplycost)) * 100%",
        "SQL": "SELECT CAST((MAX(T1.ps_supplycost) - MIN(T1.ps_supplycost)) AS REAL) * 100 / MIN(T1.ps_supplycost) FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'"
    },
    {
        "db_id": "retails",
        "question": "What is the profit for part no.98768 in order no.1?",
        "evidence": "part no.98768 refers to l_partkey = 98768; order no.1 refers to l_orderkey = 1; profit = subtract(multiply(l_extendedprice, subtract(1, l_discount)), multiply(ps_supplycost, l_quantity))",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) - T2.ps_supplycost * T1.l_quantity FROM lineitem AS T1 INNER JOIN partsupp AS T2 ON T1.l_suppkey = T2.ps_suppkey WHERE T1.l_orderkey = 1 AND T1.l_partkey = 98768"
    },
    {
        "db_id": "retails",
        "question": "What is the discounted price of the part \"burnished seashell gainsboro navajo chocolate\" in order no.1?",
        "evidence": "part \"burnished seashell gainsboro navajo chocolate\" refers to p_name = 'burnished seashell gainsboro navajo chocolate'; order no.1 refers to l_orderkey = 1; discounted price refers to multiply(l_extendedprice, subtract(1, l_discount))",
        "SQL": "SELECT T1.l_extendedprice * (1 - T1.l_discount) FROM lineitem AS T1 INNER JOIN part AS T2 ON T1.l_partkey = T2.p_partkey WHERE T2.p_name = 'burnished seashell gainsboro navajo chocolate' AND T1.l_orderkey = 1"
    },
    {
        "db_id": "retails",
        "question": "Which market segment does the customer with the highest amount of debt belongs to?",
        "evidence": "market segment refers to c_mktsegment; the highest amount of debt refers to max(c_acctbal)",
        "SQL": "SELECT c_mktsegment FROM customer WHERE c_acctbal = ( SELECT MIN(c_acctbal) FROM customer )"
    },
    {
        "db_id": "retails",
        "question": "In 1997, how many orders were shipped via mail?",
        "evidence": "1997 refers to year(l_shipdate) = 1997; shipped via mail refers to l_shipmode = 'MAIL'",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1997' AND l_shipmode = 'MAIL'"
    },
    {
        "db_id": "retails",
        "question": "How many customers are in the furniture segment?",
        "evidence": "furniture segment refers to c_mktsegment = 'FURNITURE'",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_mktsegment = 'FURNITURE'"
    },
    {
        "db_id": "retails",
        "question": "Among the items shipped in 1994 via truck, how many items were returned?",
        "evidence": "1994 refers to year(l_shipdate) = 1994; via truck refers to l_shipmode = 'TRUCK'; returned refers to l_returnflag = 'R'",
        "SQL": "SELECT COUNT(l_orderkey) FROM lineitem WHERE STRFTIME('%Y', l_shipdate) = '1994' AND l_returnflag = 'R' AND l_shipmode = 'TRUCK'"
    },
    {
        "db_id": "retails",
        "question": "How many customers in the machinery segment are in debt?",
        "evidence": "machinery segment refers to c_mktsegment = 'MACHINERY'; in debt refers to c_acctbal < 0",
        "SQL": "SELECT COUNT(c_custkey) FROM customer WHERE c_acctbal < 0 AND c_mktsegment = 'MACHINERY'"
    },
    {
        "db_id": "retails",
        "question": "How many urgent orders did Clerk#000000001 handle in 1997?",
        "evidence": "urgent order refers to o_orderpriority = '1-URGENT'; Clerk#000000001 refers to o_clerk = 'Clerk#000000001'; 1997 refers to year(o_orderdate) = 1997",
        "SQL": "SELECT COUNT(o_orderkey) FROM orders WHERE STRFTIME('%Y', o_orderdate) = '1997' AND o_clerk = 'Clerk#000000001' AND o_orderpriority = '1-URGENT'"
    },
    {
        "db_id": "retails",
        "question": "What is the name of the customer whose order was delivered the longest?",
        "evidence": "name of the customer refers to c_name; delivered the longest refers to max(subtract(l_receiptdate, l_commitdate))",
        "SQL": "SELECT T3.c_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN customer AS T3 ON T1.o_custkey = T3.c_custkey ORDER BY (JULIANDAY(T2.l_receiptdate) - JULIANDAY(T2.l_commitdate)) DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "How much is the total price of all the orders shipped to customers in Argentina?",
        "evidence": "total price = sum(o_totalprice); Argentina refers to n_name = 'Argentina'",
        "SQL": "SELECT SUM(T3.o_totalprice) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey INNER JOIN orders AS T3 ON T1.c_custkey = T3.o_custkey WHERE T2.n_name = 'ARGENTINA'"
    },
    {
        "db_id": "retails",
        "question": "How many customers in the building segments have orders with a total price of no less than 50,000?",
        "evidence": "building segment refers to c_mktsegment = 'BUILDING'; a total price of no less than 50,000 refers to o_totalprice > 50000",
        "SQL": "SELECT COUNT(T2.c_name) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'BUILDING' AND T1.o_totalprice > 50000"
    },
    {
        "db_id": "retails",
        "question": "Which country has the least number of suppliers?",
        "evidence": "country refers to n_name; the least number of suppliers refers to min(count(s_name))",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey GROUP BY T1.s_nationkey ORDER BY COUNT(T1.s_name) LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "How much is the part supply cost for the medium metallic grey dodger linen?",
        "evidence": "part supply cost refers to ps_supplycost; medium metallic grey dodger linen refers to p_name = 'medium metallic grey dodger linen'",
        "SQL": "SELECT T2.ps_supplycost FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T1.p_name = 'medium metallic grey dodger linen'"
    },
    {
        "db_id": "retails",
        "question": "What are the top 2 countries with the highest number of indebted suppliers?",
        "evidence": "country refers to c_name; highest number of indebted refers to max(sum(acctbal)) where s_acctbal < 0",
        "SQL": "SELECT T.n_name FROM ( SELECT T2.n_name, SUM(T1.s_acctbal) AS num FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 GROUP BY T1.s_nationkey ) AS T ORDER BY T.num LIMIT 2"
    },
    {
        "db_id": "retails",
        "question": "What are the names of the parts that have a part supply cost of at least 1,000?",
        "evidence": "name of the part refers to p_name; part supply cost of at least 1,000 refers to ps_supplycost > 1000",
        "SQL": "SELECT T1.p_name FROM part AS T1 INNER JOIN partsupp AS T2 ON T1.p_partkey = T2.ps_partkey WHERE T2.ps_supplycost > 1000"
    },
    {
        "db_id": "retails",
        "question": "What is the name of the country of the supplier with the highest debt?",
        "evidence": "name of the country refers to n_name; the highest debt refers to min(s_acctbal)",
        "SQL": "SELECT T2.n_name FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey ORDER BY T1.s_suppkey DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "Who is the clerk in charge of handling the item with the highest amount of extended price?",
        "evidence": "clerk refers to o_clerk; the highest amount of extended price refers to max(l_extendedprice)",
        "SQL": "SELECT T1.o_clerk FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey ORDER BY T2.l_extendedprice DESC LIMIT 1"
    },
    {
        "db_id": "retails",
        "question": "What are the total quantities of the items ordered by customer 101660 on 10/5/1995?",
        "evidence": "total quantity refers to sum(l_quantity); customer 101660 refers to o_custkey = 101660; on 10/5/1995 refers to o_orderdate = '1995-10-05'",
        "SQL": "SELECT SUM(T2.l_quantity) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderdate = '1995-10-05' AND T1.o_custkey = 101660"
    },
    {
        "db_id": "retails",
        "question": "What is the total amount of tax charged for the order placed by customer 88931 on 7/13/994?",
        "evidence": "total amount of tax refers to sum(multiply(multiply(l_extendedprice, subtract(1, l_discount)), add(1, l_tax))); customer 88931 refers to o_custkey = 88931; on 7/13/1994 refers to o_orderdate = '1994-07-13'",
        "SQL": "SELECT SUM(T2.l_extendedprice * (1 - T2.l_discount) * (1 + T2.l_tax)) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_custkey = 88931 AND T1.o_orderdate = '1994-07-13'"
    },
    {
        "db_id": "retails",
        "question": "What are the names of the parts that were ordered by customer 110942?",
        "evidence": "name of the part refers to p_name; customer 110942 refers to o_custkey = 110942",
        "SQL": "SELECT T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 110942"
    },
    {
        "db_id": "retails",
        "question": "How much is the discounted price of every item that customer 111511 ordered in order 53159? List the names of the parts of every item.",
        "evidence": "discounted price refers to multiply(l_extendedprice, subtract(1, l_discount)); customer 111511 refers to o_custkey = 111511; order 53159 refers to o_orderkey = 53159; name of the part refers to p_name",
        "SQL": "SELECT T2.l_extendedprice * (1 - T2.l_discount), T3.p_name FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey INNER JOIN part AS T3 ON T2.l_partkey = T3.p_partkey WHERE T1.o_custkey = 111511 AND T1.o_orderkey = 53159"
    }
]