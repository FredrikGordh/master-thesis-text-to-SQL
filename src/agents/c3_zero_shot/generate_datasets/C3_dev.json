[
  {
    "db_id": "small_bank_1",
    "question": "Find the total savings balance of all accounts except the account with name 'Brown'.",
    "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
    "schema": {
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        [
          "Brown"
        ]
      ],
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( custid, name(\"Brown\") )\n# savings ( custid, balance )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the total savings balance of all accounts except the account with name 'Brown'.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?",
    "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        [
          "Brown"
        ]
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# accounts ( custid, name(\"Brown\") )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What is the total balance of savings accounts not belonging to someone with the name Brown?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many accounts are there in total?",
    "query": "SELECT count(*) FROM accounts",
    "schema": {
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( custid, name )\n# savings ( custid, balance )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### How many accounts are there in total?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Count the number of accounts.",
    "query": "SELECT count(*) FROM accounts",
    "schema": {
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( custid, name )\n# savings ( custid, balance )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Count the number of accounts.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the total checking balance in all accounts?",
    "query": "SELECT sum(balance) FROM checking",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "balance",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# accounts ( custid, name )\n# savings ( balance, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What is the total checking balance in all accounts?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the total balance across checking accounts.",
    "query": "SELECT sum(balance) FROM checking",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the total balance across checking accounts.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the average checking balance.",
    "query": "SELECT avg(balance) FROM checking",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the average checking balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the average balance in checking accounts?",
    "query": "SELECT avg(balance) FROM checking",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What is the average balance in checking accounts?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "How many accounts have a savings balance above the average savings balance?",
    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
    "schema": {
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( balance, custid )\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### How many accounts have a savings balance above the average savings balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
    "schema": {
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "balance",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( balance, custid )\n# accounts ( custid, name )\n# checking ( balance, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the number of accounts with a savings balance that is higher than the average savings balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
    "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
    "schema": {
      "checking": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( custid, balance )\n# accounts ( custid, name )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name and id of accounts whose checking balance is below the maximum checking balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
    "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
    "schema": {
      "checking": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( custid, balance )\n# accounts ( custid, name )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the checking balance of the account whose owner's name contains the substring 'ee'?",
    "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What is the checking balance of the account whose owner's name contains the substring 'ee'?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.",
    "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "accounts": [
        "name",
        "custid"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# accounts ( name, custid )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the balance of the checking account belonging to an owner whose name contains 'ee'.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the checking balance and saving balance in the Brown's account.",
    "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
    "schema": {
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        [
          "Brown"
        ]
      ],
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( custid, name(\"Brown\") )\n# checking ( custid, balance )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the checking balance and saving balance in the Brown's account.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the checking and savings balances in accounts belonging to Brown?",
    "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
    "schema": {
      "accounts": [
        "name",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "checking": [
        "balance",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [
          "Brown"
        ],
        []
      ],
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( name(\"Brown\"), custid )\n# savings ( balance, custid )\n# checking ( balance, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the checking and savings balances in accounts belonging to Brown?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "name",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( name, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?",
    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "name",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( name, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
    "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the checking balance of the accounts whose savings balance is higher than the average savings balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
    "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
    "schema": {
      "savings": [
        "balance",
        "custid"
      ],
      "checking": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( balance, custid )\n# checking ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "List all customers' names in the alphabetical order.",
    "query": "SELECT name FROM accounts ORDER BY name",
    "schema": {
      "accounts": [
        "name",
        "custid"
      ],
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( name, custid )\n# savings ( custid, balance )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### List all customers' names in the alphabetical order.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names of all the customers in alphabetical order?",
    "query": "SELECT name FROM accounts ORDER BY name",
    "schema": {
      "accounts": [
        "name",
        "custid"
      ],
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( name, custid )\n# savings ( custid, balance )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names of all the customers in alphabetical order?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name of account that has the lowest total checking and saving balance.",
    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
    "schema": {
      "accounts": [
        "name",
        "custid"
      ],
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( name, custid )\n# checking ( balance, custid )\n# savings ( balance, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name of account that has the lowest total checking and saving balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "name",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( name, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What is the name corresponding to the accoung with the lowest sum of checking and savings balances?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.",
    "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
    "schema": {
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( balance, custid )\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
    "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
    "schema": {
      "savings": [
        "balance",
        "custid"
      ],
      "checking": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( balance, custid )\n# checking ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name and checking balance of the account with the lowest savings balance.",
    "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name and checking balance of the account with the lowest savings balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
    "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# checking ( custid, balance )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the number of checking accounts for each account name.",
    "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
    "schema": {
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the number of checking accounts for each account name.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
    "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
    "schema": {
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names of customers with accounts, and how many checking accounts do each of them have?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the total saving balance for each account name.",
    "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the total saving balance for each account name.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
    "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
    "schema": {
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( custid, name )\n# savings ( custid, balance )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names of customers with accounts, and what are the total savings balances for each?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name of accounts whose checking balance is below the average checking balance.",
    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# accounts ( custid, name )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name of accounts whose checking balance is below the average checking balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names of customers with checking balances lower than the average checking balance?",
    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
    "schema": {
      "checking": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( custid, balance )\n# accounts ( custid, name )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names of customers with checking balances lower than the average checking balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the saving balance of the account with the highest checking balance.",
    "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the saving balance of the account with the highest checking balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
    "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
    "schema": {
      "checking": [
        "custid",
        "balance"
      ],
      "savings": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( custid, balance )\n# savings ( custid, balance )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What is the savings balance of the account belonging to the customer with the highest checking balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.",
    "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?",
    "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What is the sum of checking and savings balances for all customers, ordered by the total balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name and checking balance of the account with the lowest saving balance.",
    "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name and checking balance of the account with the lowest saving balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What is the name and checking balance of the account which has the lowest savings balance?",
    "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# accounts ( custid, name )\n# checking ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What is the name and checking balance of the account which has the lowest savings balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
    "schema": {
      "accounts": [
        "custid",
        "name"
      ],
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "custid",
        "balance"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( custid, name )\n# checking ( balance, custid )\n# savings ( custid, balance )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name, checking balance and saving balance of all accounts in the bank.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names, checking balances, and savings balances for all customers?",
    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
    "schema": {
      "accounts": [
        "name",
        "custid"
      ],
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( name, custid )\n# checking ( balance, custid )\n# savings ( balance, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names, checking balances, and savings balances for all customers?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "name",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( name, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
    "schema": {
      "accounts": [
        "name",
        "custid"
      ],
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( name, custid )\n# checking ( balance, custid )\n# savings ( balance, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
    "schema": {
      "checking": [
        "custid",
        "balance"
      ],
      "savings": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( custid, balance )\n# savings ( custid, balance )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name of accounts whose checking balance is higher than corresponding saving balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names of customers with a higher checking balance than savings balance?",
    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
    "schema": {
      "checking": [
        "balance",
        "custid"
      ],
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "name",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "checking": [
        [],
        []
      ],
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checking ( balance, custid )\n# savings ( balance, custid )\n# accounts ( name, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names of customers with a higher checking balance than savings balance?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
    "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ],
      "accounts": [
        "custid",
        "name"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# checking ( custid, balance )\n# accounts ( custid, name )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
    "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
    "schema": {
      "savings": [
        "custid",
        "balance"
      ],
      "checking": [
        "custid",
        "balance"
      ],
      "accounts": [
        "name",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( custid, balance )\n# checking ( custid, balance )\n# accounts ( name, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
    "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
    "schema": {
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "name",
        "custid"
      ],
      "checking": [
        "balance",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( balance, custid )\n# accounts ( name, custid )\n# checking ( balance, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.\nSELECT"
  },
  {
    "db_id": "small_bank_1",
    "question": "What are names and savings balances of the three accounts with the highest savings balances?",
    "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
    "schema": {
      "savings": [
        "balance",
        "custid"
      ],
      "accounts": [
        "name",
        "custid"
      ],
      "checking": [
        "balance",
        "custid"
      ]
    },
    "fk": [
      "savings.custid = accounts.custid",
      "checking.custid = accounts.custid"
    ],
    "db_contents": {
      "savings": [
        [],
        []
      ],
      "accounts": [
        [],
        []
      ],
      "checking": [
        [],
        []
      ]
    },
    "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# savings ( balance, custid )\n# accounts ( name, custid )\n# checking ( balance, custid )\n# savings.custid = accounts.custid\n# checking.custid = accounts.custid\n#\n### What are names and savings balances of the three accounts with the highest savings balances?\nSELECT"
  }
]