
You are an assistant that is great at generating SQL queries from questions in natural language.

CREATE TABLE account
(
    account_id  INTEGER default 0 not null
        primary key,
    district_id INTEGER default 0 not null,
    frequency   TEXT   not null,
    date        DATE          not null,
    foreign key (district_id) references district (district_id)
);

More information about account table:

original_column_name,column_name,column_description,data_format,value_description,
account_id,account id,the id of the account,integer,,
district_id,location of branch,location of branch,integer ,,
frequency,frequency,frequency of the acount,text,,"""POPLATEK MESICNE"" stands for monthly issuance
""POPLATEK TYDNE"" stands for weekly issuance
""POPLATEK PO OBRATU"" stands for issuance after transaction"
date,date,the creation date of the account,date,in the form YYMMDD,

Three rows from account table:
account_id      district_id     frequency       date
1       18      POPLATEK MESICNE        1995-03-24
2       1       POPLATEK MESICNE        1993-02-26
3       5       POPLATEK MESICNE        1997-07-07


CREATE TABLE card
(
    card_id INTEGER default 0 not null
        primary key,
    disp_id INTEGER           not null,
    type    TEXT    not null,
    issued  DATE          not null,
    foreign key (disp_id) references disp (disp_id)
);

More information about card table:

original_column_name,column_name,column_description,data_format,value_description
card_id,credit card id,id number of credit card,integer,
disp_id,disposition id,disposition id,integer,
type,,type of credit card,text,"""junior"": junior class of credit card; 
""classic"": standard class of credit card; 
""gold"": high-level credit card"
issued,,the date when the credit card issued ,date,in the form YYMMDD

Three rows from card table:
card_id disp_id type    issued
1       9       gold    1998-10-16
2       19      classic 1998-03-13
3       41      gold    1995-09-03


CREATE TABLE client
(
    client_id   INTEGER        not null
        primary key,
    gender      TEXT not null,
    birth_date  DATE       not null,
    district_id INTEGER        not null,
    foreign key (district_id) references district (district_id)
);

More information about client table:

original_column_name,column_name,column_description,data_format,value_description
client_id,,the unique number,integer,
gender,,,text,"F：female 
M：male "
birth_date,,birth date,date,
district_id,location of branch,location of branch,integer,

Three rows from client table:
client_id       gender  birth_date      district_id
1       F       1970-12-13      18
2       M       1945-02-04      1
3       F       1940-10-09      1


CREATE TABLE disp
(
    disp_id    INTEGER        not null
        primary key,
    client_id  INTEGER        not null,
    account_id INTEGER        not null,
    type      TEXT not null,
    foreign key (account_id) references account (account_id),
    foreign key (client_id) references client (client_id)
);

More information about disp table:

original_column_name,column_name,column_description,data_format,value_description
disp_id,disposition id,unique number of identifying this row of record,integer,
client_id,,id number of client,integer,
account_id,,id number of account,integer,
type,,type of disposition,text,"""OWNER"" : ""USER"" : ""DISPONENT""
commonsense evidence:
the account can only have the right to issue permanent orders or apply for loans"

Three rows from disp table:
disp_id client_id       account_id      type
1       1       1       OWNER
2       2       2       OWNER
3       3       2       DISPONENT


CREATE TABLE district
(
    district_id INTEGER default 0 not null
        primary key,
    A2          TEXT   not null,
    A3          TEXT   not null,
    A4          TEXT       not null,
    A5          TEXT           not null,
    A6          TEXT           not null,
    A7          TEXT           not null,
    A8          INTEGER        not null,
    A9          INTEGER           not null,
    A10         REAL not null,
    A11         INTEGER           not null,
    A12         REAL null,
    A13         REAL not null,
    A14         INTEGER           not null,
    A15         INTEGER        null,
    A16         INTEGER          not null
);

More information about district table:

original_column_name,column_name,column_description,data_format,value_description
district_id,location of branch,location of branch,integer ,
A2,district_name,district_name,text,
A3,region,region,text,
A4,number of inhabitants ,,text,
A5,no. of municipalities with inhabitants < 499,municipality < district < region,text,
A6,no. of municipalities with inhabitants 500-1999,municipality < district < region,text,
A7,no. of municipalities with inhabitants 2000-9999,municipality < district < region,text,
A8,no. of municipalities with inhabitants > 10000,municipality < district < region,integer,
A9,,,integer,not useful
A10,ratio of urban inhabitants,ratio of urban inhabitants,real,
A11,average salary,average salary,integer,
A12,unemployment rate 1995,unemployment rate 1995,real,
A13,unemployment rate 1996,unemployment rate 1996,real,
A14,no. of entrepreneurs per 1000 inhabitants,no. of entrepreneurs per 1000 inhabitants,integer,
A15,no. of committed crimes 1995,no. of committed crimes 1995,integer,
A16,no. of committed crimes 1996,no. of committed crimes 1996,integer,

Three rows from district table:
district_id     A2      A3      A4      A5      A6      A7      A8      A9      A10     A11     A12     A13     A14     A15     A16
1       Hl.m. Praha     Prague  1204953 0       0       0       1       1       100.0   12541   0.2     0.43    167     85677   99107
2       Benesov central Bohemia 88884   80      26      6       2       5       46.7    8507    1.6     1.85    132     2159    2674
3       Beroun  central Bohemia 75232   55      26      4       1       5       41.7    8980    1.9     2.21    111     2824    2813

CREATE TABLE loan
(
    loan_id    INTEGER default 0 not null
        primary key,
    account_id INTEGER           not null,
    date       DATE          not null,
    amount     INTEGER           not null,
    duration   INTEGER           not null,
    payments   REAL not null,
    status     TEXT    not null,
    foreign key (account_id) references account (account_id)
);

More information about loan table:

original_column_name,column_name,column_description,data_format,value_description
loan_id,,the id number identifying the loan data,integer,
account_id,,the id number identifying the account,integer,
date,,the date when the loan is approved,date,
amount,,approved amount,integer,unit：US dollar
duration,,loan duration,integer,unit：month
payments,monthly payments,monthly payments,real,unit：month
status,,repayment status,text,"'A' stands for contract finished, no problems;
'B' stands for contract finished, loan not paid;
'C' stands for running contract, OK so far;
'D' stands for running contract, client in debt"

Three rows from loan table:
loan_id account_id      date    amount  duration        payments        status
4959    2       1994-01-05      80952   24      3373.0  A
4961    19      1996-04-29      30276   12      2523.0  B
4962    25      1997-12-08      30276   12      2523.0  A


CREATE TABLE `order`
(
    order_id   INTEGER default 0 not null
        primary key,
    account_id INTEGER           not null,
    bank_to    TEXT    not null,
    account_to INTEGER           not null,
    amount     REAL not null,
    k_symbol   TEXT    not null,
    foreign key (account_id) references account (account_id)
);

More information about order table:

original_column_name,column_name,column_description,data_format,value_description
order_id,,identifying the unique order,integer,
account_id,,id number of account,integer,
bank_to,bank of the recipient,bank of the recipient,text,
account_to,account of the recipient,account of the recipient,integer,each bank has unique two-letter code
amount,debited amount,debited amount,real,
k_symbol,characterization of the payment,purpose of the payment,text,"""POJISTNE"" stands for insurance payment
""SIPO"" stands for household payment
""LEASING"" stands for leasing
""UVER"" stands for loan payment"

Three rows from order table:
order_id        account_id      bank_to account_to      amount  k_symbol
29401   1       YZ      87144583        2452.0  SIPO
29402   2       ST      89597016        3372.7  UVER
29403   2       QR      13943797        7266.0  SIPO


CREATE TABLE trans
(
    trans_id   INTEGER default 0    not null
        primary key,
    account_id INTEGER default 0    not null,
    date       DATE             not null,
    type       TEXT       not null,
    operation  TEXT      null,
    amount     INTEGER              not null,
    balance    INTEGER             not null,
    k_symbol   TEXT      null,
    bank       TEXT       null,
    account    INTEGER          null,
    foreign key (account_id) references account (account_id)
);

More information about trans table:

original_column_name,column_name,column_description,data_format,value_description
trans_id,transaction id,transaction id,integer,
account_id,,,integer,
date,date of transaction,date of transaction,date,
type,+/- transaction,+/- transaction,text,"""PRIJEM"" stands for credit
""VYDAJ"" stands for withdrawal"
operation,mode of transaction,mode of transaction,text,"""VYBER KARTOU"": credit card withdrawal
""VKLAD"": credit in cash
""PREVOD Z UCTU"" :collection from another bank
""VYBER"": withdrawal in cash
""PREVOD NA UCET"": remittance to another bank"
amount,amount of money,amount of money,integer,Unit：USD
balance,balance after transaction,balance after transaction,integer,Unit：USD
k_symbol,characterization of the transaction,,text,"""POJISTNE"": stands for insurrance payment
""SLUZBY"": stands for payment for statement
""UROK"": stands for interest credited
""SANKC. UROK"": sanction interest if negative balance
""SIPO"": stands for household
""DUCHOD"": stands for old-age pension
""UVER"": stands for loan payment"
bank,bank of the partner,,text,each bank has unique two-letter code
account,account of the partner,,integer,

Three rows from trans table:
trans_id        account_id      date    type    operation       amount  balance k_symbol        bank    account
1       1       1995-03-24      PRIJEM  VKLAD   1000    1000    None    None    None
5       1       1995-04-13      PRIJEM  PREVOD Z UCTU   3679    4679    None    AB      41403269
6       1       1995-05-13      PRIJEM  PREVOD Z UCTU   3679    20977   None    AB      41403269


You have already generated SQL queries regarding the above tables for some questions. The SQL query you generated turned out to be wrong. 
Below, I will give you the question, your predicted SQL query and then the correct SQL query. Please give me 1-2 sentences that could have been added to the prompt used to generate the SQL query, 
that would have enabled you to generate the SQL query correctly. Please only generate the direct text that I can input into my prompt. 

Question: "The average unemployment ratio of 1995 and 1996, which one has higher percentage?"
Predicted SQL": "SELECT AVG(A12) AS avg_unemployment_1995, AVG(A13) AS avg_unemployment_1996\nFROM district;"
Correct SQL: "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district;"










You are an assistant that is great at generating SQL queries from questions in natural language.

CREATE TABLE account
(
    account_id  INTEGER default 0 not null
        primary key,
    district_id INTEGER default 0 not null,
    frequency   TEXT   not null,
    date        DATE          not null,
    foreign key (district_id) references district (district_id)
);

More information about account table:

original_column_name,column_name,column_description,data_format,value_description,
account_id,account id,the id of the account,integer,,
district_id,location of branch,location of branch,integer ,,
frequency,frequency,frequency of the acount,text,,"""POPLATEK MESICNE"" stands for monthly issuance
""POPLATEK TYDNE"" stands for weekly issuance
""POPLATEK PO OBRATU"" stands for issuance after transaction"
date,date,the creation date of the account,date,in the form YYMMDD,

Three rows from account table:
account_id      district_id     frequency       date
1       18      POPLATEK MESICNE        1995-03-24
2       1       POPLATEK MESICNE        1993-02-26
3       5       POPLATEK MESICNE        1997-07-07


CREATE TABLE card
(
    card_id INTEGER default 0 not null
        primary key,
    disp_id INTEGER           not null,
    type    TEXT    not null,
    issued  DATE          not null,
    foreign key (disp_id) references disp (disp_id)
);

More information about card table:

original_column_name,column_name,column_description,data_format,value_description
card_id,credit card id,id number of credit card,integer,
disp_id,disposition id,disposition id,integer,
type,,type of credit card,text,"""junior"": junior class of credit card; 
""classic"": standard class of credit card; 
""gold"": high-level credit card"
issued,,the date when the credit card issued ,date,in the form YYMMDD

Three rows from card table:
card_id disp_id type    issued
1       9       gold    1998-10-16
2       19      classic 1998-03-13
3       41      gold    1995-09-03


CREATE TABLE client
(
    client_id   INTEGER        not null
        primary key,
    gender      TEXT not null,
    birth_date  DATE       not null,
    district_id INTEGER        not null,
    foreign key (district_id) references district (district_id)
);

More information about client table:

original_column_name,column_name,column_description,data_format,value_description
client_id,,the unique number,integer,
gender,,,text,"F：female 
M：male "
birth_date,,birth date,date,
district_id,location of branch,location of branch,integer,

Three rows from client table:
client_id       gender  birth_date      district_id
1       F       1970-12-13      18
2       M       1945-02-04      1
3       F       1940-10-09      1


CREATE TABLE disp
(
    disp_id    INTEGER        not null
        primary key,
    client_id  INTEGER        not null,
    account_id INTEGER        not null,
    type      TEXT not null,
    foreign key (account_id) references account (account_id),
    foreign key (client_id) references client (client_id)
);

More information about disp table:

original_column_name,column_name,column_description,data_format,value_description
disp_id,disposition id,unique number of identifying this row of record,integer,
client_id,,id number of client,integer,
account_id,,id number of account,integer,
type,,type of disposition,text,"""OWNER"" : ""USER"" : ""DISPONENT""
commonsense evidence:
the account can only have the right to issue permanent orders or apply for loans"

Three rows from disp table:
disp_id client_id       account_id      type
1       1       1       OWNER
2       2       2       OWNER
3       3       2       DISPONENT


CREATE TABLE district
(
    district_id INTEGER default 0 not null
        primary key,
    A2          TEXT   not null,
    A3          TEXT   not null,
    A4          TEXT       not null,
    A5          TEXT           not null,
    A6          TEXT           not null,
    A7          TEXT           not null,
    A8          INTEGER        not null,
    A9          INTEGER           not null,
    A10         REAL not null,
    A11         INTEGER           not null,
    A12         REAL null,
    A13         REAL not null,
    A14         INTEGER           not null,
    A15         INTEGER        null,
    A16         INTEGER          not null
);

More information about district table:

original_column_name,column_name,column_description,data_format,value_description
district_id,location of branch,location of branch,integer ,
A2,district_name,district_name,text,
A3,region,region,text,
A4,number of inhabitants ,,text,
A5,no. of municipalities with inhabitants < 499,municipality < district < region,text,
A6,no. of municipalities with inhabitants 500-1999,municipality < district < region,text,
A7,no. of municipalities with inhabitants 2000-9999,municipality < district < region,text,
A8,no. of municipalities with inhabitants > 10000,municipality < district < region,integer,
A9,,,integer,not useful
A10,ratio of urban inhabitants,ratio of urban inhabitants,real,
A11,average salary,average salary,integer,
A12,unemployment rate 1995,unemployment rate 1995,real,
A13,unemployment rate 1996,unemployment rate 1996,real,
A14,no. of entrepreneurs per 1000 inhabitants,no. of entrepreneurs per 1000 inhabitants,integer,
A15,no. of committed crimes 1995,no. of committed crimes 1995,integer,
A16,no. of committed crimes 1996,no. of committed crimes 1996,integer,

Three rows from district table:
district_id     A2      A3      A4      A5      A6      A7      A8      A9      A10     A11     A12     A13     A14     A15     A16
1       Hl.m. Praha     Prague  1204953 0       0       0       1       1       100.0   12541   0.2     0.43    167     85677   99107
2       Benesov central Bohemia 88884   80      26      6       2       5       46.7    8507    1.6     1.85    132     2159    2674
3       Beroun  central Bohemia 75232   55      26      4       1       5       41.7    8980    1.9     2.21    111     2824    2813

CREATE TABLE loan
(
    loan_id    INTEGER default 0 not null
        primary key,
    account_id INTEGER           not null,
    date       DATE          not null,
    amount     INTEGER           not null,
    duration   INTEGER           not null,
    payments   REAL not null,
    status     TEXT    not null,
    foreign key (account_id) references account (account_id)
);

More information about loan table:

original_column_name,column_name,column_description,data_format,value_description
loan_id,,the id number identifying the loan data,integer,
account_id,,the id number identifying the account,integer,
date,,the date when the loan is approved,date,
amount,,approved amount,integer,unit：US dollar
duration,,loan duration,integer,unit：month
payments,monthly payments,monthly payments,real,unit：month
status,,repayment status,text,"'A' stands for contract finished, no problems;
'B' stands for contract finished, loan not paid;
'C' stands for running contract, OK so far;
'D' stands for running contract, client in debt"

Three rows from loan table:
loan_id account_id      date    amount  duration        payments        status
4959    2       1994-01-05      80952   24      3373.0  A
4961    19      1996-04-29      30276   12      2523.0  B
4962    25      1997-12-08      30276   12      2523.0  A


CREATE TABLE `order`
(
    order_id   INTEGER default 0 not null
        primary key,
    account_id INTEGER           not null,
    bank_to    TEXT    not null,
    account_to INTEGER           not null,
    amount     REAL not null,
    k_symbol   TEXT    not null,
    foreign key (account_id) references account (account_id)
);

More information about order table:

original_column_name,column_name,column_description,data_format,value_description
order_id,,identifying the unique order,integer,
account_id,,id number of account,integer,
bank_to,bank of the recipient,bank of the recipient,text,
account_to,account of the recipient,account of the recipient,integer,each bank has unique two-letter code
amount,debited amount,debited amount,real,
k_symbol,characterization of the payment,purpose of the payment,text,"""POJISTNE"" stands for insurance payment
""SIPO"" stands for household payment
""LEASING"" stands for leasing
""UVER"" stands for loan payment"

Three rows from order table:
order_id        account_id      bank_to account_to      amount  k_symbol
29401   1       YZ      87144583        2452.0  SIPO
29402   2       ST      89597016        3372.7  UVER
29403   2       QR      13943797        7266.0  SIPO


CREATE TABLE trans
(
    trans_id   INTEGER default 0    not null
        primary key,
    account_id INTEGER default 0    not null,
    date       DATE             not null,
    type       TEXT       not null,
    operation  TEXT      null,
    amount     INTEGER              not null,
    balance    INTEGER             not null,
    k_symbol   TEXT      null,
    bank       TEXT       null,
    account    INTEGER          null,
    foreign key (account_id) references account (account_id)
);

More information about trans table:

original_column_name,column_name,column_description,data_format,value_description
trans_id,transaction id,transaction id,integer,
account_id,,,integer,
date,date of transaction,date of transaction,date,
type,+/- transaction,+/- transaction,text,"""PRIJEM"" stands for credit
""VYDAJ"" stands for withdrawal"
operation,mode of transaction,mode of transaction,text,"""VYBER KARTOU"": credit card withdrawal
""VKLAD"": credit in cash
""PREVOD Z UCTU"" :collection from another bank
""VYBER"": withdrawal in cash
""PREVOD NA UCET"": remittance to another bank"
amount,amount of money,amount of money,integer,Unit：USD
balance,balance after transaction,balance after transaction,integer,Unit：USD
k_symbol,characterization of the transaction,,text,"""POJISTNE"": stands for insurrance payment
""SLUZBY"": stands for payment for statement
""UROK"": stands for interest credited
""SANKC. UROK"": sanction interest if negative balance
""SIPO"": stands for household
""DUCHOD"": stands for old-age pension
""UVER"": stands for loan payment"
bank,bank of the partner,,text,each bank has unique two-letter code
account,account of the partner,,integer,

Three rows from trans table:
trans_id        account_id      date    type    operation       amount  balance k_symbol        bank    account
1       1       1995-03-24      PRIJEM  VKLAD   1000    1000    None    None    None
5       1       1995-04-13      PRIJEM  PREVOD Z UCTU   3679    4679    None    AB      41403269
6       1       1995-05-13      PRIJEM  PREVOD Z UCTU   3679    20977   None    AB      41403269


Using valid SQL, answer the following question based on the tables provided above.
It is important to use qualified column names in the SQL-query, meaning the form "SELECT table_name.column_name FROM table_name;"
Hint helps you to write the correct sqlite SQL query.
Question: The average unemployment ratio of 1995 and 1996, which one has higher percentage?
Hint: Generate a query to directly compare the average unemployment ratios of 1995 and 1996 from the 'district' table and return only the year with the higher percentage.
DO NOT return anything else except the SQL query.



